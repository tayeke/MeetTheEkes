/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./node_modules/vex-js/dist/css/vex-theme-flat-attack.css":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./node_modules/vex-js/dist/css/vex-theme-flat-attack.css ***!
  \***********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "@-webkit-keyframes vex-flipin-horizontal {\n  0% {\n    opacity: 0;\n    -webkit-transform: rotateY(-90deg);\n    transform: rotateY(-90deg); }\n  100% {\n    opacity: 1;\n    -webkit-transform: rotateY(0deg);\n    transform: rotateY(0deg); } }\n\n@keyframes vex-flipin-horizontal {\n  0% {\n    opacity: 0;\n    -webkit-transform: rotateY(-90deg);\n    transform: rotateY(-90deg); }\n  100% {\n    opacity: 1;\n    -webkit-transform: rotateY(0deg);\n    transform: rotateY(0deg); } }\n\n@-webkit-keyframes vex-flipout-horizontal {\n  0% {\n    opacity: 1;\n    -webkit-transform: rotateY(0deg);\n    transform: rotateY(0deg); }\n  100% {\n    opacity: 0;\n    -webkit-transform: rotateY(90deg);\n    transform: rotateY(90deg); } }\n\n@keyframes vex-flipout-horizontal {\n  0% {\n    opacity: 1;\n    -webkit-transform: rotateY(0deg);\n    transform: rotateY(0deg); }\n  100% {\n    opacity: 0;\n    -webkit-transform: rotateY(90deg);\n    transform: rotateY(90deg); } }\n\n.vex.vex-theme-flat-attack {\n  -webkit-perspective: 1300px;\n  perspective: 1300px;\n  -webkit-perspective-origin: 50% 150px;\n  perspective-origin: 50% 150px;\n  padding-top: 100px;\n  padding-bottom: 100px;\n  font-size: 1.5em; }\n\n.vex.vex-theme-flat-attack.vex-closing .vex-content {\n  -webkit-animation: vex-flipout-horizontal .5s forwards;\n  animation: vex-flipout-horizontal .5s forwards; }\n\n.vex.vex-theme-flat-attack .vex-content {\n  -webkit-transform-style: preserve-3d;\n  transform-style: preserve-3d;\n  -webkit-animation: vex-flipin-horizontal .5s;\n  animation: vex-flipin-horizontal .5s; }\n\n.vex.vex-theme-flat-attack .vex-content {\n  font-family: \"Helvetica Neue\", sans-serif;\n  font-weight: 200;\n  background: #fff;\n  color: #444;\n  padding: 2em 2em 3em 2em;\n  line-height: 1.5em;\n  position: relative;\n  margin: 0 auto;\n  max-width: 100%;\n  width: 600px; }\n\n.vex.vex-theme-flat-attack .vex-content h1, .vex.vex-theme-flat-attack .vex-content h2, .vex.vex-theme-flat-attack .vex-content h3, .vex.vex-theme-flat-attack .vex-content h4, .vex.vex-theme-flat-attack .vex-content h5, .vex.vex-theme-flat-attack .vex-content h6, .vex.vex-theme-flat-attack .vex-content p, .vex.vex-theme-flat-attack .vex-content ul, .vex.vex-theme-flat-attack .vex-content li {\n  color: inherit; }\n\n.vex.vex-theme-flat-attack .vex-close {\n  position: absolute;\n  top: 0;\n  right: 0;\n  cursor: pointer; }\n\n.vex.vex-theme-flat-attack .vex-close:before {\n  font-family: \"Helvetica Neue\", sans-serif;\n  font-weight: 100;\n  line-height: 1px;\n  padding-top: .5em;\n  display: block;\n  font-size: 2em;\n  text-indent: 1px;\n  overflow: hidden;\n  height: 1.25em;\n  width: 1.25em;\n  text-align: center;\n  top: 0;\n  right: 0;\n  color: #fff;\n  background: #666; }\n\n.vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-message {\n  margin-bottom: .5em; }\n\n.vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input {\n  margin-bottom: .5em; }\n\n.vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input textarea, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"date\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"datetime\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"datetime-local\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"email\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"month\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"number\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"password\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"search\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"tel\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"text\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"time\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"url\"], .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"week\"] {\n  border-radius: 3px;\n  background: #f0f0f0;\n  width: 100%;\n  padding: .25em .67em;\n  border: 0;\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n  min-height: 2.5em;\n  margin: 0 0 .25em; }\n\n.vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input textarea:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"date\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"datetime\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"datetime-local\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"email\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"month\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"number\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"password\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"search\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"tel\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"text\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"time\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"url\"]:focus, .vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-input input[type=\"week\"]:focus {\n  box-shadow: inset 0 0 0 2px #666;\n  outline: none; }\n\n.vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-buttons {\n  *zoom: 1;\n  padding-top: 1em;\n  margin-bottom: -3em;\n  margin-left: -2em;\n  margin-right: -2em; }\n\n.vex.vex-theme-flat-attack .vex-dialog-form .vex-dialog-buttons:after {\n  content: \"\";\n  display: table;\n  clear: both; }\n\n.vex.vex-theme-flat-attack .vex-dialog-button {\n  border-radius: 0;\n  border: 0;\n  margin: 0;\n  float: right;\n  padding: .5em 1em;\n  font-size: 1.13em;\n  text-transform: uppercase;\n  font-weight: 200;\n  letter-spacing: .1em;\n  line-height: 1em;\n  font-family: inherit; }\n\n.vex.vex-theme-flat-attack .vex-dialog-button.vex-last {\n  margin-left: 0; }\n\n.vex.vex-theme-flat-attack .vex-dialog-button:focus {\n  outline: none; }\n\n.vex.vex-theme-flat-attack .vex-dialog-button.vex-dialog-button-primary {\n  background: #666;\n  color: #fff; }\n\n.vex.vex-theme-flat-attack .vex-dialog-button.vex-dialog-button-primary:focus {\n  box-shadow: inset 0 3px rgba(0, 0, 0, 0.2); }\n\n.vex.vex-theme-flat-attack .vex-dialog-button.vex-dialog-button-secondary {\n  background: #fff;\n  color: #ccc; }\n\n.vex.vex-theme-flat-attack .vex-dialog-button.vex-dialog-button-secondary:focus {\n  box-shadow: inset 0 3px #aaa;\n  background: #eee;\n  color: #777; }\n\n.vex.vex-theme-flat-attack .vex-dialog-button.vex-dialog-button-secondary:hover, .vex.vex-theme-flat-attack .vex-dialog-button.vex-dialog-button-secondary:active {\n  color: #777; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-close:before {\n  background: #ff7ea7; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input select:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input textarea:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"date\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"datetime\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"datetime-local\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"email\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"month\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"number\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"password\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"search\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"tel\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"text\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"time\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"url\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-input input[type=\"week\"]:focus {\n  box-shadow: inset 0 0 0 2px #ff7ea7; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-pink .vex-dialog-form .vex-dialog-buttons .vex-dialog-button.vex-dialog-button-primary {\n  background: #ff7ea7; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-close:before {\n  background: #ce4a55; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input select:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input textarea:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"date\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"datetime\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"datetime-local\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"email\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"month\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"number\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"password\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"search\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"tel\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"text\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"time\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"url\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-input input[type=\"week\"]:focus {\n  box-shadow: inset 0 0 0 2px #ce4a55; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-red .vex-dialog-form .vex-dialog-buttons .vex-dialog-button.vex-dialog-button-primary {\n  background: #ce4a55; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-close:before {\n  background: #34b989; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input select:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input textarea:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"date\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"datetime\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"datetime-local\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"email\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"month\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"number\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"password\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"search\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"tel\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"text\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"time\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"url\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-input input[type=\"week\"]:focus {\n  box-shadow: inset 0 0 0 2px #34b989; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-green .vex-dialog-form .vex-dialog-buttons .vex-dialog-button.vex-dialog-button-primary {\n  background: #34b989; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-close:before {\n  background: #477FA5; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input select:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input textarea:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"date\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"datetime\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"datetime-local\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"email\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"month\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"number\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"password\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"search\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"tel\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"text\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"time\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"url\"]:focus, .vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-input input[type=\"week\"]:focus {\n  box-shadow: inset 0 0 0 2px #477FA5; }\n\n.vex.vex-theme-flat-attack.vex-theme-flat-attack-blue .vex-dialog-form .vex-dialog-buttons .vex-dialog-button.vex-dialog-button-primary {\n  background: #477FA5; }\n\n.vex-loading-spinner.vex-theme-flat-attack {\n  height: 4em;\n  width: 4em; }\n", ""]);



/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./node_modules/vex-js/dist/css/vex.css":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./node_modules/vex-js/dist/css/vex.css ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "@-webkit-keyframes vex-fadein {\n  0% {\n    opacity: 0; }\n  100% {\n    opacity: 1; } }\n\n@keyframes vex-fadein {\n  0% {\n    opacity: 0; }\n  100% {\n    opacity: 1; } }\n\n@-webkit-keyframes vex-fadeout {\n  0% {\n    opacity: 1; }\n  100% {\n    opacity: 0; } }\n\n@keyframes vex-fadeout {\n  0% {\n    opacity: 1; }\n  100% {\n    opacity: 0; } }\n\n@-webkit-keyframes vex-rotation {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg); } }\n\n@keyframes vex-rotation {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg); } }\n\n.vex, .vex *, .vex *:before, .vex *:after {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box; }\n\n.vex {\n  position: fixed;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 1111;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0; }\n\n.vex-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll; }\n\n.vex-overlay {\n  -webkit-animation: vex-fadein .5s;\n  animation: vex-fadein .5s;\n  position: fixed;\n  z-index: 1111;\n  background: rgba(0, 0, 0, 0.4);\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0; }\n\n.vex-overlay.vex-closing {\n  -webkit-animation: vex-fadeout .5s forwards;\n  animation: vex-fadeout .5s forwards; }\n\n.vex-content {\n  -webkit-animation: vex-fadein .5s;\n  animation: vex-fadein .5s;\n  background: #fff; }\n\n.vex.vex-closing .vex-content {\n  -webkit-animation: vex-fadeout .5s forwards;\n  animation: vex-fadeout .5s forwards; }\n\n.vex-close:before {\n  font-family: Arial, sans-serif;\n  content: \"\\00D7\"; }\n\n.vex-dialog-form {\n  margin: 0; }\n\n.vex-dialog-button {\n  text-rendering: optimizeLegibility;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  cursor: pointer;\n  -webkit-tap-highlight-color: transparent; }\n\n.vex-loading-spinner {\n  -webkit-animation: vex-rotation .7s linear infinite;\n  animation: vex-rotation .7s linear infinite;\n  box-shadow: 0 0 1em rgba(0, 0, 0, 0.1);\n  position: fixed;\n  z-index: 1112;\n  margin: auto;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 2em;\n  width: 2em;\n  background: #fff; }\n\nbody.vex-open {\n  overflow: hidden; }\n", ""]);



/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/index.scss":
/*!************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/index.scss ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var urlEscape = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/url-escape.js */ "./node_modules/css-loader/dist/runtime/url-escape.js");
var ___CSS_LOADER_URL___0___ = urlEscape(__webpack_require__(/*! ../fonts/AlegreyaSans-Light.ttf */ "./src/fonts/AlegreyaSans-Light.ttf"));
var ___CSS_LOADER_URL___1___ = urlEscape(__webpack_require__(/*! ../fonts/AlegreyaSans-Regular.ttf */ "./src/fonts/AlegreyaSans-Regular.ttf"));
var ___CSS_LOADER_URL___2___ = urlEscape(__webpack_require__(/*! ../fonts/AlegreyaSans-LightItalic.ttf */ "./src/fonts/AlegreyaSans-LightItalic.ttf"));
var ___CSS_LOADER_URL___3___ = urlEscape(__webpack_require__(/*! ../fonts/King-Basil-Lite.otf */ "./src/fonts/King-Basil-Lite.otf"));
var ___CSS_LOADER_URL___4___ = urlEscape(__webpack_require__(/*! ../fonts/MinionPro-Regular.otf */ "./src/fonts/MinionPro-Regular.otf"));

// Module
exports.push([module.i, "@font-face {\n  font-family: alegreya;\n  src: url(" + ___CSS_LOADER_URL___0___ + ") format(\"truetype\");\n  font-style: normal;\n  font-weight: normal; }\n\n@font-face {\n  font-family: alegreya;\n  src: url(" + ___CSS_LOADER_URL___1___ + ") format(\"truetype\");\n  font-style: normal;\n  font-weight: bold; }\n\n@font-face {\n  font-family: alegreya;\n  src: url(" + ___CSS_LOADER_URL___2___ + ") format(\"truetype\");\n  font-style: italic;\n  font-weight: normal; }\n\n@font-face {\n  font-family: kingbasil;\n  src: url(" + ___CSS_LOADER_URL___3___ + ") format(\"opentype\");\n  font-style: normal;\n  font-weight: normal; }\n\n.kingbasil {\n  font-family: kingbasil;\n  line-height: 1.85; }\n\n@font-face {\n  font-family: minion;\n  src: url(" + ___CSS_LOADER_URL___4___ + ") format(\"opentype\");\n  font-style: normal;\n  font-weight: normal; }\n\n.minion {\n  font-family: minion; }\n\n.green {\n  color: #7ea193; }\n\nhtml {\n  font-size: 62.5%; }\n  @media screen and (max-width: 935px) {\n    html {\n      font-size: 52.5%; } }\n  @media screen and (max-width: 550px) {\n    html {\n      font-size: 40.5%; } }\n\nbody {\n  font-family: alegreya;\n  font-weight: normal;\n  font-style: normal;\n  font-size: 170%;\n  color: black;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale; }\n\np {\n  line-height: 1.2;\n  padding: 0.8rem 0; }\n\n.bold {\n  font-weight: bold; }\n\nh1 {\n  font-size: 3em; }\n\n#heading {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  background-color: #eaf0f3;\n  overflow: hidden; }\n  #heading h1 {\n    color: #487797; }\n  @media screen and (max-width: 550px) {\n    #heading {\n      display: block; } }\n\n#app {\n  margin-top: -5px;\n  background: white; }\n\n#headingLeft {\n  flex: 1;\n  text-align: center;\n  padding: 15% 2rem 2rem;\n  background-color: #eaf0f3; }\n  @media screen and (max-width: 550px) {\n    #headingLeft {\n      position: relative;\n      z-index: 2; } }\n\n#headingRight img {\n  max-width: 100%; }\n\n@media screen and (max-width: 550px) {\n  #headingRight {\n    position: relative;\n    margin-top: -35%;\n    z-index: 1; } }\n\n.button {\n  outline: none;\n  -webkit-appearance: none;\n  appearance: none;\n  background: #f5e893;\n  border: none;\n  font-family: alegreya;\n  font-weight: bold;\n  font-size: 1.8rem;\n  text-transform: uppercase;\n  text-decoration: none;\n  color: black;\n  border: 2px solid #7ea193;\n  box-sizing: border-box;\n  border-radius: 1rem;\n  padding: 0.5rem 1rem;\n  margin: 0 1rem;\n  cursor: pointer;\n  -webkit-transition: background-color 600ms;\n  transition: background-color 600ms; }\n  .button:hover {\n    background: #7ea193; }\n  .button.add {\n    background: #7ea193;\n    padding: 0 0.6rem;\n    margin: 0;\n    font-size: 3rem;\n    line-height: 1;\n    color: white; }\n\na {\n  color: #487797;\n  cursor: pointer; }\n\ndiv.vex, .vex.vex-theme-flat-attack .vex-dialog-button.vex-dialog-button, .vex.vex-theme-flat-attack .vex-content.vex-content {\n  font-family: alegreya !important; }\n\n.vex.vex-theme-flat-attack .vex-dialog-button.vex-dialog-button-secondary.vex-dialog-button-secondary {\n  color: #f8d9ce; }\n\n.vex.vex-theme-flat-attack .vex-dialog-button.vex-dialog-button-primary.vex-dialog-button-primary {\n  background-color: #487797; }\n\ninput[type=\"text\"] {\n  outline-color: #f5e893;\n  appearance: none;\n  -webkit-appearance: none;\n  padding: 1rem;\n  border: 2px solid #7ea193;\n  border-radius: 3px;\n  font-size: 1.8rem;\n  margin: 0.8rem 0;\n  display: block; }\n\n#rsvpName {\n  display: inline-block; }\n\n#rsvpRadios {\n  display: inline-block;\n  padding-left: 2rem;\n  text-align: right; }\n  #rsvpRadios label {\n    display: block; }\n\n#rsvpList {\n  column-count: 2;\n  font-weight: bold; }\n  #rsvpList li {\n    list-style-position: outside;\n    list-style-type: circle; }\n\n#faq {\n  padding: 6rem; }\n\ndl dt {\n  line-height: 2;\n  font-weight: bold;\n  padding-top: 2rem;\n  font-size: 2.4rem; }\n", ""]);



/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/map.scss":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/map.scss ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "#mapWrapper {\n  overflow: hidden;\n  padding: 8rem;\n  background-image: linear-gradient(white, #bfd2ec 50%); }\n\n#map {\n  width: 100%;\n  height: 600px;\n  overflow: hidden;\n  box-sizing: border-box; }\n", ""]);



/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/reset.css":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/reset.css ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline; }\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block; }\n\nbody {\n  line-height: 1; }\n\nol, ul {\n  list-style: none; }\n\nblockquote, q {\n  quotes: none; }\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n", ""]);



/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/vex.custom.css":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/vex.custom.css ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".vex.vex-theme-flat-attack .vex-content {\n  -webkit-animation: vex-fadein .5s;\n  animation: vex-fadein .5s; }\n\n.vex-overlay.vex-closing {\n  -webkit-animation: vex-fadeout .5s forwards;\n  animation: vex-fadeout .5s forwards; }\n\n.vex.vex-theme-flat-attack.vex-closing .vex-content {\n  -webkit-animation: vex-fadeout .5s forwards;\n  animation: vex-fadeout .5s forwards; }\n", ""]);



/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return '@media ' + item[2] + '{' + content + '}';
      } else {
        return content;
      }
    }).join('');
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/url-escape.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/url-escape.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function escape(url, needQuotes) {
  if (typeof url !== 'string') {
    return url;
  } // If url is already wrapped in quotes, remove them


  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]/.test(url) || needQuotes) {
    return '"' + url.replace(/"/g, '\\"').replace(/\n/g, '\\n') + '"';
  }

  return url;
};

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/vex-dialog/dist/vex.dialog.js":
/*!****************************************************!*\
  !*** ./node_modules/vex-dialog/dist/vex.dialog.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var require;var require;(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

function deepcopy(value) {
  if (!(!!value && typeof value == 'object')) {
    return value;
  }
  if (Object.prototype.toString.call(value) == '[object Date]') {
    return new Date(value.getTime());
  }
  if (Array.isArray(value)) {
    return value.map(deepcopy);
  }
  var result = {};
  Object.keys(value).forEach(
    function(key) { result[key] = deepcopy(value[key]); });
  return result;
}

module.exports = deepcopy;

},{}],2:[function(require,module,exports){

/**
 * Expose `parse`.
 */

module.exports = parse;

/**
 * Tests for browser support.
 */

var innerHTMLBug = false;
var bugTestDiv;
if (typeof document !== 'undefined') {
  bugTestDiv = document.createElement('div');
  // Setup
  bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
  // Make sure that link elements get serialized correctly by innerHTML
  // This requires a wrapper element in IE
  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
  bugTestDiv = undefined;
}

/**
 * Wrap map from jquery.
 */

var map = {
  legend: [1, '<fieldset>', '</fieldset>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  // for script/link/style tags to work in IE6-8, you have to wrap
  // in a div with a non-whitespace character in front, ha!
  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
};

map.td =
map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

map.option =
map.optgroup = [1, '<select multiple="multiple">', '</select>'];

map.thead =
map.tbody =
map.colgroup =
map.caption =
map.tfoot = [1, '<table>', '</table>'];

map.polyline =
map.ellipse =
map.polygon =
map.circle =
map.text =
map.line =
map.path =
map.rect =
map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

/**
 * Parse `html` and return a DOM Node instance, which could be a TextNode,
 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
 * instance, depending on the contents of the `html` string.
 *
 * @param {String} html - HTML string to "domify"
 * @param {Document} doc - The `document` instance to create the Node for
 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
 * @api private
 */

function parse(html, doc) {
  if ('string' != typeof html) throw new TypeError('String expected');

  // default to the global `document` object
  if (!doc) doc = document;

  // tag name
  var m = /<([\w:]+)/.exec(html);
  if (!m) return doc.createTextNode(html);

  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

  var tag = m[1];

  // body support
  if (tag == 'body') {
    var el = doc.createElement('html');
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }

  // wrap map
  var wrap = map[tag] || map._default;
  var depth = wrap[0];
  var prefix = wrap[1];
  var suffix = wrap[2];
  var el = doc.createElement('div');
  el.innerHTML = prefix + html + suffix;
  while (depth--) el = el.lastChild;

  // one element
  if (el.firstChild == el.lastChild) {
    return el.removeChild(el.firstChild);
  }

  // several elements
  var fragment = doc.createDocumentFragment();
  while (el.firstChild) {
    fragment.appendChild(el.removeChild(el.firstChild));
  }

  return fragment;
}

},{}],3:[function(require,module,exports){
// get successful control from form and assemble into object
// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2

// types which indicate a submit action and are not successful controls
// these will be ignored
var k_r_submitter = /^(?:submit|button|image|reset|file)$/i;

// node names which could be successful controls
var k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;

// Matches bracket notation.
var brackets = /(\[[^\[\]]*\])/g;

// serializes form fields
// @param form MUST be an HTMLForm element
// @param options is an optional argument to configure the serialization. Default output
// with no options specified is a url encoded string
//    - hash: [true | false] Configure the output type. If true, the output will
//    be a js object.
//    - serializer: [function] Optional serializer function to override the default one.
//    The function takes 3 arguments (result, key, value) and should return new result
//    hash and url encoded str serializers are provided with this module
//    - disabled: [true | false]. If true serialize disabled fields.
//    - empty: [true | false]. If true serialize empty fields
function serialize(form, options) {
    if (typeof options != 'object') {
        options = { hash: !!options };
    }
    else if (options.hash === undefined) {
        options.hash = true;
    }

    var result = (options.hash) ? {} : '';
    var serializer = options.serializer || ((options.hash) ? hash_serializer : str_serialize);

    var elements = form && form.elements ? form.elements : [];

    //Object store each radio and set if it's empty or not
    var radio_store = Object.create(null);

    for (var i=0 ; i<elements.length ; ++i) {
        var element = elements[i];

        // ingore disabled fields
        if ((!options.disabled && element.disabled) || !element.name) {
            continue;
        }
        // ignore anyhting that is not considered a success field
        if (!k_r_success_contrls.test(element.nodeName) ||
            k_r_submitter.test(element.type)) {
            continue;
        }

        var key = element.name;
        var val = element.value;

        // we can't just use element.value for checkboxes cause some browsers lie to us
        // they say "on" for value when the box isn't checked
        if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {
            val = undefined;
        }

        // If we want empty elements
        if (options.empty) {
            // for checkbox
            if (element.type === 'checkbox' && !element.checked) {
                val = '';
            }

            // for radio
            if (element.type === 'radio') {
                if (!radio_store[element.name] && !element.checked) {
                    radio_store[element.name] = false;
                }
                else if (element.checked) {
                    radio_store[element.name] = true;
                }
            }

            // if options empty is true, continue only if its radio
            if (!val && element.type == 'radio') {
                continue;
            }
        }
        else {
            // value-less fields are ignored unless options.empty is true
            if (!val) {
                continue;
            }
        }

        // multi select boxes
        if (element.type === 'select-multiple') {
            val = [];

            var selectOptions = element.options;
            var isSelectedOptions = false;
            for (var j=0 ; j<selectOptions.length ; ++j) {
                var option = selectOptions[j];
                var allowedEmpty = options.empty && !option.value;
                var hasValue = (option.value || allowedEmpty);
                if (option.selected && hasValue) {
                    isSelectedOptions = true;

                    // If using a hash serializer be sure to add the
                    // correct notation for an array in the multi-select
                    // context. Here the name attribute on the select element
                    // might be missing the trailing bracket pair. Both names
                    // "foo" and "foo[]" should be arrays.
                    if (options.hash && key.slice(key.length - 2) !== '[]') {
                        result = serializer(result, key + '[]', option.value);
                    }
                    else {
                        result = serializer(result, key, option.value);
                    }
                }
            }

            // Serialize if no selected options and options.empty is true
            if (!isSelectedOptions && options.empty) {
                result = serializer(result, key, '');
            }

            continue;
        }

        result = serializer(result, key, val);
    }

    // Check for all empty radio buttons and serialize them with key=""
    if (options.empty) {
        for (var key in radio_store) {
            if (!radio_store[key]) {
                result = serializer(result, key, '');
            }
        }
    }

    return result;
}

function parse_keys(string) {
    var keys = [];
    var prefix = /^([^\[\]]*)/;
    var children = new RegExp(brackets);
    var match = prefix.exec(string);

    if (match[1]) {
        keys.push(match[1]);
    }

    while ((match = children.exec(string)) !== null) {
        keys.push(match[1]);
    }

    return keys;
}

function hash_assign(result, keys, value) {
    if (keys.length === 0) {
        result = value;
        return result;
    }

    var key = keys.shift();
    var between = key.match(/^\[(.+?)\]$/);

    if (key === '[]') {
        result = result || [];

        if (Array.isArray(result)) {
            result.push(hash_assign(null, keys, value));
        }
        else {
            // This might be the result of bad name attributes like "[][foo]",
            // in this case the original `result` object will already be
            // assigned to an object literal. Rather than coerce the object to
            // an array, or cause an exception the attribute "_values" is
            // assigned as an array.
            result._values = result._values || [];
            result._values.push(hash_assign(null, keys, value));
        }

        return result;
    }

    // Key is an attribute name and can be assigned directly.
    if (!between) {
        result[key] = hash_assign(result[key], keys, value);
    }
    else {
        var string = between[1];
        // +var converts the variable into a number
        // better than parseInt because it doesn't truncate away trailing
        // letters and actually fails if whole thing is not a number
        var index = +string;

        // If the characters between the brackets is not a number it is an
        // attribute name and can be assigned directly.
        if (isNaN(index)) {
            result = result || {};
            result[string] = hash_assign(result[string], keys, value);
        }
        else {
            result = result || [];
            result[index] = hash_assign(result[index], keys, value);
        }
    }

    return result;
}

// Object/hash encoding serializer.
function hash_serializer(result, key, value) {
    var matches = key.match(brackets);

    // Has brackets? Use the recursive assignment function to walk the keys,
    // construct any missing objects in the result tree and make the assignment
    // at the end of the chain.
    if (matches) {
        var keys = parse_keys(key);
        hash_assign(result, keys, value);
    }
    else {
        // Non bracket notation can make assignments directly.
        var existing = result[key];

        // If the value has been assigned already (for instance when a radio and
        // a checkbox have the same name attribute) convert the previous value
        // into an array before pushing into it.
        //
        // NOTE: If this requirement were removed all hash creation and
        // assignment could go through `hash_assign`.
        if (existing) {
            if (!Array.isArray(existing)) {
                result[key] = [ existing ];
            }

            result[key].push(value);
        }
        else {
            result[key] = value;
        }
    }

    return result;
}

// urlform encoding serializer
function str_serialize(result, key, value) {
    // encode newlines as \r\n cause the html spec says so
    value = value.replace(/(\r)?\n/g, '\r\n');
    value = encodeURIComponent(value);

    // spaces should be '+' rather than '%20'.
    value = value.replace(/%20/g, '+');
    return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;
}

module.exports = serialize;

},{}],4:[function(require,module,exports){
var domify = require('domify')
var serialize = require('form-serialize')
var cloneDeep = require('deep-clone-simple')

// Build DOM elements for the structure of the dialog
var buildDialogForm = function buildDialogForm (options) {
  var form = document.createElement('form')
  form.classList.add('vex-dialog-form')

  var message = document.createElement('div')
  message.classList.add('vex-dialog-message')
  message.appendChild(options.message instanceof window.Node ? options.message : domify(options.message))

  var input = document.createElement('div')
  input.classList.add('vex-dialog-input')
  input.appendChild(options.input instanceof window.Node ? options.input : domify(options.input))

  form.appendChild(message)
  form.appendChild(input)

  return form
}

// Take an array of buttons (see the default buttons below) and turn them into DOM elements
var buttonsToDOM = function buttonsToDOM (buttons) {
  var domButtons = document.createElement('div')
  domButtons.classList.add('vex-dialog-buttons')

  for (var i = 0; i < buttons.length; i++) {
    var button = buttons[i]
    var domButton = document.createElement('button')
    domButton.type = button.type
    domButton.textContent = button.text
    domButton.className = button.className
    domButton.classList.add('vex-dialog-button')
    if (i === 0) {
      domButton.classList.add('vex-first')
    } else if (i === buttons.length - 1) {
      domButton.classList.add('vex-last')
    }
    // Attach click listener to button with closure
    (function (button) {
      domButton.addEventListener('click', function (e) {
        if (button.click) {
          button.click.call(this, e)
        }
      }.bind(this))
    }.bind(this)(button))

    domButtons.appendChild(domButton)
  }

  return domButtons
}

var plugin = function plugin (vex) {
  // Define the API first
  var dialog = {
    // Plugin name
    name: 'dialog',

    // Open
    open: function open (opts) {
      var options = Object.assign({}, cloneDeep(this.defaultOptions), opts)

      // `message` is unsafe internally, so translate
      // safe default: HTML-escape the message before passing it through
      if (options.unsafeMessage && !options.message) {
        options.message = options.unsafeMessage
      } else if (options.message) {
        options.message = vex._escapeHtml(options.message)
      }

      // Build the form from the options
      var form = options.unsafeContent = buildDialogForm(options)

      // Open the dialog
      var dialogInstance = vex.open(options)

      if (options.yesText !== '') {
        options.buttons[0].text = options.yesText
      }

      if (options.noText !== '') {
        options.buttons[1].text = options.noText
      }

      // Quick comment - these options and appending buttons and everything
      // would preferably be done _before_ opening the dialog. However, since
      // they rely on the context of the vex instance, we have to do them
      // after. A potential future fix would be to differentiate between
      // a "created" vex instance and an "opened" vex instance, so any actions
      // that rely on the specific context of the instance can do their stuff
      // before opening the dialog on the page.

      // Override the before close callback to also pass the value of the form
      var beforeClose = options.beforeClose && options.beforeClose.bind(dialogInstance)
      dialogInstance.options.beforeClose = function dialogBeforeClose () {
        // Only call the callback once - when the validation in beforeClose, if present, is true
        var shouldClose = beforeClose ? beforeClose() : true
        if (shouldClose) {
          options.callback(this.value || false)
        }
        // Return the result of beforeClose() to vex
        return shouldClose
      }.bind(dialogInstance)

      // Append buttons to form with correct context
      form.appendChild(buttonsToDOM.call(dialogInstance, options.buttons))

      // Attach form to instance
      dialogInstance.form = form

      // Add submit listener to form
      form.addEventListener('submit', options.onSubmit.bind(dialogInstance))

      // Optionally focus the first input in the form
      if (options.focusFirstInput) {
        var el = dialogInstance.contentEl.querySelector('button, input, select, textarea')
        if (el) {
          el.focus()
        }
      }

      // For chaining
      return dialogInstance
    },

    // Alert
    alert: function (options) {
      // Allow string as message
      if (typeof options === 'string') {
        options = {
          message: options
        }
      }
      options = Object.assign({}, cloneDeep(this.defaultOptions), cloneDeep(this.defaultAlertOptions), options)
      return this.open(options)
    },

    // Confirm
    confirm: function (options) {
      if (typeof options !== 'object' || typeof options.callback !== 'function') {
        throw new Error('dialog.confirm(options) requires options.callback.')
      }
      options = Object.assign({}, cloneDeep(this.defaultOptions), cloneDeep(this.defaultConfirmOptions), options)
      return this.open(options)
    },

    // Prompt
    prompt: function (options) {
      if (typeof options !== 'object' || typeof options.callback !== 'function') {
        throw new Error('dialog.prompt(options) requires options.callback.')
      }
      var defaults = Object.assign({}, cloneDeep(this.defaultOptions), cloneDeep(this.defaultPromptOptions))
      var dynamicDefaults = {
        unsafeMessage: '<label for="vex">' + vex._escapeHtml(options.label || defaults.label) + '</label>',
        input: '<input name="vex" type="text" class="vex-dialog-prompt-input" placeholder="' + vex._escapeHtml(options.placeholder || defaults.placeholder) + '" value="' + vex._escapeHtml(options.value || defaults.value) + '" />'
      }
      options = Object.assign(defaults, dynamicDefaults, options)
      // Pluck the value of the "vex" input field as the return value for prompt's callback
      // More closely mimics "window.prompt" in that a single string is returned
      var callback = options.callback
      options.callback = function promptCallback (value) {
        if (typeof value === 'object') {
          var keys = Object.keys(value)
          value = keys.length ? value[keys[0]] : ''
        }
        callback(value)
      }
      return this.open(options)
    }
  }

  // Now define any additional data that's not the direct dialog API
  dialog.buttons = {
    YES: {
      text: 'OK',
      type: 'submit',
      className: 'vex-dialog-button-primary',
      click: function yesClick () {
        this.value = true
      }
    },

    NO: {
      text: 'Cancel',
      type: 'button',
      className: 'vex-dialog-button-secondary',
      click: function noClick () {
        this.value = false
        this.close()
      }
    }
  }

  dialog.defaultOptions = {
    callback: function () {},
    afterOpen: function () {},
    message: '',
    input: '',
    yesText: '',
    noText: '',
    buttons: [
      dialog.buttons.YES,
      dialog.buttons.NO
    ],
    showCloseButton: false,
    onSubmit: function onDialogSubmit (e) {
      e.preventDefault()
      if (this.options.input) {
        this.value = serialize(this.form, { hash: true })
      }
      return this.close()
    },
    focusFirstInput: true
  }

  dialog.defaultAlertOptions = {
    buttons: [
      dialog.buttons.YES
    ]
  }

  dialog.defaultPromptOptions = {
    label: 'Prompt:',
    placeholder: '',
    value: ''
  }

  dialog.defaultConfirmOptions = {}

  return dialog
}

module.exports = plugin

},{"deep-clone-simple":1,"domify":2,"form-serialize":3}]},{},[4])(4)
});

/***/ }),

/***/ "./node_modules/vex-js/dist/css/vex-theme-flat-attack.css":
/*!****************************************************************!*\
  !*** ./node_modules/vex-js/dist/css/vex-theme-flat-attack.css ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../css-loader/dist/cjs.js!../../../sass-loader/lib/loader.js!./vex-theme-flat-attack.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./node_modules/vex-js/dist/css/vex-theme-flat-attack.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/vex-js/dist/css/vex.css":
/*!**********************************************!*\
  !*** ./node_modules/vex-js/dist/css/vex.css ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../css-loader/dist/cjs.js!../../../sass-loader/lib/loader.js!./vex.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./node_modules/vex-js/dist/css/vex.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/vex-js/dist/js/vex.js":
/*!********************************************!*\
  !*** ./node_modules/vex-js/dist/js/vex.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var require;var require;(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
/*
 * classList.js: Cross-browser full element.classList implementation.
 * 1.1.20170427
 *
 * By Eli Grey, http://eligrey.com
 * License: Dedicated to the public domain.
 *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */

if ("document" in window.self) {

// Full polyfill for browsers with no classList support
// Including IE < Edge missing SVGElement.classList
if (!("classList" in document.createElement("_")) 
	|| document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg","g"))) {

(function (view) {

"use strict";

if (!('Element' in view)) return;

var
	  classListProp = "classList"
	, protoProp = "prototype"
	, elemCtrProto = view.Element[protoProp]
	, objCtr = Object
	, strTrim = String[protoProp].trim || function () {
		return this.replace(/^\s+|\s+$/g, "");
	}
	, arrIndexOf = Array[protoProp].indexOf || function (item) {
		var
			  i = 0
			, len = this.length
		;
		for (; i < len; i++) {
			if (i in this && this[i] === item) {
				return i;
			}
		}
		return -1;
	}
	// Vendors: please allow content code to instantiate DOMExceptions
	, DOMEx = function (type, message) {
		this.name = type;
		this.code = DOMException[type];
		this.message = message;
	}
	, checkTokenAndGetIndex = function (classList, token) {
		if (token === "") {
			throw new DOMEx(
				  "SYNTAX_ERR"
				, "An invalid or illegal string was specified"
			);
		}
		if (/\s/.test(token)) {
			throw new DOMEx(
				  "INVALID_CHARACTER_ERR"
				, "String contains an invalid character"
			);
		}
		return arrIndexOf.call(classList, token);
	}
	, ClassList = function (elem) {
		var
			  trimmedClasses = strTrim.call(elem.getAttribute("class") || "")
			, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
			, i = 0
			, len = classes.length
		;
		for (; i < len; i++) {
			this.push(classes[i]);
		}
		this._updateClassName = function () {
			elem.setAttribute("class", this.toString());
		};
	}
	, classListProto = ClassList[protoProp] = []
	, classListGetter = function () {
		return new ClassList(this);
	}
;
// Most DOMException implementations don't allow calling DOMException's toString()
// on non-DOMExceptions. Error's toString() is sufficient here.
DOMEx[protoProp] = Error[protoProp];
classListProto.item = function (i) {
	return this[i] || null;
};
classListProto.contains = function (token) {
	token += "";
	return checkTokenAndGetIndex(this, token) !== -1;
};
classListProto.add = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
	;
	do {
		token = tokens[i] + "";
		if (checkTokenAndGetIndex(this, token) === -1) {
			this.push(token);
			updated = true;
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.remove = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
		, index
	;
	do {
		token = tokens[i] + "";
		index = checkTokenAndGetIndex(this, token);
		while (index !== -1) {
			this.splice(index, 1);
			updated = true;
			index = checkTokenAndGetIndex(this, token);
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.toggle = function (token, force) {
	token += "";

	var
		  result = this.contains(token)
		, method = result ?
			force !== true && "remove"
		:
			force !== false && "add"
	;

	if (method) {
		this[method](token);
	}

	if (force === true || force === false) {
		return force;
	} else {
		return !result;
	}
};
classListProto.toString = function () {
	return this.join(" ");
};

if (objCtr.defineProperty) {
	var classListPropDesc = {
		  get: classListGetter
		, enumerable: true
		, configurable: true
	};
	try {
		objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	} catch (ex) { // IE 8 doesn't support enumerable:true
		// adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
		// modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
		if (ex.number === undefined || ex.number === -0x7FF5EC54) {
			classListPropDesc.enumerable = false;
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
		}
	}
} else if (objCtr[protoProp].__defineGetter__) {
	elemCtrProto.__defineGetter__(classListProp, classListGetter);
}

}(window.self));

}

// There is full or partial native classList support, so just check if we need
// to normalize the add/remove and toggle APIs.

(function () {
	"use strict";

	var testElement = document.createElement("_");

	testElement.classList.add("c1", "c2");

	// Polyfill for IE 10/11 and Firefox <26, where classList.add and
	// classList.remove exist but support only one argument at a time.
	if (!testElement.classList.contains("c2")) {
		var createMethod = function(method) {
			var original = DOMTokenList.prototype[method];

			DOMTokenList.prototype[method] = function(token) {
				var i, len = arguments.length;

				for (i = 0; i < len; i++) {
					token = arguments[i];
					original.call(this, token);
				}
			};
		};
		createMethod('add');
		createMethod('remove');
	}

	testElement.classList.toggle("c3", false);

	// Polyfill for IE 10 and Firefox <24, where classList.toggle does not
	// support the second argument.
	if (testElement.classList.contains("c3")) {
		var _toggle = DOMTokenList.prototype.toggle;

		DOMTokenList.prototype.toggle = function(token, force) {
			if (1 in arguments && !this.contains(token) === !force) {
				return force;
			} else {
				return _toggle.call(this, token);
			}
		};

	}

	testElement = null;
}());

}

},{}],2:[function(require,module,exports){

/**
 * Expose `parse`.
 */

module.exports = parse;

/**
 * Tests for browser support.
 */

var innerHTMLBug = false;
var bugTestDiv;
if (typeof document !== 'undefined') {
  bugTestDiv = document.createElement('div');
  // Setup
  bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
  // Make sure that link elements get serialized correctly by innerHTML
  // This requires a wrapper element in IE
  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
  bugTestDiv = undefined;
}

/**
 * Wrap map from jquery.
 */

var map = {
  legend: [1, '<fieldset>', '</fieldset>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  // for script/link/style tags to work in IE6-8, you have to wrap
  // in a div with a non-whitespace character in front, ha!
  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
};

map.td =
map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

map.option =
map.optgroup = [1, '<select multiple="multiple">', '</select>'];

map.thead =
map.tbody =
map.colgroup =
map.caption =
map.tfoot = [1, '<table>', '</table>'];

map.polyline =
map.ellipse =
map.polygon =
map.circle =
map.text =
map.line =
map.path =
map.rect =
map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

/**
 * Parse `html` and return a DOM Node instance, which could be a TextNode,
 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
 * instance, depending on the contents of the `html` string.
 *
 * @param {String} html - HTML string to "domify"
 * @param {Document} doc - The `document` instance to create the Node for
 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
 * @api private
 */

function parse(html, doc) {
  if ('string' != typeof html) throw new TypeError('String expected');

  // default to the global `document` object
  if (!doc) doc = document;

  // tag name
  var m = /<([\w:]+)/.exec(html);
  if (!m) return doc.createTextNode(html);

  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

  var tag = m[1];

  // body support
  if (tag == 'body') {
    var el = doc.createElement('html');
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }

  // wrap map
  var wrap = map[tag] || map._default;
  var depth = wrap[0];
  var prefix = wrap[1];
  var suffix = wrap[2];
  var el = doc.createElement('div');
  el.innerHTML = prefix + html + suffix;
  while (depth--) el = el.lastChild;

  // one element
  if (el.firstChild == el.lastChild) {
    return el.removeChild(el.firstChild);
  }

  // several elements
  var fragment = doc.createDocumentFragment();
  while (el.firstChild) {
    fragment.appendChild(el.removeChild(el.firstChild));
  }

  return fragment;
}

},{}],3:[function(require,module,exports){
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */

'use strict';

function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};

},{}],4:[function(require,module,exports){
// classList polyfill for old browsers
require('classlist-polyfill')
// Object.assign polyfill
require('es6-object-assign').polyfill()

// String to DOM function
var domify = require('domify')

// Use the DOM's HTML parsing to escape any dangerous strings
var escapeHtml = function escapeHtml (str) {
  if (typeof str !== 'undefined') {
    var div = document.createElement('div')
    div.appendChild(document.createTextNode(str))
    return div.innerHTML
  } else {
    return ''
  }
}

// Utility function to add space-delimited class strings to a DOM element's classList
var addClasses = function addClasses (el, classStr) {
  if (typeof classStr !== 'string' || classStr.length === 0) {
    return
  }
  var classes = classStr.split(' ')
  for (var i = 0; i < classes.length; i++) {
    var className = classes[i]
    if (className.length) {
      el.classList.add(className)
    }
  }
}

// Detect CSS Animation End Support
// https://github.com/limonte/sweetalert2/blob/99bd539f85e15ac170f69d35001d12e092ef0054/src/utils/dom.js#L194
var animationEndEvent = (function detectAnimationEndEvent () {
  var el = document.createElement('div')
  var eventNames = {
    'animation': 'animationend',
    'WebkitAnimation': 'webkitAnimationEnd',
    'MozAnimation': 'animationend',
    'OAnimation': 'oanimationend',
    'msAnimation': 'MSAnimationEnd'
  }
  for (var i in eventNames) {
    if (el.style[i] !== undefined) {
      return eventNames[i]
    }
  }
  return false
})()

// vex base CSS classes
var baseClassNames = {
  vex: 'vex',
  content: 'vex-content',
  overlay: 'vex-overlay',
  close: 'vex-close',
  closing: 'vex-closing',
  open: 'vex-open'
}

// Private lookup table of all open vex objects, keyed by id
var vexes = {}
var globalId = 1

// Private boolean to assist the escapeButtonCloses option
var isEscapeActive = false

// vex itself is an object that exposes a simple API to open and close vex objects in various ways
var vex = {
  open: function open (opts) {
    // Check for usage of deprecated options, and log a warning
    var warnDeprecated = function warnDeprecated (prop) {
      console.warn('The "' + prop + '" property is deprecated in vex 3. Use CSS classes and the appropriate "ClassName" options, instead.')
      console.warn('See http://github.hubspot.com/vex/api/advanced/#options')
    }
    if (opts.css) {
      warnDeprecated('css')
    }
    if (opts.overlayCSS) {
      warnDeprecated('overlayCSS')
    }
    if (opts.contentCSS) {
      warnDeprecated('contentCSS')
    }
    if (opts.closeCSS) {
      warnDeprecated('closeCSS')
    }

    // The dialog instance
    var vexInstance = {}

    // Set id
    vexInstance.id = globalId++

    // Store internally
    vexes[vexInstance.id] = vexInstance

    // Set state
    vexInstance.isOpen = true

    // Close function on the vex instance
    // This is how all API functions should close individual vexes
    vexInstance.close = function instanceClose () {
      // Check state
      if (!this.isOpen) {
        return true
      }

      var options = this.options

      // escapeButtonCloses is checked first
      if (isEscapeActive && !options.escapeButtonCloses) {
        return false
      }

      // Allow the user to validate any info or abort the close with the beforeClose callback
      var shouldClose = (function shouldClose () {
        // Call before close callback
        if (options.beforeClose) {
          return options.beforeClose.call(this)
        }
        // Otherwise indicate that it's ok to continue with close
        return true
      }.bind(this)())

      // If beforeClose() fails, abort the close
      if (shouldClose === false) {
        return false
      }

      // Update state
      this.isOpen = false

      // Detect if the content el has any CSS animations defined
      var style = window.getComputedStyle(this.contentEl)
      function hasAnimationPre (prefix) {
        return style.getPropertyValue(prefix + 'animation-name') !== 'none' && style.getPropertyValue(prefix + 'animation-duration') !== '0s'
      }
      var hasAnimation = hasAnimationPre('') || hasAnimationPre('-webkit-') || hasAnimationPre('-moz-') || hasAnimationPre('-o-')

      // Define the function that will actually close the instance
      var close = function close () {
        if (!this.rootEl.parentNode) {
          return
        }
        // Run once
        this.rootEl.removeEventListener(animationEndEvent, close)
        this.overlayEl.removeEventListener(animationEndEvent, close)
        // Remove from lookup table (prevent memory leaks)
        delete vexes[this.id]
        // Remove the dialog from the DOM
        this.rootEl.parentNode.removeChild(this.rootEl)
        // Remove the overlay from the DOM
        this.bodyEl.removeChild(this.overlayEl)
        // Call after close callback
        if (options.afterClose) {
          options.afterClose.call(this)
        }
        // Remove styling from the body, if no more vexes are open
        if (Object.keys(vexes).length === 0) {
          document.body.classList.remove(baseClassNames.open)
        }
      }.bind(this)

      // Close the vex
      if (animationEndEvent && hasAnimation) {
        // Setup the end event listener, to remove the el from the DOM
        this.rootEl.addEventListener(animationEndEvent, close)
        this.overlayEl.addEventListener(animationEndEvent, close)
        // Add the closing class to the dialog, showing the close animation
        this.rootEl.classList.add(baseClassNames.closing)
        this.overlayEl.classList.add(baseClassNames.closing)
      } else {
        close()
      }

      return true
    }

    // Allow strings as content
    if (typeof opts === 'string') {
      opts = {
        content: opts
      }
    }

    // `content` is unsafe internally, so translate
    // safe default: HTML-escape the content before passing it through
    if (opts.unsafeContent && !opts.content) {
      opts.content = opts.unsafeContent
    } else if (opts.content) {
      opts.content = escapeHtml(opts.content)
    }

    // Store options on instance for future reference
    var options = vexInstance.options = Object.assign({}, vex.defaultOptions, opts)

    // Get Body Element
    var bodyEl = vexInstance.bodyEl = document.getElementsByTagName('body')[0]

    // vex root
    var rootEl = vexInstance.rootEl = document.createElement('div')
    rootEl.classList.add(baseClassNames.vex)
    addClasses(rootEl, options.className)

    // Overlay
    var overlayEl = vexInstance.overlayEl = document.createElement('div')
    overlayEl.classList.add(baseClassNames.overlay)
    addClasses(overlayEl, options.overlayClassName)
    if (options.overlayClosesOnClick) {
      rootEl.addEventListener('click', function overlayClickListener (e) {
        if (e.target === rootEl) {
          vexInstance.close()
        }
      })
    }
    bodyEl.appendChild(overlayEl)

    // Content
    var contentEl = vexInstance.contentEl = document.createElement('div')
    contentEl.classList.add(baseClassNames.content)
    addClasses(contentEl, options.contentClassName)
    contentEl.appendChild(options.content instanceof window.Node ? options.content : domify(options.content))
    rootEl.appendChild(contentEl)

    // Close button
    if (options.showCloseButton) {
      var closeEl = vexInstance.closeEl = document.createElement('div')
      closeEl.classList.add(baseClassNames.close)
      addClasses(closeEl, options.closeClassName)
      closeEl.addEventListener('click', vexInstance.close.bind(vexInstance))
      contentEl.appendChild(closeEl)
    }

    // Add to DOM
    document.querySelector(options.appendLocation).appendChild(rootEl)

    // Call after open callback
    if (options.afterOpen) {
      options.afterOpen.call(vexInstance)
    }

    // Apply styling to the body
    document.body.classList.add(baseClassNames.open)

    // Return the created vex instance
    return vexInstance
  },

  // A top-level vex.close function to close dialogs by reference or id
  close: function close (vexOrId) {
    var id
    if (vexOrId.id) {
      id = vexOrId.id
    } else if (typeof vexOrId === 'string') {
      id = vexOrId
    } else {
      throw new TypeError('close requires a vex object or id string')
    }
    if (!vexes[id]) {
      return false
    }
    return vexes[id].close()
  },

  // Close the most recently created/opened vex
  closeTop: function closeTop () {
    var ids = Object.keys(vexes)
    if (!ids.length) {
      return false
    }
    return vexes[ids[ids.length - 1]].close()
  },

  // Close every vex!
  closeAll: function closeAll () {
    for (var id in vexes) {
      this.close(id)
    }
    return true
  },

  // A getter for the internal lookup table
  getAll: function getAll () {
    return vexes
  },

  // A getter for the internal lookup table
  getById: function getById (id) {
    return vexes[id]
  }
}

// Close top vex on escape
window.addEventListener('keyup', function vexKeyupListener (e) {
  if (e.keyCode === 27) {
    isEscapeActive = true
    vex.closeTop()
    isEscapeActive = false
  }
})

// Close all vexes on history pop state (useful in single page apps)
window.addEventListener('popstate', function () {
  if (vex.defaultOptions.closeAllOnPopState) {
    vex.closeAll()
  }
})

vex.defaultOptions = {
  content: '',
  showCloseButton: true,
  escapeButtonCloses: true,
  overlayClosesOnClick: true,
  appendLocation: 'body',
  className: '',
  overlayClassName: '',
  contentClassName: '',
  closeClassName: '',
  closeAllOnPopState: true
}

// TODO Loading symbols?

// Include escapeHtml function on the library object
Object.defineProperty(vex, '_escapeHtml', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: escapeHtml
})

// Plugin system!
vex.registerPlugin = function registerPlugin (pluginFn, name) {
  var plugin = pluginFn(vex)
  var pluginName = name || plugin.name
  if (vex[pluginName]) {
    throw new Error('Plugin ' + name + ' is already registered.')
  }
  vex[pluginName] = plugin
}

module.exports = vex

},{"classlist-polyfill":1,"domify":2,"es6-object-assign":3}]},{},[4])(4)
});

/***/ }),

/***/ "./src/fonts/AlegreyaSans-Light.ttf":
/*!******************************************!*\
  !*** ./src/fonts/AlegreyaSans-Light.ttf ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "5f02bc72fc36877c088d1d3def695075.ttf";

/***/ }),

/***/ "./src/fonts/AlegreyaSans-LightItalic.ttf":
/*!************************************************!*\
  !*** ./src/fonts/AlegreyaSans-LightItalic.ttf ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "data:font/ttf;base64,"

/***/ }),

/***/ "./src/fonts/AlegreyaSans-Regular.ttf":
/*!********************************************!*\
  !*** ./src/fonts/AlegreyaSans-Regular.ttf ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "74d889a633bb694921914ca669ad098b.ttf";

/***/ }),

/***/ "./src/fonts/King-Basil-Lite.otf":
/*!***************************************!*\
  !*** ./src/fonts/King-Basil-Lite.otf ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "data:font/otf;base64,"

/***/ }),

/***/ "./src/fonts/MinionPro-Regular.otf":
/*!*****************************************!*\
  !*** ./src/fonts/MinionPro-Regular.otf ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "38711b5bb243e894a6d58c8755bb034a.otf";

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! _jquery */ "_jquery");
/* harmony import */ var _jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _scss_reset_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scss/reset.css */ "./src/scss/reset.css");
/* harmony import */ var _scss_reset_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_scss_reset_css__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _scss_index_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scss/index.scss */ "./src/scss/index.scss");
/* harmony import */ var _scss_index_scss__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_scss_index_scss__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _scss_map_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scss/map.scss */ "./src/scss/map.scss");
/* harmony import */ var _scss_map_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_scss_map_scss__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _parts_callouts_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parts/callouts.html */ "./src/parts/callouts.html");
/* harmony import */ var _parts_callouts_html__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_parts_callouts_html__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _parts_map_html__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parts/map.html */ "./src/parts/map.html");
/* harmony import */ var _parts_map_html__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_parts_map_html__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _parts_faq_html__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parts/faq.html */ "./src/parts/faq.html");
/* harmony import */ var _parts_faq_html__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_parts_faq_html__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./map.js */ "./src/map.js");
/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_map_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _rsvp_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rsvp.js */ "./src/rsvp.js");
// libs


// styles




// template parts



_jquery__WEBPACK_IMPORTED_MODULE_0___default()(function(){
  let $app = _jquery__WEBPACK_IMPORTED_MODULE_0___default()('#app');
  _jquery__WEBPACK_IMPORTED_MODULE_0___default()('#headingLeft').append(_parts_callouts_html__WEBPACK_IMPORTED_MODULE_4___default.a);
  $app.append(_parts_map_html__WEBPACK_IMPORTED_MODULE_5___default.a);
  $app.append(_parts_faq_html__WEBPACK_IMPORTED_MODULE_6___default.a);
});

// scripts



function initPage() {
  _jquery__WEBPACK_IMPORTED_MODULE_0___default()('#headingRight img').height(_jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).height());
}

_jquery__WEBPACK_IMPORTED_MODULE_0___default()(initPage);


/***/ }),

/***/ "./src/map.js":
/*!********************!*\
  !*** ./src/map.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

var map,
    initLatLng = {lat: 48.6075491, lng: -122.8154666},
    icons = [
        {
            key: "venue",
            icon: '',
            latlng: {lat: 48.641208, lng: -122.9928207},
        },
        {
            key: "orca",
            icon: '',
            latlng: {lat: 48.5250375, lng: -122.9519777},
        },
    ];

function initMap() {

  $(function() {

    map = new google.maps.Map(document.getElementById('map'), {
      center: initLatLng,
      zoom: 11,
      mapTypeId: google.maps.MapTypeId.SATELLITE,
      zoomControl: true,
      mapTypeControl: false,
      scaleControl: false,
      streetViewControl: true,
      rotateControl: false,
      fullscreenControl: false,
    });

    for(var i = 0; i < icons.length; i++) {
      icons[i].marker = new google.maps.Marker({
        position: icons[i].latlng,
        map: map,
        title: icons[i].key
      });
    }

  });

}

window.initMap = initMap;


/***/ }),

/***/ "./src/parts/callouts.html":
/*!*********************************!*\
  !*** ./src/parts/callouts.html ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\n  <button class=\"button\" id=\"rsvpButton\">RSVP</button>\n  <button class=\"button\" id=\"giftButton\">Gift Donation</button>\n</div>\n<br><br>\n<div>\n  <a href=\"#map\">Explore</a> -\n  <a href=\"#faq\">Questions & Answers</a> -\n  <a href=\"#rsvpList\" id=\"rsvpListButton\">RSVP List</a>\n</div>\n";

/***/ }),

/***/ "./src/parts/faq.html":
/*!****************************!*\
  !*** ./src/parts/faq.html ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"faq\">\n  <dl>\n    <dt class=\"kingbasil\">When & Where 🐋</dt>\n    <dd>\n      <p>June 8, 2019</p>\n      <p>Pebble Cove Farm, 3341 Deer Harbor Rd, Eastsound, WA</p>\n      <p>Full schedule of events TBD. Put in your phone number to be notified when we’ve made updates to our website! If you’re not able to arrive the day/night before, we advise you to book a ferry that will arrive on Orcas Island the morning of June 8 so you have plenty of time to settle in beforehand.</p>\n    </dd>\n    <dt class=\"kingbasil\">Accomodations 🏨</dt>\n    <dd>\n      <p>Orcas Island has a few hotels scattered around, as well as options through AirBnB.</p>\n      <p>This link (<a href=\"https://www.guidetosanjuans.com/listings/orcas-island/featured-lodging/\">https://www.guidetosanjuans.com/listings/orcas-island/featured-lodging/</a>) has a list of hotels and inns.</p>\n      <p>If you need help finding a place to stay, please email <span class=\"bold\">taylor.rebecca.eke@gmail.com</span>.</p>\n    </dd>\n    <dt class=\"kingbasil\">Travel ⛴</dt>\n    <dd>\n      <p>The only way to reach Orcas Island is via ferry from Anacortes, WA. It holds cars too, so that way you can have your car on the island with you. Reservations for the Anacortes ferry to Orcas Island must be made in advance and are available starting January 31 for our wedding date and can be found here.</p>\n      <p class=\"bold\">Getting to the ferry:</p>\n      <p>From Seattle take I-5 north. Exit 230 onto Route 20 West. Route 20 begins as a two-lane road and travels through miles of farmland. It then turns into a four-lane road and crosses a long bridge onto Fidalgo Island. You will pass a casino and wind up and around into Anacortes. In town, Route 20 veers right onto Commercial Street. Stay on Commercial Street for four lights and then turn left at 12th street. There is a sign for the ferry with an arrow. It is well marked, but you can also look for the large Safeway grocery store on the right and the Chevron Gas Station on the left. The ferry landing is approximately 2.5 miles ahead from this intersection.</p>\n    </dd>\n    <dt class=\"kingbasil\">FAQ 🧐</dt>\n    <dt>When should I get there?</dt>\n    <dd>\n      <p>We’re still working out a full schedule of events, and you can click here to be notified when it’s up, but we’d advise you to get to the island the day before to get your bearings and to settle in. Ideally, you should plan to stay the weekend and island hop! All of the San Juan Islands are beautiful and worth exploring.</p>\n    </dd>\n    <dt>What should I wear?</dt>\n    <dd>\n      <p>Semi-formal attire is ideal, but don’t stress too much! As long as you don’t wear a white dress, you’re probably fine. 😉</p>\n      <p>A few things to keep in mind: The wedding and reception will be on the lawn, so plan your footwear accordingly! Also, the island (and the Pacific Northwest in general) can get chilly when the sun goes down so you might want to bring a light jacket.</p>\n    </dd>\n    <dt>Do you have a registry?</dt>\n    <dd>\n      <p>Instead of a registry, we’re asking for donations to help us get to our honeymoon in Fiji! To donate, <a id=\"giftLink\">click here</a>. Vinaka! (That means ‘Thank you’ in Fijian).</p>\n      <p>A few things to keep in mind: The wedding and reception will be on the lawn, so plan your footwear accordingly! Also, the island (and the Pacific Northwest in general) can get chilly when the sun goes down so you might want to bring a light jacket.</p>\n    </dd>\n    <dt>Do I need a car on the island?</dt>\n    <dd>\n      <p>To be honest, you’ll probably want one. Depending on where you’re staying, you’ll want to be able to drive to the venue and back and use it to go into town, the beach, Mount Constitution, etc as the island isn’t super walkable everywhere. Keep in mind that rental cars on the island are extremely limited, so plan to rent one before taking the ferry if need be.</p>\n    </dd>\n    <dt>How long have you guys been together?</dt>\n    <dd>\n      <p>Glad you asked! After talking for a month or so on Tinder (yes, Tinder!) we had our first official date on January 20, 2015 at the Portland waterfront, where I insisted he bring Subie along too. We’ve been going strong ever since and can’t wait to see where this next chapter takes us!</p>\n    </dd>\n    <dt>Will there be food?</dt>\n    <dd>\n      <p>Yes, you will be fed! There will be appetizers and dinner as well as drinks. Oh, and cake, because what good is a wedding without cake?!</p>\n    </dd>\n    <dt>I heard there are farm animals...is that true?</dt>\n    <dd>\n      <p>Yes! Pebble Cove Farm is a working farm with chickens, goats and two pot-bellied pigs that you might spot during our ceremony!</p>\n    </dd>\n    <dt>You guys have a wedding hashtag don’t you.</dt>\n    <dd>\n      <p>Technically not a question, but yes, we do! It’s <span class=\"bold\">#meettheekes</span>, which also tells you how to pronounce our last name! Please use <span class=\"bold\">#meettheekes</span> when you post your photos on social media so we can see them!</p>\n    </dd>\n    <dt>Contact Us</dt>\n    <dd>\n      <p>If you need help with anything, please feel free to email us at <span class=\"bold\">taylor.rebecca.eke@gmail.com</span> or you can text/ask us in person!</p>\n    </dd>\n  </dl>\n</div>\n";

/***/ }),

/***/ "./src/parts/map.html":
/*!****************************!*\
  !*** ./src/parts/map.html ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"mapWrapper\">\n  <div id=\"map\"></div>\n</div>\n";

/***/ }),

/***/ "./src/parts/rsvp-access.html":
/*!************************************!*\
  !*** ./src/parts/rsvp-access.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p>Just to verify we know you.</p>\n<p id=\"question\"></p>\n<input required id=\"answer\" name=\"answer\" type=\"text\" placeholder=\"The Answer\" require autocomplete=\"off\" oninput=\"validateAnswer(event)\" onchange=\"validateAnswer(event)\">\n";

/***/ }),

/***/ "./src/parts/rsvp-list.html":
/*!**********************************!*\
  !*** ./src/parts/rsvp-list.html ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p>We encourage all efforts to arrange lodging or carpooling with ferry reservation ahead of time 🙏. Remember if you need any help attending email us at taylor.rebecca.eke@gmail.com</p>\n<br>\n<p>Here's everyone who is going:</p>\n<br>\n<ul id=\"rsvpList\"></ul>\n";

/***/ }),

/***/ "./src/parts/rsvp-one.html":
/*!*********************************!*\
  !*** ./src/parts/rsvp-one.html ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"rsvpName\">\n  <p class=\"bold\">RSVP</p>\n  <input required id=\"fullName\" name=\"fullName\" type=\"text\" placeholder=\"Your Full Name\" onchange=\"validateFullName(event)\" oninput=\"validateFullName(event)\" autocomplete=\"off\">\n</div>\n<div id=\"rsvpRadios\">\n  <label for=\"going\">\n    <span>Going</span>\n    <input required id=\"going\" name=\"going\" type=\"radio\" value=\"1\" oninvalid=\"this.setCustomValidity('Please let us know if you are attending')\" onchange=\"resetRadioValidity()\">\n  </label>\n  <label for=\"notGoing\">\n    <span>Not Going</span>\n    <input required id=\"notGoing\" name=\"going\" type=\"radio\" value=\"0\" oninvalid=\"this.setCustomValidity('Please let us know if you are attending')\" onchange=\"resetRadioValidity()\">\n  </label>\n</div>\n";

/***/ }),

/***/ "./src/parts/rsvp-two.html":
/*!*********************************!*\
  !*** ./src/parts/rsvp-two.html ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h3>Who else are you bringing?</h3>\n<input id=\"plus1\" name=\"plus1\" type=\"text\" placeholder=\"Their Full Name\" onchange=\"validateFullName(event)\" oninput=\"validateFullName(event)\" autocomplete=\"off\">\n<button type=\"button\" id=\"addPlus1\" class=\"button add\">+</button>\n";

/***/ }),

/***/ "./src/rsvp.js":
/*!*********************!*\
  !*** ./src/rsvp.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vex-js */ "./node_modules/vex-js/dist/js/vex.js");
/* harmony import */ var vex_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vex_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var vex_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vex-dialog */ "./node_modules/vex-dialog/dist/vex.dialog.js");
/* harmony import */ var vex_dialog__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vex_dialog__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var vex_js_dist_css_vex_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vex-js/dist/css/vex.css */ "./node_modules/vex-js/dist/css/vex.css");
/* harmony import */ var vex_js_dist_css_vex_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(vex_js_dist_css_vex_css__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var vex_js_dist_css_vex_theme_flat_attack_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vex-js/dist/css/vex-theme-flat-attack.css */ "./node_modules/vex-js/dist/css/vex-theme-flat-attack.css");
/* harmony import */ var vex_js_dist_css_vex_theme_flat_attack_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(vex_js_dist_css_vex_theme_flat_attack_css__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _scss_vex_custom_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scss/vex.custom.css */ "./src/scss/vex.custom.css");
/* harmony import */ var _scss_vex_custom_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_scss_vex_custom_css__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _parts_rsvp_access_html__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parts/rsvp-access.html */ "./src/parts/rsvp-access.html");
/* harmony import */ var _parts_rsvp_access_html__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_parts_rsvp_access_html__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _parts_rsvp_one_html__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parts/rsvp-one.html */ "./src/parts/rsvp-one.html");
/* harmony import */ var _parts_rsvp_one_html__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_parts_rsvp_one_html__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _parts_rsvp_two_html__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parts/rsvp-two.html */ "./src/parts/rsvp-two.html");
/* harmony import */ var _parts_rsvp_two_html__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_parts_rsvp_two_html__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _parts_rsvp_list_html__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parts/rsvp-list.html */ "./src/parts/rsvp-list.html");
/* harmony import */ var _parts_rsvp_list_html__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_parts_rsvp_list_html__WEBPACK_IMPORTED_MODULE_8__);
// libs


vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.registerPlugin(vex_dialog__WEBPACK_IMPORTED_MODULE_1___default.a);
vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.defaultOptions.className = 'vex-theme-flat-attack';

// css




// html parts





// async loading elements
const firebaseScript = document.getElementById('firebaseScript');
const firestoreScript = document.getElementById('firestoreScript');

if(typeof window.firebase === 'undefined') {
  firestoreScript.addEventListener('load', function() {
    initFirebase();
  });
} else {
  initFirebase();
}

function initFirebase() {

  firebase.initializeApp({
    apiKey: "AIzaSyCDw_XXcQq0JNA08QCfX41lKWbf3y7W91Y",
    authDomain: "meettheekes-1544055531212.firebaseapp.com",
    databaseURL: "https://meettheekes-1544055531212.firebaseio.com",
    projectId: "meettheekes-1544055531212",
    storageBucket: "meettheekes-1544055531212.appspot.com",
    messagingSenderId: "812047322754"
  });

  $(document).on('click', '#rsvpButton', rsvpPartOne);
  $(document).on('click', '#rsvpListButton', rsvpList);
  $(document).on('click', '#addPlus1', (e) => {
    e.preventDefault();
    addPlusOne();
  });
  $(document).on('click', '#giftButton', giftClick);
  $(document).on('click', '#giftLink', giftClick);
}

const rsvp = {};
function rsvpKey(rsvp) {
  return rsvp.firstName.split(' ')[0].toLowerCase()+rsvp.lastName.toLowerCase();
}

window.answer = null;
function blockAccess(_callback) {

  vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.open({
    unsafeMessage: _parts_rsvp_access_html__WEBPACK_IMPORTED_MODULE_5___default.a,
    buttons: [
      $.extend({}, vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.buttons.YES, { className: 'vex-dialog-button-primary', text: 'Continue', click: function(e) {
        if(!$(e.target).closest('form')[0].checkValidity()) {
          return false;
        }
        this.close(this.id);
        _callback();
      }}),
      $.extend({}, vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.buttons.NO, { className: 'vex-dialog-button-secondary', text: 'Nevermind', click: function(e) {
        this.close(this.id);
      }})
    ]
  });

  const securityQuestionDoc = firebase.firestore().collection("security-question").doc('primary');
  securityQuestionDoc.get()
    .then((securityQuestionSnapshot) => {
      const securityQuestion = securityQuestionSnapshot.data();
      $('#question').text(securityQuestion.question);
      window.answer = $.trim(securityQuestion.answer.toLowerCase());
    });

}

function rsvpPartOne() {

  blockAccess(() => {
    vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.open({
      unsafeMessage: _parts_rsvp_one_html__WEBPACK_IMPORTED_MODULE_6___default.a,
      buttons: [
        $.extend({}, vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.buttons.YES, { className: 'vex-dialog-button-primary', text: 'Continue', click: function(e) {
          if(!$(e.target).closest('form')[0].checkValidity()) {
            return false;
          }
          const _this = this;
          rsvp.going = (parseInt($("input[name='going']:checked").val()) === 1);
          let name = $.trim($("input[name='fullName']").val());
          name = name.split(' ');
          rsvp.lastName = name.pop();
          rsvp.firstName = name.join(' ');
          rsvp.attendees = [{
            lastName: rsvp.lastName,
            firstName: rsvp.firstName
          }];
          const rsvpDoc = firebase.firestore().collection("rsvp").doc(rsvpKey(rsvp));
          rsvpDoc.get()
            .then((rsvpSnapshot) => {
              if(rsvpSnapshot.exists) {
                $.extend(rsvp, {modified: firebase.firestore.FieldValue.serverTimestamp()});
              } else {
                $.extend(rsvp, {created: firebase.firestore.FieldValue.serverTimestamp(), modified: firebase.firestore.FieldValue.serverTimestamp()})
              }
              rsvpDoc.set(rsvp, {merge: true})
                .then(function() {
                  if(rsvp.going) {
                    _this.close(_this.id);
                    rsvpPartTwo();
                  } else {
                    vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.alert('We are sorry you cannot make it '+rsvp.firstName+'. Thank you for your RSVP.');
                  }
                })
                .catch(function(error) {
                  console.log(error);
                  vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.alert('There was an issue with your response, please email us at taylor.rebecca.eke@gmail.com 🤞🏻');
                });
          });
        }}),
        $.extend({}, vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.buttons.NO, { className: 'vex-dialog-button-secondary', text: 'Later', click: function(e) {
          this.close(this.id);
        }})
      ]
    });
  });

}

function rsvpPartTwo() {

  vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.open({
    unsafeMessage: _parts_rsvp_two_html__WEBPACK_IMPORTED_MODULE_7___default.a,
    buttons: [
      $.extend({}, vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.buttons.YES, { className: 'vex-dialog-button-primary', text: 'Continue', click: function(e) {
        if(!$(e.target).closest('form')[0].checkValidity()) {
          return false;
        }
        const _this = this;
        $('input[id^="plus"]').each((i, item) => {
          let name = $.trim($(item).val());
          if(name.length) {
            name = name.split(' ');
            const lastName = name.pop();
            const firstName = name.join(' ');
            rsvp.attendees.push({
              lastName: lastName,
              firstName: firstName
            });
            const rsvpDoc = firebase.firestore().collection("rsvp")
              .doc(rsvpKey(rsvp))
              .update({
                attendees: rsvp.attendees
              })
              .then(function() {
                _this.close(_this.id);
                vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.alert('Thanks '+rsvp.firstName+'. Please read all the information on our website so you can get informed about attending our wedding on Orcas Island.');
              })
              .catch(function(error) {
                _this.close(_this.id);
                console.log(error);
                vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.alert('There was an issue capturing your response, please email us at taylor.rebecca.eke@gmail.com 🤞🏻');
              });
          }
        });
      }}),
      $.extend({}, vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.buttons.NO, { className: 'vex-dialog-button-secondary', text: 'It\'s Just Me', click: function(e) {
        this.close(this.id);
        vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.alert('Thanks '+rsvp.firstName+'. Please read all the information on our website so you can get informed about attending our wedding on Orcas Island.');
      }})
    ]
  });

}

function rsvpList(e) {
  e.preventDefault();

  blockAccess(() => {

    vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.open({
      unsafeMessage: _parts_rsvp_list_html__WEBPACK_IMPORTED_MODULE_8___default.a,
      buttons: [
        $.extend({}, vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.buttons.YES, { className: 'vex-dialog-button-primary', text: 'Adios', click: function(e) {
          this.close(this.id);
        }})
      ]
    });

    firebase.firestore().collection("rsvp").get().then(function(querySnapshot) {
      querySnapshot.forEach(function(rsvpDoc) {
        rsvpDoc.data().attendees.forEach((attendant) => {
          $('<li>'+attendant.firstName + ' ' + attendant.lastName+'</li>').appendTo('#rsvpList');
        });
      });
    });

    const rsvps = firebase.firestore().collection("security-question").doc('primary');
    securityQuestionDoc.get()
      .then((securityQuestionSnapshot) => {
        const securityQuestion = securityQuestionSnapshot.data();
        $('#question').text(securityQuestion.question);
        window.answer = $.trim(securityQuestion.answer.toLowerCase());
      });

  });

}

let additionals = 1;
function addPlusOne() {
  const $additional = $('#plus'+additionals);
  additionals++;
  const $another = $additional.clone();
  $another.prop({id: 'plus'+additionals, value: null, name: 'plus'+additionals});
  $another.insertAfter($additional);
}

window.validateFullName = function(e) {
  let name = $.trim($(e.target).val());
  if(!name.length && !e.target.required) {
    e.target.setCustomValidity("");
    return;
  }
  name = name.split(' ');
  if(name.length < 2) {
    e.target.setCustomValidity("We request that you enter a full name");
  } else {
    e.target.setCustomValidity("");
  }
};

window.resetRadioValidity = function() {
  $('input[name="going"]').each((i, item) => {
    item.setCustomValidity("");
  });
};

window.validateAnswer = function(e) {
  if(window.answer === null) {
    e.target.setCustomValidity("It's not the answer");
    return;
  }
  const theAnswer = $.trim($(e.target).val()).toLowerCase();
  if(theAnswer === window.answer) {
    e.target.setCustomValidity("");
  } else {
    e.target.setCustomValidity("It's not the answer");
  }
};

function giftClick() {
  vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.open({
    unsafeMessage: '<p>In lieu of physical gifts we are asking for donation to help us get to our honeymoon in Fiji! Click the link to go to our honeymoon travel pool on Paypal. Paypal is our preferred platform for contributions, because you can send us gifts without any fees if you connect your bank account.</p><br><a href="https://paypal.me/pools/c/8aXbOHLFBl" target="_blank">Give to our pool</a>',
    buttons: [
      $.extend({}, vex_js__WEBPACK_IMPORTED_MODULE_0___default.a.dialog.buttons.YES, { className: 'vex-dialog-button-primary', text: 'Ok', click: function(e) {
        this.close(this.id);
      }}),
    ]
  });
}


/***/ }),

/***/ "./src/scss/index.scss":
/*!*****************************!*\
  !*** ./src/scss/index.scss ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/lib/loader.js!./index.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/index.scss");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./src/scss/map.scss":
/*!***************************!*\
  !*** ./src/scss/map.scss ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/lib/loader.js!./map.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/map.scss");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./src/scss/reset.css":
/*!****************************!*\
  !*** ./src/scss/reset.css ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/lib/loader.js!./reset.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/reset.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./src/scss/vex.custom.css":
/*!*********************************!*\
  !*** ./src/scss/vex.custom.css ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/lib/loader.js!./vex.custom.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/scss/vex.custom.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "_jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZleC1qcy9kaXN0L2Nzcy92ZXgtdGhlbWUtZmxhdC1hdHRhY2suY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92ZXgtanMvZGlzdC9jc3MvdmV4LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9pbmRleC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL21hcC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy92ZXguY3VzdG9tLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS91cmwtZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92ZXgtZGlhbG9nL2Rpc3QvdmV4LmRpYWxvZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmV4LWpzL2Rpc3QvY3NzL3ZleC10aGVtZS1mbGF0LWF0dGFjay5jc3M/YjVjMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmV4LWpzL2Rpc3QvY3NzL3ZleC5jc3M/YjE0ZCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmV4LWpzL2Rpc3QvanMvdmV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb250cy9BbGVncmV5YVNhbnMtTGlnaHQudHRmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9BbGVncmV5YVNhbnMtTGlnaHRJdGFsaWMudHRmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9BbGVncmV5YVNhbnMtUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL0tpbmctQmFzaWwtTGl0ZS5vdGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01pbmlvblByby1SZWd1bGFyLm90ZiIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydHMvY2FsbG91dHMuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydHMvZmFxLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRzL21hcC5odG1sIiwid2VicGFjazovLy8uL3NyYy9wYXJ0cy9yc3ZwLWFjY2Vzcy5odG1sIiwid2VicGFjazovLy8uL3NyYy9wYXJ0cy9yc3ZwLWxpc3QuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydHMvcnN2cC1vbmUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydHMvcnN2cC10d28uaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvcnN2cC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9pbmRleC5zY3NzPzA1N2YiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvbWFwLnNjc3M/MWY5MCIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9yZXNldC5jc3M/YTk4YSIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy92ZXguY3VzdG9tLmNzcz9kN2UxIiwid2VicGFjazovLy9leHRlcm5hbCBcImpRdWVyeVwiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUEwQyxnQ0FBZ0M7QUFDMUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnRUFBd0Qsa0JBQWtCO0FBQzFFO0FBQ0EseURBQWlELGNBQWM7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUF5QyxpQ0FBaUM7QUFDMUUsd0hBQWdILG1CQUFtQixFQUFFO0FBQ3JJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7OztBQUdBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ2xGQSwyQkFBMkIsbUJBQU8sQ0FBQyw4RkFBeUM7QUFDNUU7QUFDQSxjQUFjLFFBQVMsNkNBQTZDLFFBQVEsaUJBQWlCLHlDQUF5QyxpQ0FBaUMsRUFBRSxVQUFVLGlCQUFpQix1Q0FBdUMsK0JBQStCLEVBQUUsRUFBRSxzQ0FBc0MsUUFBUSxpQkFBaUIseUNBQXlDLGlDQUFpQyxFQUFFLFVBQVUsaUJBQWlCLHVDQUF1QywrQkFBK0IsRUFBRSxFQUFFLCtDQUErQyxRQUFRLGlCQUFpQix1Q0FBdUMsK0JBQStCLEVBQUUsVUFBVSxpQkFBaUIsd0NBQXdDLGdDQUFnQyxFQUFFLEVBQUUsdUNBQXVDLFFBQVEsaUJBQWlCLHVDQUF1QywrQkFBK0IsRUFBRSxVQUFVLGlCQUFpQix3Q0FBd0MsZ0NBQWdDLEVBQUUsRUFBRSxnQ0FBZ0MsZ0NBQWdDLHdCQUF3QiwwQ0FBMEMsa0NBQWtDLHVCQUF1QiwwQkFBMEIscUJBQXFCLEVBQUUseURBQXlELDJEQUEyRCxtREFBbUQsRUFBRSw2Q0FBNkMseUNBQXlDLGlDQUFpQyxpREFBaUQseUNBQXlDLEVBQUUsNkNBQTZDLGdEQUFnRCxxQkFBcUIscUJBQXFCLGdCQUFnQiw2QkFBNkIsdUJBQXVCLHVCQUF1QixtQkFBbUIsb0JBQW9CLGlCQUFpQixFQUFFLCtZQUErWSxtQkFBbUIsRUFBRSwyQ0FBMkMsdUJBQXVCLFdBQVcsYUFBYSxvQkFBb0IsRUFBRSxrREFBa0QsZ0RBQWdELHFCQUFxQixxQkFBcUIsc0JBQXNCLG1CQUFtQixtQkFBbUIscUJBQXFCLHFCQUFxQixtQkFBbUIsa0JBQWtCLHVCQUF1QixXQUFXLGFBQWEsZ0JBQWdCLHFCQUFxQixFQUFFLHFFQUFxRSx3QkFBd0IsRUFBRSxtRUFBbUUsd0JBQXdCLEVBQUUsc3FDQUFzcUMsdUJBQXVCLHdCQUF3QixnQkFBZ0IseUJBQXlCLGNBQWMseUJBQXlCLHlCQUF5Qix1QkFBdUIsc0JBQXNCLHNCQUFzQixFQUFFLDB2Q0FBMHZDLHFDQUFxQyxrQkFBa0IsRUFBRSxxRUFBcUUsYUFBYSxxQkFBcUIsd0JBQXdCLHNCQUFzQix1QkFBdUIsRUFBRSwyRUFBMkUsa0JBQWtCLG1CQUFtQixnQkFBZ0IsRUFBRSxtREFBbUQscUJBQXFCLGNBQWMsY0FBYyxpQkFBaUIsc0JBQXNCLHNCQUFzQiw4QkFBOEIscUJBQXFCLHlCQUF5QixxQkFBcUIseUJBQXlCLEVBQUUsNERBQTRELG1CQUFtQixFQUFFLHlEQUF5RCxrQkFBa0IsRUFBRSw2RUFBNkUscUJBQXFCLGdCQUFnQixFQUFFLG1GQUFtRiwrQ0FBK0MsRUFBRSwrRUFBK0UscUJBQXFCLGdCQUFnQixFQUFFLHFGQUFxRixpQ0FBaUMscUJBQXFCLGdCQUFnQixFQUFFLHVLQUF1SyxnQkFBZ0IsRUFBRSw2RUFBNkUsd0JBQXdCLEVBQUUsMnREQUEydEQsd0NBQXdDLEVBQUUsNklBQTZJLHdCQUF3QixFQUFFLDRFQUE0RSx3QkFBd0IsRUFBRSw0c0RBQTRzRCx3Q0FBd0MsRUFBRSw0SUFBNEksd0JBQXdCLEVBQUUsOEVBQThFLHdCQUF3QixFQUFFLDB1REFBMHVELHdDQUF3QyxFQUFFLDhJQUE4SSx3QkFBd0IsRUFBRSw2RUFBNkUsd0JBQXdCLEVBQUUsMnREQUEydEQsd0NBQXdDLEVBQUUsNklBQTZJLHdCQUF3QixFQUFFLGdEQUFnRCxnQkFBZ0IsZUFBZSxFQUFFOzs7Ozs7Ozs7Ozs7O0FDRnZxZSwyQkFBMkIsbUJBQU8sQ0FBQyw4RkFBeUM7QUFDNUU7QUFDQSxjQUFjLFFBQVMsa0NBQWtDLFFBQVEsaUJBQWlCLEVBQUUsVUFBVSxpQkFBaUIsRUFBRSxFQUFFLDJCQUEyQixRQUFRLGlCQUFpQixFQUFFLFVBQVUsaUJBQWlCLEVBQUUsRUFBRSxvQ0FBb0MsUUFBUSxpQkFBaUIsRUFBRSxVQUFVLGlCQUFpQixFQUFFLEVBQUUsNEJBQTRCLFFBQVEsaUJBQWlCLEVBQUUsVUFBVSxpQkFBaUIsRUFBRSxFQUFFLHFDQUFxQyxRQUFRLHNDQUFzQyw4QkFBOEIsRUFBRSxVQUFVLHdDQUF3QyxnQ0FBZ0MsRUFBRSxFQUFFLDZCQUE2QixRQUFRLHNDQUFzQyw4QkFBOEIsRUFBRSxVQUFVLHdDQUF3QyxnQ0FBZ0MsRUFBRSxFQUFFLCtDQUErQyxnQ0FBZ0MsMkJBQTJCLEVBQUUsVUFBVSxvQkFBb0IsbUJBQW1CLHNDQUFzQyxrQkFBa0IsV0FBVyxhQUFhLGNBQWMsWUFBWSxFQUFFLDRCQUE0Qix1QkFBdUIsaUJBQWlCLGdCQUFnQixpQkFBaUIscUJBQXFCLEVBQUUsa0JBQWtCLHNDQUFzQyw4QkFBOEIsb0JBQW9CLGtCQUFrQixtQ0FBbUMsV0FBVyxhQUFhLGNBQWMsWUFBWSxFQUFFLDhCQUE4QixnREFBZ0Qsd0NBQXdDLEVBQUUsa0JBQWtCLHNDQUFzQyw4QkFBOEIscUJBQXFCLEVBQUUsbUNBQW1DLGdEQUFnRCx3Q0FBd0MsRUFBRSx1QkFBdUIsbUNBQW1DLHdCQUF3QixFQUFFLHNCQUFzQixjQUFjLEVBQUUsd0JBQXdCLHVDQUF1Qyw2QkFBNkIsMEJBQTBCLHFCQUFxQixvQkFBb0IsNkNBQTZDLEVBQUUsMEJBQTBCLHdEQUF3RCxnREFBZ0QsMkNBQTJDLG9CQUFvQixrQkFBa0IsaUJBQWlCLFdBQVcsYUFBYSxjQUFjLFlBQVksZ0JBQWdCLGVBQWUscUJBQXFCLEVBQUUsbUJBQW1CLHFCQUFxQixFQUFFOzs7Ozs7Ozs7Ozs7O0FDRjkzRSwyQkFBMkIsbUJBQU8sQ0FBQyx3R0FBbUQ7QUFDdEY7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxzSEFBMEQ7QUFDbEYseUNBQXlDLG1CQUFPLENBQUMsMkVBQWlDO0FBQ2xGLHlDQUF5QyxtQkFBTyxDQUFDLCtFQUFtQztBQUNwRix5Q0FBeUMsbUJBQU8sQ0FBQyx1RkFBdUM7QUFDeEYseUNBQXlDLG1CQUFPLENBQUMscUVBQThCO0FBQy9FLHlDQUF5QyxtQkFBTyxDQUFDLHlFQUFnQzs7QUFFakY7QUFDQSxjQUFjLFFBQVMsZUFBZSwwQkFBMEIsb0VBQW9FLHVCQUF1Qix3QkFBd0IsRUFBRSxnQkFBZ0IsMEJBQTBCLG9FQUFvRSx1QkFBdUIsc0JBQXNCLEVBQUUsZ0JBQWdCLDBCQUEwQixvRUFBb0UsdUJBQXVCLHdCQUF3QixFQUFFLGdCQUFnQiwyQkFBMkIsb0VBQW9FLHVCQUF1Qix3QkFBd0IsRUFBRSxnQkFBZ0IsMkJBQTJCLHNCQUFzQixFQUFFLGdCQUFnQix3QkFBd0Isb0VBQW9FLHVCQUF1Qix3QkFBd0IsRUFBRSxhQUFhLHdCQUF3QixFQUFFLFlBQVksbUJBQW1CLEVBQUUsVUFBVSxxQkFBcUIsRUFBRSwwQ0FBMEMsWUFBWSx5QkFBeUIsRUFBRSxFQUFFLDBDQUEwQyxZQUFZLHlCQUF5QixFQUFFLEVBQUUsVUFBVSwwQkFBMEIsd0JBQXdCLHVCQUF1QixvQkFBb0IsaUJBQWlCLHdDQUF3Qyx1Q0FBdUMsRUFBRSxPQUFPLHFCQUFxQixzQkFBc0IsRUFBRSxXQUFXLHNCQUFzQixFQUFFLFFBQVEsbUJBQW1CLEVBQUUsY0FBYyxrQkFBa0IsbUNBQW1DLGdCQUFnQiw4QkFBOEIscUJBQXFCLEVBQUUsaUJBQWlCLHFCQUFxQixFQUFFLDBDQUEwQyxnQkFBZ0IsdUJBQXVCLEVBQUUsRUFBRSxVQUFVLHFCQUFxQixzQkFBc0IsRUFBRSxrQkFBa0IsWUFBWSx1QkFBdUIsMkJBQTJCLDhCQUE4QixFQUFFLDBDQUEwQyxvQkFBb0IsMkJBQTJCLG1CQUFtQixFQUFFLEVBQUUsdUJBQXVCLG9CQUFvQixFQUFFLDBDQUEwQyxtQkFBbUIseUJBQXlCLHVCQUF1QixpQkFBaUIsRUFBRSxFQUFFLGFBQWEsa0JBQWtCLDZCQUE2QixxQkFBcUIsd0JBQXdCLGlCQUFpQiwwQkFBMEIsc0JBQXNCLHNCQUFzQiw4QkFBOEIsMEJBQTBCLGlCQUFpQiw4QkFBOEIsMkJBQTJCLHdCQUF3Qix5QkFBeUIsbUJBQW1CLG9CQUFvQiwrQ0FBK0MsdUNBQXVDLEVBQUUsbUJBQW1CLDBCQUEwQixFQUFFLGlCQUFpQiwwQkFBMEIsd0JBQXdCLGdCQUFnQixzQkFBc0IscUJBQXFCLG1CQUFtQixFQUFFLE9BQU8sbUJBQW1CLG9CQUFvQixFQUFFLG1JQUFtSSxxQ0FBcUMsRUFBRSwyR0FBMkcsbUJBQW1CLEVBQUUsdUdBQXVHLDhCQUE4QixFQUFFLDBCQUEwQiwyQkFBMkIscUJBQXFCLDZCQUE2QixrQkFBa0IsOEJBQThCLHVCQUF1QixzQkFBc0IscUJBQXFCLG1CQUFtQixFQUFFLGVBQWUsMEJBQTBCLEVBQUUsaUJBQWlCLDBCQUEwQix1QkFBdUIsc0JBQXNCLEVBQUUsdUJBQXVCLHFCQUFxQixFQUFFLGVBQWUsb0JBQW9CLHNCQUFzQixFQUFFLGtCQUFrQixtQ0FBbUMsOEJBQThCLEVBQUUsVUFBVSxrQkFBa0IsRUFBRSxXQUFXLG1CQUFtQixzQkFBc0Isc0JBQXNCLHNCQUFzQixFQUFFOzs7Ozs7Ozs7Ozs7O0FDVjk4SCwyQkFBMkIsbUJBQU8sQ0FBQyx3R0FBbUQ7QUFDdEY7QUFDQSxjQUFjLFFBQVMsZ0JBQWdCLHFCQUFxQixrQkFBa0IsMERBQTBELEVBQUUsVUFBVSxnQkFBZ0Isa0JBQWtCLHFCQUFxQiwyQkFBMkIsRUFBRTs7Ozs7Ozs7Ozs7OztBQ0Z4TywyQkFBMkIsbUJBQU8sQ0FBQyx3R0FBbUQ7QUFDdEY7QUFDQSxjQUFjLFFBQVMsbW1CQUFtbUIsY0FBYyxlQUFlLGNBQWMsb0JBQW9CLGtCQUFrQiw2QkFBNkIsRUFBRSxpSkFBaUosbUJBQW1CLEVBQUUsVUFBVSxtQkFBbUIsRUFBRSxZQUFZLHFCQUFxQixFQUFFLG1CQUFtQixpQkFBaUIsRUFBRSw2REFBNkQsZ0JBQWdCLGtCQUFrQixFQUFFLFdBQVcsOEJBQThCLHNCQUFzQixFQUFFOzs7Ozs7Ozs7Ozs7O0FDRjFwQywyQkFBMkIsbUJBQU8sQ0FBQyx3R0FBbUQ7QUFDdEY7QUFDQSxjQUFjLFFBQVMsNENBQTRDLHNDQUFzQyw4QkFBOEIsRUFBRSw4QkFBOEIsZ0RBQWdELHdDQUF3QyxFQUFFLHlEQUF5RCxnREFBZ0Qsd0NBQXdDLEVBQUU7Ozs7Ozs7Ozs7Ozs7O0FDRnZZOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUNBQXVDLGdCQUFnQjtBQUN2RCxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxtQkFBbUIsaUJBQWlCO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWUsb0JBQW9CO0FBQ25DLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsY0FBYztBQUNuRTtBQUNBLEM7Ozs7Ozs7Ozs7OztBQ3BGYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSDtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFOzs7Ozs7Ozs7OztBQ25CQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBLGNBQWMsbUJBQU8sQ0FBQyx1REFBUTs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLHNCQUFzQjtBQUN2Qzs7QUFFQTtBQUNBLG1CQUFtQiwyQkFBMkI7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIsMkJBQTJCO0FBQzVDO0FBQ0E7O0FBRUEsUUFBUSx1QkFBdUI7QUFDL0I7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSxpQkFBaUIsdUJBQXVCO0FBQ3hDO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZCxrREFBa0Qsc0JBQXNCO0FBQ3hFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0EsS0FBSyxLQUF3QyxFQUFFLEVBRTdDOztBQUVGLFFBQVEsc0JBQWlCO0FBQ3pCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDs7QUFFQSw2QkFBNkIsbUJBQW1COztBQUVoRDs7QUFFQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDOVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXLEVBQUU7QUFDckQsd0NBQXdDLFdBQVcsRUFBRTs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxzQ0FBc0M7QUFDdEMsR0FBRztBQUNIO0FBQ0EsOERBQThEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDeEZBLHFDQUFhLEdBQUcsSUFBc0QsRUFBRSxtQkFBbUIsS0FBSyxVQUFrTyxDQUFDLGFBQWEsMEJBQTBCLG1CQUFtQixrQkFBa0IsZ0JBQWdCLFVBQVUsVUFBVSwwQ0FBMEMsZ0JBQWdCLE9BQUMsT0FBTyxvQkFBb0IsOENBQThDLGtDQUFrQyxZQUFZLFlBQVksbUNBQW1DLGlCQUFpQixnQkFBZ0Isc0JBQXNCLG9CQUFvQiwwQ0FBMEMsWUFBWSxXQUFXLFlBQVksU0FBUyxTQUFTLEtBQUs7QUFDbjBCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvQ0FBb0MsRUFBRTtBQUN6RDtBQUNBOztBQUVBOztBQUVBLENBQUMsR0FBRzs7QUFFSjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLFlBQVksUUFBUTtBQUNwQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDOztBQUV4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsQ0FBQyxHQUFHO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQztBQUNwQzs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQixvQkFBb0I7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEIseUJBQXlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxHQUFHO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixvQkFBb0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9DQUFvQzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1Qiw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGFBQWE7QUFDeEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLENBQUMsRUFBRSxvREFBb0QsRUFBRSxHQUFHO0FBQzVELENBQUMsRTs7Ozs7Ozs7Ozs7O0FDM25CRCxjQUFjLG1CQUFPLENBQUMsZ1BBQWtHOztBQUV4SCw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsNEZBQXlDOztBQUU5RDs7QUFFQSxHQUFHLEtBQVUsRUFBRSxFOzs7Ozs7Ozs7Ozs7QUNsQmYsY0FBYyxtQkFBTyxDQUFDLDRNQUFnRjs7QUFFdEcsNENBQTRDLFFBQVM7O0FBRXJEO0FBQ0E7Ozs7QUFJQSxlQUFlOztBQUVmO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLDRGQUF5Qzs7QUFFOUQ7O0FBRUEsR0FBRyxLQUFVLEVBQUUsRTs7Ozs7Ozs7Ozs7QUNuQmYscUNBQWEsR0FBRyxJQUFzRCxFQUFFLG1CQUFtQixLQUFLLFVBQTROLENBQUMsYUFBYSwwQkFBMEIsbUJBQW1CLGtCQUFrQixnQkFBZ0IsVUFBVSxVQUFVLDBDQUEwQyxnQkFBZ0IsT0FBQyxPQUFPLG9CQUFvQiw4Q0FBOEMsa0NBQWtDLFlBQVksWUFBWSxtQ0FBbUMsaUJBQWlCLGdCQUFnQixzQkFBc0Isb0JBQW9CLDBDQUEwQyxZQUFZLFdBQVcsWUFBWSxTQUFTLFNBQVMsS0FBSztBQUM3ekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsYUFBYTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxDQUFDOztBQUVEOztBQUVBLENBQUMsR0FBRzs7QUFFSjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLFlBQVksUUFBUTtBQUNwQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDOztBQUV4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsQ0FBQyxHQUFHO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbURBQW1ELGlCQUFpQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDLEdBQUc7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG9CQUFvQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSx3REFBd0Q7O0FBRXhEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLEVBQUUsd0RBQXdELEVBQUUsR0FBRztBQUNoRSxDQUFDLEU7Ozs7Ozs7Ozs7O0FDaHZCRCxpQkFBaUIscUJBQXVCLDBDOzs7Ozs7Ozs7OztBQ0F4QyxnQ0FBZ0MsbzkxSDs7Ozs7Ozs7Ozs7QUNBaEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsZ0NBQWdDLG8wcEI7Ozs7Ozs7Ozs7O0FDQWhDLGlCQUFpQixxQkFBdUIsMEM7Ozs7Ozs7Ozs7OztBQ0F4QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUN3Qjs7QUFFeEI7QUFDMEI7QUFDQztBQUNGOztBQUV6QjtBQUNxRDtBQUNWO0FBQ0E7QUFDM0MsOENBQUM7QUFDRCxhQUFhLDhDQUFDO0FBQ2QsRUFBRSw4Q0FBQyx3QkFBd0IsMkRBQWdCO0FBQzNDLGNBQWMsc0RBQVc7QUFDekIsY0FBYyxzREFBVztBQUN6QixDQUFDOztBQUVEO0FBQ2tCO0FBQ0M7O0FBRW5CO0FBQ0EsRUFBRSw4Q0FBQyw2QkFBNkIsOENBQUM7QUFDakM7O0FBRUEsOENBQUM7Ozs7Ozs7Ozs7OztBQzNCRDtBQUNBLGtCQUFrQixtQ0FBbUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0NBQWtDO0FBQ3ZELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbUNBQW1DO0FBQ3hELFNBQVM7QUFDVDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUwsa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQSxHQUFHOztBQUVIOztBQUVBOzs7Ozs7Ozs7Ozs7QUMzQ0EsMFU7Ozs7Ozs7Ozs7O0FDQUEsK3ZLOzs7Ozs7Ozs7OztBQ0FBLCtFOzs7Ozs7Ozs7OztBQ0FBLDRROzs7Ozs7Ozs7OztBQ0FBLDZSOzs7Ozs7Ozs7OztBQ0FBLHF6Qjs7Ozs7Ozs7Ozs7QUNBQSxtVDs7Ozs7Ozs7Ozs7O0FDQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUN5QjtBQUNVO0FBQ25DLDZDQUFHLGdCQUFnQixpREFBUztBQUM1Qiw2Q0FBRzs7QUFFSDtBQUNpQztBQUNrQjtBQUNwQjs7QUFFL0I7QUFDMEQ7QUFDRjtBQUNBO0FBQ0Y7O0FBRXREO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsRUFBRSw2Q0FBRztBQUNMLG1CQUFtQiw4REFBa0I7QUFDckM7QUFDQSxpQkFBaUIsRUFBRSw2Q0FBRyxzQkFBc0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixpQkFBaUIsRUFBRSw2Q0FBRyxxQkFBcUI7QUFDM0M7QUFDQSxRQUFRO0FBQ1I7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7O0FBRUE7QUFDQSxJQUFJLDZDQUFHO0FBQ1AscUJBQXFCLDJEQUFtQjtBQUN4QztBQUNBLG1CQUFtQixFQUFFLDZDQUFHLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMERBQTBEO0FBQzFGLGVBQWU7QUFDZixnQ0FBZ0Msb0hBQW9IO0FBQ3BKO0FBQ0EsaUNBQWlDLFlBQVk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsb0JBQW9CLDZDQUFHO0FBQ3ZCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxrQkFBa0IsNkNBQUc7QUFDckIsaUJBQWlCO0FBQ2pCLFdBQVc7QUFDWCxVQUFVO0FBQ1YsbUJBQW1CLEVBQUUsNkNBQUcscUJBQXFCO0FBQzdDO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7O0FBRUE7O0FBRUEsRUFBRSw2Q0FBRztBQUNMLG1CQUFtQiwyREFBbUI7QUFDdEM7QUFDQSxpQkFBaUIsRUFBRSw2Q0FBRyxzQkFBc0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGdCQUFnQiw2Q0FBRztBQUNuQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDZDQUFHO0FBQ25CLGVBQWU7QUFDZjtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1IsaUJBQWlCLEVBQUUsNkNBQUcscUJBQXFCO0FBQzNDO0FBQ0EsUUFBUSw2Q0FBRztBQUNYLFFBQVE7QUFDUjtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxJQUFJLDZDQUFHO0FBQ1AscUJBQXFCLDREQUFnQjtBQUNyQztBQUNBLG1CQUFtQixFQUFFLDZDQUFHLHNCQUFzQjtBQUM5QztBQUNBLFVBQVU7QUFDVjtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUCxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsOERBQThEO0FBQy9FO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFLDZDQUFHO0FBQ0w7QUFDQTtBQUNBLGlCQUFpQixFQUFFLDZDQUFHLHNCQUFzQjtBQUM1QztBQUNBLFFBQVE7QUFDUjtBQUNBLEdBQUc7QUFDSDs7Ozs7Ozs7Ozs7OztBQzFRQSxjQUFjLG1CQUFPLENBQUMsa05BQXVHOztBQUU3SCw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsc0dBQW1EOztBQUV4RTs7QUFFQSxHQUFHLEtBQVUsRUFBRSxFOzs7Ozs7Ozs7Ozs7QUNsQmYsY0FBYyxtQkFBTyxDQUFDLDhNQUFxRzs7QUFFM0gsNENBQTRDLFFBQVM7O0FBRXJEO0FBQ0E7Ozs7QUFJQSxlQUFlOztBQUVmO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHNHQUFtRDs7QUFFeEU7O0FBRUEsR0FBRyxLQUFVLEVBQUUsRTs7Ozs7Ozs7Ozs7O0FDbEJmLGNBQWMsbUJBQU8sQ0FBQyxnTkFBc0c7O0FBRTVILDRDQUE0QyxRQUFTOztBQUVyRDtBQUNBOzs7O0FBSUEsZUFBZTs7QUFFZjtBQUNBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyxzR0FBbUQ7O0FBRXhFOztBQUVBLEdBQUcsS0FBVSxFQUFFLEU7Ozs7Ozs7Ozs7OztBQ2xCZixjQUFjLG1CQUFPLENBQUMsME5BQTJHOztBQUVqSSw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsc0dBQW1EOztBQUV4RTs7QUFFQSxHQUFHLEtBQVUsRUFBRSxFOzs7Ozs7Ozs7OztBQ25CZix3QiIsImZpbGUiOiJtZWV0dGhlZWtlcy5kZXYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC5qc1wiKTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJALXdlYmtpdC1rZXlmcmFtZXMgdmV4LWZsaXBpbi1ob3Jpem9udGFsIHtcXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZVkoLTkwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGVZKC05MGRlZyk7IH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlWSgwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGVZKDBkZWcpOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIHZleC1mbGlwaW4taG9yaXpvbnRhbCB7XFxuICAwJSB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGVZKC05MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlWSgtOTBkZWcpOyB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZVkoMGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlWSgwZGVnKTsgfSB9XFxuXFxuQC13ZWJraXQta2V5ZnJhbWVzIHZleC1mbGlwb3V0LWhvcml6b250YWwge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlWSgwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGVZKDBkZWcpOyB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIHZleC1mbGlwb3V0LWhvcml6b250YWwge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlWSgwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGVZKDBkZWcpOyB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpOyB9IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayB7XFxuICAtd2Via2l0LXBlcnNwZWN0aXZlOiAxMzAwcHg7XFxuICBwZXJzcGVjdGl2ZTogMTMwMHB4O1xcbiAgLXdlYmtpdC1wZXJzcGVjdGl2ZS1vcmlnaW46IDUwJSAxNTBweDtcXG4gIHBlcnNwZWN0aXZlLW9yaWdpbjogNTAlIDE1MHB4O1xcbiAgcGFkZGluZy10b3A6IDEwMHB4O1xcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xcbiAgZm9udC1zaXplOiAxLjVlbTsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC1jbG9zaW5nIC52ZXgtY29udGVudCB7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogdmV4LWZsaXBvdXQtaG9yaXpvbnRhbCAuNXMgZm9yd2FyZHM7XFxuICBhbmltYXRpb246IHZleC1mbGlwb3V0LWhvcml6b250YWwgLjVzIGZvcndhcmRzOyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1jb250ZW50IHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcXG4gIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogdmV4LWZsaXBpbi1ob3Jpem9udGFsIC41cztcXG4gIGFuaW1hdGlvbjogdmV4LWZsaXBpbi1ob3Jpem9udGFsIC41czsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtY29udGVudCB7XFxuICBmb250LWZhbWlseTogXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OiAyMDA7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgY29sb3I6ICM0NDQ7XFxuICBwYWRkaW5nOiAyZW0gMmVtIDNlbSAyZW07XFxuICBsaW5lLWhlaWdodDogMS41ZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIHdpZHRoOiA2MDBweDsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtY29udGVudCBoMSwgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1jb250ZW50IGgyLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWNvbnRlbnQgaDMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtY29udGVudCBoNCwgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1jb250ZW50IGg1LCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWNvbnRlbnQgaDYsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtY29udGVudCBwLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWNvbnRlbnQgdWwsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtY29udGVudCBsaSB7XFxuICBjb2xvcjogaW5oZXJpdDsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtY2xvc2Uge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWNsb3NlOmJlZm9yZSB7XFxuICBmb250LWZhbWlseTogXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OiAxMDA7XFxuICBsaW5lLWhlaWdodDogMXB4O1xcbiAgcGFkZGluZy10b3A6IC41ZW07XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZvbnQtc2l6ZTogMmVtO1xcbiAgdGV4dC1pbmRlbnQ6IDFweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBoZWlnaHQ6IDEuMjVlbTtcXG4gIHdpZHRoOiAxLjI1ZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZDogIzY2NjsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctbWVzc2FnZSB7XFxuICBtYXJnaW4tYm90dG9tOiAuNWVtOyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCB7XFxuICBtYXJnaW4tYm90dG9tOiAuNWVtOyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCB0ZXh0YXJlYSwgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJkYXRlXFxcIl0sIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwiZGF0ZXRpbWVcXFwiXSwgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJkYXRldGltZS1sb2NhbFxcXCJdLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImVtYWlsXFxcIl0sIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwibW9udGhcXFwiXSwgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJudW1iZXJcXFwiXSwgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJwYXNzd29yZFxcXCJdLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInRlbFxcXCJdLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInRleHRcXFwiXSwgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJ0aW1lXFxcIl0sIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidXJsXFxcIl0sIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwid2Vla1xcXCJdIHtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIGJhY2tncm91bmQ6ICNmMGYwZjA7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IC4yNWVtIC42N2VtO1xcbiAgYm9yZGVyOiAwO1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxuICBmb250LXdlaWdodDogaW5oZXJpdDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIG1pbi1oZWlnaHQ6IDIuNWVtO1xcbiAgbWFyZ2luOiAwIDAgLjI1ZW07IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IHRleHRhcmVhOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGVcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJkYXRldGltZVxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGV0aW1lLWxvY2FsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwiZW1haWxcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJtb250aFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcIm51bWJlclxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInBhc3N3b3JkXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGVsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInRpbWVcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJ1cmxcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJ3ZWVrXFxcIl06Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMnB4ICM2NjY7XFxuICBvdXRsaW5lOiBub25lOyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1idXR0b25zIHtcXG4gICp6b29tOiAxO1xcbiAgcGFkZGluZy10b3A6IDFlbTtcXG4gIG1hcmdpbi1ib3R0b206IC0zZW07XFxuICBtYXJnaW4tbGVmdDogLTJlbTtcXG4gIG1hcmdpbi1yaWdodDogLTJlbTsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctYnV0dG9uczphZnRlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGRpc3BsYXk6IHRhYmxlO1xcbiAgY2xlYXI6IGJvdGg7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1idXR0b24ge1xcbiAgYm9yZGVyLXJhZGl1czogMDtcXG4gIGJvcmRlcjogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGZsb2F0OiByaWdodDtcXG4gIHBhZGRpbmc6IC41ZW0gMWVtO1xcbiAgZm9udC1zaXplOiAxLjEzZW07XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgZm9udC13ZWlnaHQ6IDIwMDtcXG4gIGxldHRlci1zcGFjaW5nOiAuMWVtO1xcbiAgbGluZS1oZWlnaHQ6IDFlbTtcXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0OyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctYnV0dG9uLnZleC1sYXN0IHtcXG4gIG1hcmdpbi1sZWZ0OiAwOyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctYnV0dG9uOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1idXR0b24udmV4LWRpYWxvZy1idXR0b24tcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kOiAjNjY2O1xcbiAgY29sb3I6ICNmZmY7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1idXR0b24udmV4LWRpYWxvZy1idXR0b24tcHJpbWFyeTpmb2N1cyB7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDNweCByZ2JhKDAsIDAsIDAsIDAuMik7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1idXR0b24udmV4LWRpYWxvZy1idXR0b24tc2Vjb25kYXJ5IHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBjb2xvcjogI2NjYzsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWJ1dHRvbi52ZXgtZGlhbG9nLWJ1dHRvbi1zZWNvbmRhcnk6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAzcHggI2FhYTtcXG4gIGJhY2tncm91bmQ6ICNlZWU7XFxuICBjb2xvcjogIzc3NzsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWJ1dHRvbi52ZXgtZGlhbG9nLWJ1dHRvbi1zZWNvbmRhcnk6aG92ZXIsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWJ1dHRvbi52ZXgtZGlhbG9nLWJ1dHRvbi1zZWNvbmRhcnk6YWN0aXZlIHtcXG4gIGNvbG9yOiAjNzc3OyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXBpbmsgLnZleC1jbG9zZTpiZWZvcmUge1xcbiAgYmFja2dyb3VuZDogI2ZmN2VhNzsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1waW5rIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgc2VsZWN0OmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcGluayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IHRleHRhcmVhOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcGluayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGVcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXBpbmsgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJkYXRldGltZVxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcGluayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGV0aW1lLWxvY2FsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1waW5rIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwiZW1haWxcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXBpbmsgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJtb250aFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcGluayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcIm51bWJlclxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcGluayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInBhc3N3b3JkXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1waW5rIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1waW5rIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGVsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1waW5rIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcGluayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInRpbWVcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXBpbmsgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJ1cmxcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXBpbmsgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJ3ZWVrXFxcIl06Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMnB4ICNmZjdlYTc7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcGluayAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWJ1dHRvbnMgLnZleC1kaWFsb2ctYnV0dG9uLnZleC1kaWFsb2ctYnV0dG9uLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZDogI2ZmN2VhNzsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1yZWQgLnZleC1jbG9zZTpiZWZvcmUge1xcbiAgYmFja2dyb3VuZDogI2NlNGE1NTsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1yZWQgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBzZWxlY3Q6Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1yZWQgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCB0ZXh0YXJlYTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXJlZCAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGVcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXJlZCAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGV0aW1lXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1yZWQgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJkYXRldGltZS1sb2NhbFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcmVkIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwiZW1haWxcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXJlZCAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcIm1vbnRoXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1yZWQgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJudW1iZXJcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXJlZCAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInBhc3N3b3JkXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1yZWQgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJzZWFyY2hcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLXJlZCAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInRlbFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcmVkIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcmVkIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGltZVxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcmVkIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidXJsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1yZWQgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJ3ZWVrXFxcIl06Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMnB4ICNjZTRhNTU7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stcmVkIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctYnV0dG9ucyAudmV4LWRpYWxvZy1idXR0b24udmV4LWRpYWxvZy1idXR0b24tcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kOiAjY2U0YTU1OyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWdyZWVuIC52ZXgtY2xvc2U6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQ6ICMzNGI5ODk7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stZ3JlZW4gLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBzZWxlY3Q6Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ncmVlbiAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IHRleHRhcmVhOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stZ3JlZW4gLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJkYXRlXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ncmVlbiAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGV0aW1lXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ncmVlbiAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGV0aW1lLWxvY2FsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ncmVlbiAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImVtYWlsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ncmVlbiAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcIm1vbnRoXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ncmVlbiAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcIm51bWJlclxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stZ3JlZW4gLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJwYXNzd29yZFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stZ3JlZW4gLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJzZWFyY2hcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWdyZWVuIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGVsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ncmVlbiAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInRleHRcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWdyZWVuIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGltZVxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stZ3JlZW4gLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJ1cmxcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWdyZWVuIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwid2Vla1xcXCJdOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCAjMzRiOTg5OyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWdyZWVuIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctYnV0dG9ucyAudmV4LWRpYWxvZy1idXR0b24udmV4LWRpYWxvZy1idXR0b24tcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kOiAjMzRiOTg5OyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWJsdWUgLnZleC1jbG9zZTpiZWZvcmUge1xcbiAgYmFja2dyb3VuZDogIzQ3N0ZBNTsgfVxcblxcbi52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ibHVlIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgc2VsZWN0OmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stYmx1ZSAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IHRleHRhcmVhOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stYmx1ZSAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGVcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWJsdWUgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJkYXRldGltZVxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stYmx1ZSAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcImRhdGV0aW1lLWxvY2FsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ibHVlIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwiZW1haWxcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWJsdWUgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJtb250aFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stYmx1ZSAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcIm51bWJlclxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stYmx1ZSAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInBhc3N3b3JkXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ibHVlIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ibHVlIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGVsXFxcIl06Zm9jdXMsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrLnZleC10aGVtZS1mbGF0LWF0dGFjay1ibHVlIC52ZXgtZGlhbG9nLWZvcm0gLnZleC1kaWFsb2ctaW5wdXQgaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdOmZvY3VzLCAudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stYmx1ZSAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWlucHV0IGlucHV0W3R5cGU9XFxcInRpbWVcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWJsdWUgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJ1cmxcXFwiXTpmb2N1cywgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sudmV4LXRoZW1lLWZsYXQtYXR0YWNrLWJsdWUgLnZleC1kaWFsb2ctZm9ybSAudmV4LWRpYWxvZy1pbnB1dCBpbnB1dFt0eXBlPVxcXCJ3ZWVrXFxcIl06Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMnB4ICM0NzdGQTU7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtdGhlbWUtZmxhdC1hdHRhY2stYmx1ZSAudmV4LWRpYWxvZy1mb3JtIC52ZXgtZGlhbG9nLWJ1dHRvbnMgLnZleC1kaWFsb2ctYnV0dG9uLnZleC1kaWFsb2ctYnV0dG9uLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZDogIzQ3N0ZBNTsgfVxcblxcbi52ZXgtbG9hZGluZy1zcGlubmVyLnZleC10aGVtZS1mbGF0LWF0dGFjayB7XFxuICBoZWlnaHQ6IDRlbTtcXG4gIHdpZHRoOiA0ZW07IH1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQC13ZWJraXQta2V5ZnJhbWVzIHZleC1mYWRlaW4ge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTsgfSB9XFxuXFxuQGtleWZyYW1lcyB2ZXgtZmFkZWluIHtcXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMDsgfVxcbiAgMTAwJSB7XFxuICAgIG9wYWNpdHk6IDE7IH0gfVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyB2ZXgtZmFkZW91dCB7XFxuICAwJSB7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAwOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIHZleC1mYWRlb3V0IHtcXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgMTAwJSB7XFxuICAgIG9wYWNpdHk6IDA7IH0gfVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyB2ZXgtcm90YXRpb24ge1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTsgfSB9XFxuXFxuQGtleWZyYW1lcyB2ZXgtcm90YXRpb24ge1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTsgfSB9XFxuXFxuLnZleCwgLnZleCAqLCAudmV4ICo6YmVmb3JlLCAudmV4ICo6YWZ0ZXIge1xcbiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxcblxcbi52ZXgge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICB6LWluZGV4OiAxMTExO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwOyB9XFxuXFxuLnZleC1zY3JvbGxiYXItbWVhc3VyZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IC05OTk5cHg7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDtcXG4gIG92ZXJmbG93OiBzY3JvbGw7IH1cXG5cXG4udmV4LW92ZXJsYXkge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IHZleC1mYWRlaW4gLjVzO1xcbiAgYW5pbWF0aW9uOiB2ZXgtZmFkZWluIC41cztcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHotaW5kZXg6IDExMTE7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNCk7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7IH1cXG5cXG4udmV4LW92ZXJsYXkudmV4LWNsb3Npbmcge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IHZleC1mYWRlb3V0IC41cyBmb3J3YXJkcztcXG4gIGFuaW1hdGlvbjogdmV4LWZhZGVvdXQgLjVzIGZvcndhcmRzOyB9XFxuXFxuLnZleC1jb250ZW50IHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiB2ZXgtZmFkZWluIC41cztcXG4gIGFuaW1hdGlvbjogdmV4LWZhZGVpbiAuNXM7XFxuICBiYWNrZ3JvdW5kOiAjZmZmOyB9XFxuXFxuLnZleC52ZXgtY2xvc2luZyAudmV4LWNvbnRlbnQge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IHZleC1mYWRlb3V0IC41cyBmb3J3YXJkcztcXG4gIGFuaW1hdGlvbjogdmV4LWZhZGVvdXQgLjVzIGZvcndhcmRzOyB9XFxuXFxuLnZleC1jbG9zZTpiZWZvcmUge1xcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgY29udGVudDogXFxcIlxcXFwwMEQ3XFxcIjsgfVxcblxcbi52ZXgtZGlhbG9nLWZvcm0ge1xcbiAgbWFyZ2luOiAwOyB9XFxuXFxuLnZleC1kaWFsb2ctYnV0dG9uIHtcXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcblxcbi52ZXgtbG9hZGluZy1zcGlubmVyIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiB2ZXgtcm90YXRpb24gLjdzIGxpbmVhciBpbmZpbml0ZTtcXG4gIGFuaW1hdGlvbjogdmV4LXJvdGF0aW9uIC43cyBsaW5lYXIgaW5maW5pdGU7XFxuICBib3gtc2hhZG93OiAwIDAgMWVtIHJnYmEoMCwgMCwgMCwgMC4xKTtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHotaW5kZXg6IDExMTI7XFxuICBtYXJnaW46IGF1dG87XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICBoZWlnaHQ6IDJlbTtcXG4gIHdpZHRoOiAyZW07XFxuICBiYWNrZ3JvdW5kOiAjZmZmOyB9XFxuXFxuYm9keS52ZXgtb3BlbiB7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gSW1wb3J0c1xudmFyIHVybEVzY2FwZSA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvdXJsLWVzY2FwZS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzBfX18gPSB1cmxFc2NhcGUocmVxdWlyZShcIi4uL2ZvbnRzL0FsZWdyZXlhU2Fucy1MaWdodC50dGZcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMV9fXyA9IHVybEVzY2FwZShyZXF1aXJlKFwiLi4vZm9udHMvQWxlZ3JleWFTYW5zLVJlZ3VsYXIudHRmXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzJfX18gPSB1cmxFc2NhcGUocmVxdWlyZShcIi4uL2ZvbnRzL0FsZWdyZXlhU2Fucy1MaWdodEl0YWxpYy50dGZcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fM19fXyA9IHVybEVzY2FwZShyZXF1aXJlKFwiLi4vZm9udHMvS2luZy1CYXNpbC1MaXRlLm90ZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX180X19fID0gdXJsRXNjYXBlKHJlcXVpcmUoXCIuLi9mb250cy9NaW5pb25Qcm8tUmVndWxhci5vdGZcIikpO1xuXG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IGFsZWdyZXlhO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzBfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IGFsZWdyZXlhO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzFfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBhbGVncmV5YTtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18yX19fICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKTtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBraW5nYmFzaWw7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fM19fXyArIFwiKSBmb3JtYXQoXFxcIm9wZW50eXBlXFxcIik7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogbm9ybWFsOyB9XFxuXFxuLmtpbmdiYXNpbCB7XFxuICBmb250LWZhbWlseToga2luZ2Jhc2lsO1xcbiAgbGluZS1oZWlnaHQ6IDEuODU7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBtaW5pb247XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fNF9fXyArIFwiKSBmb3JtYXQoXFxcIm9wZW50eXBlXFxcIik7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogbm9ybWFsOyB9XFxuXFxuLm1pbmlvbiB7XFxuICBmb250LWZhbWlseTogbWluaW9uOyB9XFxuXFxuLmdyZWVuIHtcXG4gIGNvbG9yOiAjN2VhMTkzOyB9XFxuXFxuaHRtbCB7XFxuICBmb250LXNpemU6IDYyLjUlOyB9XFxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MzVweCkge1xcbiAgICBodG1sIHtcXG4gICAgICBmb250LXNpemU6IDUyLjUlOyB9IH1cXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU1MHB4KSB7XFxuICAgIGh0bWwge1xcbiAgICAgIGZvbnQtc2l6ZTogNDAuNSU7IH0gfVxcblxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6IGFsZWdyZXlhO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtc2l6ZTogMTcwJTtcXG4gIGNvbG9yOiBibGFjaztcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsgfVxcblxcbnAge1xcbiAgbGluZS1oZWlnaHQ6IDEuMjtcXG4gIHBhZGRpbmc6IDAuOHJlbSAwOyB9XFxuXFxuLmJvbGQge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cXG5cXG5oMSB7XFxuICBmb250LXNpemU6IDNlbTsgfVxcblxcbiNoZWFkaW5nIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlYWYwZjM7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuICAjaGVhZGluZyBoMSB7XFxuICAgIGNvbG9yOiAjNDg3Nzk3OyB9XFxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NTBweCkge1xcbiAgICAjaGVhZGluZyB7XFxuICAgICAgZGlzcGxheTogYmxvY2s7IH0gfVxcblxcbiNhcHAge1xcbiAgbWFyZ2luLXRvcDogLTVweDtcXG4gIGJhY2tncm91bmQ6IHdoaXRlOyB9XFxuXFxuI2hlYWRpbmdMZWZ0IHtcXG4gIGZsZXg6IDE7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxNSUgMnJlbSAycmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VhZjBmMzsgfVxcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTUwcHgpIHtcXG4gICAgI2hlYWRpbmdMZWZ0IHtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgei1pbmRleDogMjsgfSB9XFxuXFxuI2hlYWRpbmdSaWdodCBpbWcge1xcbiAgbWF4LXdpZHRoOiAxMDAlOyB9XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTUwcHgpIHtcXG4gICNoZWFkaW5nUmlnaHQge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIG1hcmdpbi10b3A6IC0zNSU7XFxuICAgIHotaW5kZXg6IDE7IH0gfVxcblxcbi5idXR0b24ge1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiAjZjVlODkzO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgZm9udC1mYW1pbHk6IGFsZWdyZXlhO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDEuOHJlbTtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBjb2xvcjogYmxhY2s7XFxuICBib3JkZXI6IDJweCBzb2xpZCAjN2VhMTkzO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJvcmRlci1yYWRpdXM6IDFyZW07XFxuICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcXG4gIG1hcmdpbjogMCAxcmVtO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDYwMG1zO1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciA2MDBtczsgfVxcbiAgLmJ1dHRvbjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQ6ICM3ZWExOTM7IH1cXG4gIC5idXR0b24uYWRkIHtcXG4gICAgYmFja2dyb3VuZDogIzdlYTE5MztcXG4gICAgcGFkZGluZzogMCAwLjZyZW07XFxuICAgIG1hcmdpbjogMDtcXG4gICAgZm9udC1zaXplOiAzcmVtO1xcbiAgICBsaW5lLWhlaWdodDogMTtcXG4gICAgY29sb3I6IHdoaXRlOyB9XFxuXFxuYSB7XFxuICBjb2xvcjogIzQ4Nzc5NztcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbmRpdi52ZXgsIC52ZXgudmV4LXRoZW1lLWZsYXQtYXR0YWNrIC52ZXgtZGlhbG9nLWJ1dHRvbi52ZXgtZGlhbG9nLWJ1dHRvbiwgLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1jb250ZW50LnZleC1jb250ZW50IHtcXG4gIGZvbnQtZmFtaWx5OiBhbGVncmV5YSAhaW1wb3J0YW50OyB9XFxuXFxuLnZleC52ZXgtdGhlbWUtZmxhdC1hdHRhY2sgLnZleC1kaWFsb2ctYnV0dG9uLnZleC1kaWFsb2ctYnV0dG9uLXNlY29uZGFyeS52ZXgtZGlhbG9nLWJ1dHRvbi1zZWNvbmRhcnkge1xcbiAgY29sb3I6ICNmOGQ5Y2U7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWRpYWxvZy1idXR0b24udmV4LWRpYWxvZy1idXR0b24tcHJpbWFyeS52ZXgtZGlhbG9nLWJ1dHRvbi1wcmltYXJ5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0ODc3OTc7IH1cXG5cXG5pbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0ge1xcbiAgb3V0bGluZS1jb2xvcjogI2Y1ZTg5MztcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYm9yZGVyOiAycHggc29saWQgIzdlYTE5MztcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIGZvbnQtc2l6ZTogMS44cmVtO1xcbiAgbWFyZ2luOiAwLjhyZW0gMDtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuI3JzdnBOYW1lIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxcblxcbiNyc3ZwUmFkaW9zIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmctbGVmdDogMnJlbTtcXG4gIHRleHQtYWxpZ246IHJpZ2h0OyB9XFxuICAjcnN2cFJhZGlvcyBsYWJlbCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuI3JzdnBMaXN0IHtcXG4gIGNvbHVtbi1jb3VudDogMjtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XFxuICAjcnN2cExpc3QgbGkge1xcbiAgICBsaXN0LXN0eWxlLXBvc2l0aW9uOiBvdXRzaWRlO1xcbiAgICBsaXN0LXN0eWxlLXR5cGU6IGNpcmNsZTsgfVxcblxcbiNmYXEge1xcbiAgcGFkZGluZzogNnJlbTsgfVxcblxcbmRsIGR0IHtcXG4gIGxpbmUtaGVpZ2h0OiAyO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBwYWRkaW5nLXRvcDogMnJlbTtcXG4gIGZvbnQtc2l6ZTogMi40cmVtOyB9XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjbWFwV3JhcHBlciB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZzogOHJlbTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh3aGl0ZSwgI2JmZDJlYyA1MCUpOyB9XFxuXFxuI21hcCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNjAwcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxcblwiLCBcIlwiXSk7XG5cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC9cXG4gICB2Mi4wIHwgMjAxMTAxMjZcXG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxcbiovXFxuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcXG5hLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXFxuYiwgdSwgaSwgY2VudGVyLFxcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXFxudGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsXFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgYm9yZGVyOiAwO1xcbiAgZm9udC1zaXplOiAxMDAlO1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxcblxcbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbmJvZHkge1xcbiAgbGluZS1oZWlnaHQ6IDE7IH1cXG5cXG5vbCwgdWwge1xcbiAgbGlzdC1zdHlsZTogbm9uZTsgfVxcblxcbmJsb2NrcXVvdGUsIHEge1xcbiAgcXVvdGVzOiBub25lOyB9XFxuXFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICBjb250ZW50OiBub25lOyB9XFxuXFxudGFibGUge1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudmV4LnZleC10aGVtZS1mbGF0LWF0dGFjayAudmV4LWNvbnRlbnQge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IHZleC1mYWRlaW4gLjVzO1xcbiAgYW5pbWF0aW9uOiB2ZXgtZmFkZWluIC41czsgfVxcblxcbi52ZXgtb3ZlcmxheS52ZXgtY2xvc2luZyB7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogdmV4LWZhZGVvdXQgLjVzIGZvcndhcmRzO1xcbiAgYW5pbWF0aW9uOiB2ZXgtZmFkZW91dCAuNXMgZm9yd2FyZHM7IH1cXG5cXG4udmV4LnZleC10aGVtZS1mbGF0LWF0dGFjay52ZXgtY2xvc2luZyAudmV4LWNvbnRlbnQge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IHZleC1mYWRlb3V0IC41cyBmb3J3YXJkcztcXG4gIGFuaW1hdGlvbjogdmV4LWZhZGVvdXQgLjVzIGZvcndhcmRzOyB9XFxuXCIsIFwiXCJdKTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuICdAbWVkaWEgJyArIGl0ZW1bMl0gKyAneycgKyBjb250ZW50ICsgJ30nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9ICcoJyArIGl0ZW1bMl0gKyAnKSBhbmQgKCcgKyBtZWRpYVF1ZXJ5ICsgJyknO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuICByZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVzY2FwZSh1cmwsIG5lZWRRdW90ZXMpIHtcbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpIHx8IG5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gJ1wiJyArIHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpICsgJ1wiJztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLnZleERpYWxvZyA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfXJldHVybiBlfSkoKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGRlZXBjb3B5KHZhbHVlKSB7XG4gIGlmICghKCEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodmFsdWUuZ2V0VGltZSgpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGRlZXBjb3B5KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKFxuICAgIGZ1bmN0aW9uKGtleSkgeyByZXN1bHRba2V5XSA9IGRlZXBjb3B5KHZhbHVlW2tleV0pOyB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwY29weTtcblxufSx7fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cbi8qKlxuICogRXhwb3NlIGBwYXJzZWAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZTtcblxuLyoqXG4gKiBUZXN0cyBmb3IgYnJvd3NlciBzdXBwb3J0LlxuICovXG5cbnZhciBpbm5lckhUTUxCdWcgPSBmYWxzZTtcbnZhciBidWdUZXN0RGl2O1xuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgYnVnVGVzdERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAvLyBTZXR1cFxuICBidWdUZXN0RGl2LmlubmVySFRNTCA9ICcgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPVwiL2FcIj5hPC9hPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIi8+JztcbiAgLy8gTWFrZSBzdXJlIHRoYXQgbGluayBlbGVtZW50cyBnZXQgc2VyaWFsaXplZCBjb3JyZWN0bHkgYnkgaW5uZXJIVE1MXG4gIC8vIFRoaXMgcmVxdWlyZXMgYSB3cmFwcGVyIGVsZW1lbnQgaW4gSUVcbiAgaW5uZXJIVE1MQnVnID0gIWJ1Z1Rlc3REaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpbmsnKS5sZW5ndGg7XG4gIGJ1Z1Rlc3REaXYgPSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogV3JhcCBtYXAgZnJvbSBqcXVlcnkuXG4gKi9cblxudmFyIG1hcCA9IHtcbiAgbGVnZW5kOiBbMSwgJzxmaWVsZHNldD4nLCAnPC9maWVsZHNldD4nXSxcbiAgdHI6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuICBjb2w6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAvLyBmb3Igc2NyaXB0L2xpbmsvc3R5bGUgdGFncyB0byB3b3JrIGluIElFNi04LCB5b3UgaGF2ZSB0byB3cmFwXG4gIC8vIGluIGEgZGl2IHdpdGggYSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIgaW4gZnJvbnQsIGhhIVxuICBfZGVmYXVsdDogaW5uZXJIVE1MQnVnID8gWzEsICdYPGRpdj4nLCAnPC9kaXY+J10gOiBbMCwgJycsICcnXVxufTtcblxubWFwLnRkID1cbm1hcC50aCA9IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddO1xuXG5tYXAub3B0aW9uID1cbm1hcC5vcHRncm91cCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cIm11bHRpcGxlXCI+JywgJzwvc2VsZWN0PiddO1xuXG5tYXAudGhlYWQgPVxubWFwLnRib2R5ID1cbm1hcC5jb2xncm91cCA9XG5tYXAuY2FwdGlvbiA9XG5tYXAudGZvb3QgPSBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXTtcblxubWFwLnBvbHlsaW5lID1cbm1hcC5lbGxpcHNlID1cbm1hcC5wb2x5Z29uID1cbm1hcC5jaXJjbGUgPVxubWFwLnRleHQgPVxubWFwLmxpbmUgPVxubWFwLnBhdGggPVxubWFwLnJlY3QgPVxubWFwLmcgPSBbMSwgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxLjFcIj4nLCc8L3N2Zz4nXTtcblxuLyoqXG4gKiBQYXJzZSBgaHRtbGAgYW5kIHJldHVybiBhIERPTSBOb2RlIGluc3RhbmNlLCB3aGljaCBjb3VsZCBiZSBhIFRleHROb2RlLFxuICogSFRNTCBET00gTm9kZSBvZiBzb21lIGtpbmQgKDxkaXY+IGZvciBleGFtcGxlKSwgb3IgYSBEb2N1bWVudEZyYWdtZW50XG4gKiBpbnN0YW5jZSwgZGVwZW5kaW5nIG9uIHRoZSBjb250ZW50cyBvZiB0aGUgYGh0bWxgIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaHRtbCAtIEhUTUwgc3RyaW5nIHRvIFwiZG9taWZ5XCJcbiAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvYyAtIFRoZSBgZG9jdW1lbnRgIGluc3RhbmNlIHRvIGNyZWF0ZSB0aGUgTm9kZSBmb3JcbiAqIEByZXR1cm4ge0RPTU5vZGV9IHRoZSBUZXh0Tm9kZSwgRE9NIE5vZGUsIG9yIERvY3VtZW50RnJhZ21lbnQgaW5zdGFuY2VcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKGh0bWwsIGRvYykge1xuICBpZiAoJ3N0cmluZycgIT0gdHlwZW9mIGh0bWwpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1N0cmluZyBleHBlY3RlZCcpO1xuXG4gIC8vIGRlZmF1bHQgdG8gdGhlIGdsb2JhbCBgZG9jdW1lbnRgIG9iamVjdFxuICBpZiAoIWRvYykgZG9jID0gZG9jdW1lbnQ7XG5cbiAgLy8gdGFnIG5hbWVcbiAgdmFyIG0gPSAvPChbXFx3Ol0rKS8uZXhlYyhodG1sKTtcbiAgaWYgKCFtKSByZXR1cm4gZG9jLmNyZWF0ZVRleHROb2RlKGh0bWwpO1xuXG4gIGh0bWwgPSBodG1sLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTsgLy8gUmVtb3ZlIGxlYWRpbmcvdHJhaWxpbmcgd2hpdGVzcGFjZVxuXG4gIHZhciB0YWcgPSBtWzFdO1xuXG4gIC8vIGJvZHkgc3VwcG9ydFxuICBpZiAodGFnID09ICdib2R5Jykge1xuICAgIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KCdodG1sJyk7XG4gICAgZWwuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByZXR1cm4gZWwucmVtb3ZlQ2hpbGQoZWwubGFzdENoaWxkKTtcbiAgfVxuXG4gIC8vIHdyYXAgbWFwXG4gIHZhciB3cmFwID0gbWFwW3RhZ10gfHwgbWFwLl9kZWZhdWx0O1xuICB2YXIgZGVwdGggPSB3cmFwWzBdO1xuICB2YXIgcHJlZml4ID0gd3JhcFsxXTtcbiAgdmFyIHN1ZmZpeCA9IHdyYXBbMl07XG4gIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZWwuaW5uZXJIVE1MID0gcHJlZml4ICsgaHRtbCArIHN1ZmZpeDtcbiAgd2hpbGUgKGRlcHRoLS0pIGVsID0gZWwubGFzdENoaWxkO1xuXG4gIC8vIG9uZSBlbGVtZW50XG4gIGlmIChlbC5maXJzdENoaWxkID09IGVsLmxhc3RDaGlsZCkge1xuICAgIHJldHVybiBlbC5yZW1vdmVDaGlsZChlbC5maXJzdENoaWxkKTtcbiAgfVxuXG4gIC8vIHNldmVyYWwgZWxlbWVudHNcbiAgdmFyIGZyYWdtZW50ID0gZG9jLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgd2hpbGUgKGVsLmZpcnN0Q2hpbGQpIHtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChlbC5yZW1vdmVDaGlsZChlbC5maXJzdENoaWxkKSk7XG4gIH1cblxuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbn0se31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gZ2V0IHN1Y2Nlc3NmdWwgY29udHJvbCBmcm9tIGZvcm0gYW5kIGFzc2VtYmxlIGludG8gb2JqZWN0XG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNDAxL2ludGVyYWN0L2Zvcm1zLmh0bWwjaC0xNy4xMy4yXG5cbi8vIHR5cGVzIHdoaWNoIGluZGljYXRlIGEgc3VibWl0IGFjdGlvbiBhbmQgYXJlIG5vdCBzdWNjZXNzZnVsIGNvbnRyb2xzXG4vLyB0aGVzZSB3aWxsIGJlIGlnbm9yZWRcbnZhciBrX3Jfc3VibWl0dGVyID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pO1xuXG4vLyBub2RlIG5hbWVzIHdoaWNoIGNvdWxkIGJlIHN1Y2Nlc3NmdWwgY29udHJvbHNcbnZhciBrX3Jfc3VjY2Vzc19jb250cmxzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG4vLyBNYXRjaGVzIGJyYWNrZXQgbm90YXRpb24uXG52YXIgYnJhY2tldHMgPSAvKFxcW1teXFxbXFxdXSpcXF0pL2c7XG5cbi8vIHNlcmlhbGl6ZXMgZm9ybSBmaWVsZHNcbi8vIEBwYXJhbSBmb3JtIE1VU1QgYmUgYW4gSFRNTEZvcm0gZWxlbWVudFxuLy8gQHBhcmFtIG9wdGlvbnMgaXMgYW4gb3B0aW9uYWwgYXJndW1lbnQgdG8gY29uZmlndXJlIHRoZSBzZXJpYWxpemF0aW9uLiBEZWZhdWx0IG91dHB1dFxuLy8gd2l0aCBubyBvcHRpb25zIHNwZWNpZmllZCBpcyBhIHVybCBlbmNvZGVkIHN0cmluZ1xuLy8gICAgLSBoYXNoOiBbdHJ1ZSB8IGZhbHNlXSBDb25maWd1cmUgdGhlIG91dHB1dCB0eXBlLiBJZiB0cnVlLCB0aGUgb3V0cHV0IHdpbGxcbi8vICAgIGJlIGEganMgb2JqZWN0LlxuLy8gICAgLSBzZXJpYWxpemVyOiBbZnVuY3Rpb25dIE9wdGlvbmFsIHNlcmlhbGl6ZXIgZnVuY3Rpb24gdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb25lLlxuLy8gICAgVGhlIGZ1bmN0aW9uIHRha2VzIDMgYXJndW1lbnRzIChyZXN1bHQsIGtleSwgdmFsdWUpIGFuZCBzaG91bGQgcmV0dXJuIG5ldyByZXN1bHRcbi8vICAgIGhhc2ggYW5kIHVybCBlbmNvZGVkIHN0ciBzZXJpYWxpemVycyBhcmUgcHJvdmlkZWQgd2l0aCB0aGlzIG1vZHVsZVxuLy8gICAgLSBkaXNhYmxlZDogW3RydWUgfCBmYWxzZV0uIElmIHRydWUgc2VyaWFsaXplIGRpc2FibGVkIGZpZWxkcy5cbi8vICAgIC0gZW1wdHk6IFt0cnVlIHwgZmFsc2VdLiBJZiB0cnVlIHNlcmlhbGl6ZSBlbXB0eSBmaWVsZHNcbmZ1bmN0aW9uIHNlcmlhbGl6ZShmb3JtLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9ICdvYmplY3QnKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7IGhhc2g6ICEhb3B0aW9ucyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb25zLmhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvcHRpb25zLmhhc2ggPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSAob3B0aW9ucy5oYXNoKSA/IHt9IDogJyc7XG4gICAgdmFyIHNlcmlhbGl6ZXIgPSBvcHRpb25zLnNlcmlhbGl6ZXIgfHwgKChvcHRpb25zLmhhc2gpID8gaGFzaF9zZXJpYWxpemVyIDogc3RyX3NlcmlhbGl6ZSk7XG5cbiAgICB2YXIgZWxlbWVudHMgPSBmb3JtICYmIGZvcm0uZWxlbWVudHMgPyBmb3JtLmVsZW1lbnRzIDogW107XG5cbiAgICAvL09iamVjdCBzdG9yZSBlYWNoIHJhZGlvIGFuZCBzZXQgaWYgaXQncyBlbXB0eSBvciBub3RcbiAgICB2YXIgcmFkaW9fc3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yICh2YXIgaT0wIDsgaTxlbGVtZW50cy5sZW5ndGggOyArK2kpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcblxuICAgICAgICAvLyBpbmdvcmUgZGlzYWJsZWQgZmllbGRzXG4gICAgICAgIGlmICgoIW9wdGlvbnMuZGlzYWJsZWQgJiYgZWxlbWVudC5kaXNhYmxlZCkgfHwgIWVsZW1lbnQubmFtZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWdub3JlIGFueWh0aW5nIHRoYXQgaXMgbm90IGNvbnNpZGVyZWQgYSBzdWNjZXNzIGZpZWxkXG4gICAgICAgIGlmICgha19yX3N1Y2Nlc3NfY29udHJscy50ZXN0KGVsZW1lbnQubm9kZU5hbWUpIHx8XG4gICAgICAgICAgICBrX3Jfc3VibWl0dGVyLnRlc3QoZWxlbWVudC50eXBlKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5ID0gZWxlbWVudC5uYW1lO1xuICAgICAgICB2YXIgdmFsID0gZWxlbWVudC52YWx1ZTtcblxuICAgICAgICAvLyB3ZSBjYW4ndCBqdXN0IHVzZSBlbGVtZW50LnZhbHVlIGZvciBjaGVja2JveGVzIGNhdXNlIHNvbWUgYnJvd3NlcnMgbGllIHRvIHVzXG4gICAgICAgIC8vIHRoZXkgc2F5IFwib25cIiBmb3IgdmFsdWUgd2hlbiB0aGUgYm94IGlzbid0IGNoZWNrZWRcbiAgICAgICAgaWYgKChlbGVtZW50LnR5cGUgPT09ICdjaGVja2JveCcgfHwgZWxlbWVudC50eXBlID09PSAncmFkaW8nKSAmJiAhZWxlbWVudC5jaGVja2VkKSB7XG4gICAgICAgICAgICB2YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSB3YW50IGVtcHR5IGVsZW1lbnRzXG4gICAgICAgIGlmIChvcHRpb25zLmVtcHR5KSB7XG4gICAgICAgICAgICAvLyBmb3IgY2hlY2tib3hcbiAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT09ICdjaGVja2JveCcgJiYgIWVsZW1lbnQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHZhbCA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmb3IgcmFkaW9cbiAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJhZGlvX3N0b3JlW2VsZW1lbnQubmFtZV0gJiYgIWVsZW1lbnQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICByYWRpb19zdG9yZVtlbGVtZW50Lm5hbWVdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVsZW1lbnQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICByYWRpb19zdG9yZVtlbGVtZW50Lm5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIG9wdGlvbnMgZW1wdHkgaXMgdHJ1ZSwgY29udGludWUgb25seSBpZiBpdHMgcmFkaW9cbiAgICAgICAgICAgIGlmICghdmFsICYmIGVsZW1lbnQudHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB2YWx1ZS1sZXNzIGZpZWxkcyBhcmUgaWdub3JlZCB1bmxlc3Mgb3B0aW9ucy5lbXB0eSBpcyB0cnVlXG4gICAgICAgICAgICBpZiAoIXZhbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbXVsdGkgc2VsZWN0IGJveGVzXG4gICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT09ICdzZWxlY3QtbXVsdGlwbGUnKSB7XG4gICAgICAgICAgICB2YWwgPSBbXTtcblxuICAgICAgICAgICAgdmFyIHNlbGVjdE9wdGlvbnMgPSBlbGVtZW50Lm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgaXNTZWxlY3RlZE9wdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGo9MCA7IGo8c2VsZWN0T3B0aW9ucy5sZW5ndGggOyArK2opIHtcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gc2VsZWN0T3B0aW9uc1tqXTtcbiAgICAgICAgICAgICAgICB2YXIgYWxsb3dlZEVtcHR5ID0gb3B0aW9ucy5lbXB0eSAmJiAhb3B0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBoYXNWYWx1ZSA9IChvcHRpb24udmFsdWUgfHwgYWxsb3dlZEVtcHR5KTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICYmIGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWRPcHRpb25zID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB1c2luZyBhIGhhc2ggc2VyaWFsaXplciBiZSBzdXJlIHRvIGFkZCB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gY29ycmVjdCBub3RhdGlvbiBmb3IgYW4gYXJyYXkgaW4gdGhlIG11bHRpLXNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAvLyBjb250ZXh0LiBIZXJlIHRoZSBuYW1lIGF0dHJpYnV0ZSBvbiB0aGUgc2VsZWN0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gbWlnaHQgYmUgbWlzc2luZyB0aGUgdHJhaWxpbmcgYnJhY2tldCBwYWlyLiBCb3RoIG5hbWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIFwiZm9vXCIgYW5kIFwiZm9vW11cIiBzaG91bGQgYmUgYXJyYXlzLlxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNoICYmIGtleS5zbGljZShrZXkubGVuZ3RoIC0gMikgIT09ICdbXScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlcmlhbGl6ZXIocmVzdWx0LCBrZXkgKyAnW10nLCBvcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VyaWFsaXplcihyZXN1bHQsIGtleSwgb3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2VyaWFsaXplIGlmIG5vIHNlbGVjdGVkIG9wdGlvbnMgYW5kIG9wdGlvbnMuZW1wdHkgaXMgdHJ1ZVxuICAgICAgICAgICAgaWYgKCFpc1NlbGVjdGVkT3B0aW9ucyAmJiBvcHRpb25zLmVtcHR5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VyaWFsaXplcihyZXN1bHQsIGtleSwgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCA9IHNlcmlhbGl6ZXIocmVzdWx0LCBrZXksIHZhbCk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGFsbCBlbXB0eSByYWRpbyBidXR0b25zIGFuZCBzZXJpYWxpemUgdGhlbSB3aXRoIGtleT1cIlwiXG4gICAgaWYgKG9wdGlvbnMuZW1wdHkpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHJhZGlvX3N0b3JlKSB7XG4gICAgICAgICAgICBpZiAoIXJhZGlvX3N0b3JlW2tleV0pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzZXJpYWxpemVyKHJlc3VsdCwga2V5LCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBwYXJzZV9rZXlzKHN0cmluZykge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgdmFyIHByZWZpeCA9IC9eKFteXFxbXFxdXSopLztcbiAgICB2YXIgY2hpbGRyZW4gPSBuZXcgUmVnRXhwKGJyYWNrZXRzKTtcbiAgICB2YXIgbWF0Y2ggPSBwcmVmaXguZXhlYyhzdHJpbmcpO1xuXG4gICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgIGtleXMucHVzaChtYXRjaFsxXSk7XG4gICAgfVxuXG4gICAgd2hpbGUgKChtYXRjaCA9IGNoaWxkcmVuLmV4ZWMoc3RyaW5nKSkgIT09IG51bGwpIHtcbiAgICAgICAga2V5cy5wdXNoKG1hdGNoWzFdKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gaGFzaF9hc3NpZ24ocmVzdWx0LCBrZXlzLCB2YWx1ZSkge1xuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0ga2V5cy5zaGlmdCgpO1xuICAgIHZhciBiZXR3ZWVuID0ga2V5Lm1hdGNoKC9eXFxbKC4rPylcXF0kLyk7XG5cbiAgICBpZiAoa2V5ID09PSAnW10nKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCBbXTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChoYXNoX2Fzc2lnbihudWxsLCBrZXlzLCB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhpcyBtaWdodCBiZSB0aGUgcmVzdWx0IG9mIGJhZCBuYW1lIGF0dHJpYnV0ZXMgbGlrZSBcIltdW2Zvb11cIixcbiAgICAgICAgICAgIC8vIGluIHRoaXMgY2FzZSB0aGUgb3JpZ2luYWwgYHJlc3VsdGAgb2JqZWN0IHdpbGwgYWxyZWFkeSBiZVxuICAgICAgICAgICAgLy8gYXNzaWduZWQgdG8gYW4gb2JqZWN0IGxpdGVyYWwuIFJhdGhlciB0aGFuIGNvZXJjZSB0aGUgb2JqZWN0IHRvXG4gICAgICAgICAgICAvLyBhbiBhcnJheSwgb3IgY2F1c2UgYW4gZXhjZXB0aW9uIHRoZSBhdHRyaWJ1dGUgXCJfdmFsdWVzXCIgaXNcbiAgICAgICAgICAgIC8vIGFzc2lnbmVkIGFzIGFuIGFycmF5LlxuICAgICAgICAgICAgcmVzdWx0Ll92YWx1ZXMgPSByZXN1bHQuX3ZhbHVlcyB8fCBbXTtcbiAgICAgICAgICAgIHJlc3VsdC5fdmFsdWVzLnB1c2goaGFzaF9hc3NpZ24obnVsbCwga2V5cywgdmFsdWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gS2V5IGlzIGFuIGF0dHJpYnV0ZSBuYW1lIGFuZCBjYW4gYmUgYXNzaWduZWQgZGlyZWN0bHkuXG4gICAgaWYgKCFiZXR3ZWVuKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gaGFzaF9hc3NpZ24ocmVzdWx0W2tleV0sIGtleXMsIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBzdHJpbmcgPSBiZXR3ZWVuWzFdO1xuICAgICAgICAvLyArdmFyIGNvbnZlcnRzIHRoZSB2YXJpYWJsZSBpbnRvIGEgbnVtYmVyXG4gICAgICAgIC8vIGJldHRlciB0aGFuIHBhcnNlSW50IGJlY2F1c2UgaXQgZG9lc24ndCB0cnVuY2F0ZSBhd2F5IHRyYWlsaW5nXG4gICAgICAgIC8vIGxldHRlcnMgYW5kIGFjdHVhbGx5IGZhaWxzIGlmIHdob2xlIHRoaW5nIGlzIG5vdCBhIG51bWJlclxuICAgICAgICB2YXIgaW5kZXggPSArc3RyaW5nO1xuXG4gICAgICAgIC8vIElmIHRoZSBjaGFyYWN0ZXJzIGJldHdlZW4gdGhlIGJyYWNrZXRzIGlzIG5vdCBhIG51bWJlciBpdCBpcyBhblxuICAgICAgICAvLyBhdHRyaWJ1dGUgbmFtZSBhbmQgY2FuIGJlIGFzc2lnbmVkIGRpcmVjdGx5LlxuICAgICAgICBpZiAoaXNOYU4oaW5kZXgpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwge307XG4gICAgICAgICAgICByZXN1bHRbc3RyaW5nXSA9IGhhc2hfYXNzaWduKHJlc3VsdFtzdHJpbmddLCBrZXlzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgW107XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gaGFzaF9hc3NpZ24ocmVzdWx0W2luZGV4XSwga2V5cywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gT2JqZWN0L2hhc2ggZW5jb2Rpbmcgc2VyaWFsaXplci5cbmZ1bmN0aW9uIGhhc2hfc2VyaWFsaXplcihyZXN1bHQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgbWF0Y2hlcyA9IGtleS5tYXRjaChicmFja2V0cyk7XG5cbiAgICAvLyBIYXMgYnJhY2tldHM/IFVzZSB0aGUgcmVjdXJzaXZlIGFzc2lnbm1lbnQgZnVuY3Rpb24gdG8gd2FsayB0aGUga2V5cyxcbiAgICAvLyBjb25zdHJ1Y3QgYW55IG1pc3Npbmcgb2JqZWN0cyBpbiB0aGUgcmVzdWx0IHRyZWUgYW5kIG1ha2UgdGhlIGFzc2lnbm1lbnRcbiAgICAvLyBhdCB0aGUgZW5kIG9mIHRoZSBjaGFpbi5cbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICB2YXIga2V5cyA9IHBhcnNlX2tleXMoa2V5KTtcbiAgICAgICAgaGFzaF9hc3NpZ24ocmVzdWx0LCBrZXlzLCB2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBOb24gYnJhY2tldCBub3RhdGlvbiBjYW4gbWFrZSBhc3NpZ25tZW50cyBkaXJlY3RseS5cbiAgICAgICAgdmFyIGV4aXN0aW5nID0gcmVzdWx0W2tleV07XG5cbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGhhcyBiZWVuIGFzc2lnbmVkIGFscmVhZHkgKGZvciBpbnN0YW5jZSB3aGVuIGEgcmFkaW8gYW5kXG4gICAgICAgIC8vIGEgY2hlY2tib3ggaGF2ZSB0aGUgc2FtZSBuYW1lIGF0dHJpYnV0ZSkgY29udmVydCB0aGUgcHJldmlvdXMgdmFsdWVcbiAgICAgICAgLy8gaW50byBhbiBhcnJheSBiZWZvcmUgcHVzaGluZyBpbnRvIGl0LlxuICAgICAgICAvL1xuICAgICAgICAvLyBOT1RFOiBJZiB0aGlzIHJlcXVpcmVtZW50IHdlcmUgcmVtb3ZlZCBhbGwgaGFzaCBjcmVhdGlvbiBhbmRcbiAgICAgICAgLy8gYXNzaWdubWVudCBjb3VsZCBnbyB0aHJvdWdoIGBoYXNoX2Fzc2lnbmAuXG4gICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGV4aXN0aW5nKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gWyBleGlzdGluZyBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyB1cmxmb3JtIGVuY29kaW5nIHNlcmlhbGl6ZXJcbmZ1bmN0aW9uIHN0cl9zZXJpYWxpemUocmVzdWx0LCBrZXksIHZhbHVlKSB7XG4gICAgLy8gZW5jb2RlIG5ld2xpbmVzIGFzIFxcclxcbiBjYXVzZSB0aGUgaHRtbCBzcGVjIHNheXMgc29cbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLyhcXHIpP1xcbi9nLCAnXFxyXFxuJyk7XG4gICAgdmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuXG4gICAgLy8gc3BhY2VzIHNob3VsZCBiZSAnKycgcmF0aGVyIHRoYW4gJyUyMCcuXG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8lMjAvZywgJysnKTtcbiAgICByZXR1cm4gcmVzdWx0ICsgKHJlc3VsdCA/ICcmJyA6ICcnKSArIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2VyaWFsaXplO1xuXG59LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBkb21pZnkgPSByZXF1aXJlKCdkb21pZnknKVxyXG52YXIgc2VyaWFsaXplID0gcmVxdWlyZSgnZm9ybS1zZXJpYWxpemUnKVxyXG52YXIgY2xvbmVEZWVwID0gcmVxdWlyZSgnZGVlcC1jbG9uZS1zaW1wbGUnKVxyXG5cclxuLy8gQnVpbGQgRE9NIGVsZW1lbnRzIGZvciB0aGUgc3RydWN0dXJlIG9mIHRoZSBkaWFsb2dcclxudmFyIGJ1aWxkRGlhbG9nRm9ybSA9IGZ1bmN0aW9uIGJ1aWxkRGlhbG9nRm9ybSAob3B0aW9ucykge1xyXG4gIHZhciBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpXHJcbiAgZm9ybS5jbGFzc0xpc3QuYWRkKCd2ZXgtZGlhbG9nLWZvcm0nKVxyXG5cclxuICB2YXIgbWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgbWVzc2FnZS5jbGFzc0xpc3QuYWRkKCd2ZXgtZGlhbG9nLW1lc3NhZ2UnKVxyXG4gIG1lc3NhZ2UuYXBwZW5kQ2hpbGQob3B0aW9ucy5tZXNzYWdlIGluc3RhbmNlb2Ygd2luZG93Lk5vZGUgPyBvcHRpb25zLm1lc3NhZ2UgOiBkb21pZnkob3B0aW9ucy5tZXNzYWdlKSlcclxuXHJcbiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICBpbnB1dC5jbGFzc0xpc3QuYWRkKCd2ZXgtZGlhbG9nLWlucHV0JylcclxuICBpbnB1dC5hcHBlbmRDaGlsZChvcHRpb25zLmlucHV0IGluc3RhbmNlb2Ygd2luZG93Lk5vZGUgPyBvcHRpb25zLmlucHV0IDogZG9taWZ5KG9wdGlvbnMuaW5wdXQpKVxyXG5cclxuICBmb3JtLmFwcGVuZENoaWxkKG1lc3NhZ2UpXHJcbiAgZm9ybS5hcHBlbmRDaGlsZChpbnB1dClcclxuXHJcbiAgcmV0dXJuIGZvcm1cclxufVxyXG5cclxuLy8gVGFrZSBhbiBhcnJheSBvZiBidXR0b25zIChzZWUgdGhlIGRlZmF1bHQgYnV0dG9ucyBiZWxvdykgYW5kIHR1cm4gdGhlbSBpbnRvIERPTSBlbGVtZW50c1xyXG52YXIgYnV0dG9uc1RvRE9NID0gZnVuY3Rpb24gYnV0dG9uc1RvRE9NIChidXR0b25zKSB7XHJcbiAgdmFyIGRvbUJ1dHRvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gIGRvbUJ1dHRvbnMuY2xhc3NMaXN0LmFkZCgndmV4LWRpYWxvZy1idXR0b25zJylcclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBidXR0b25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgYnV0dG9uID0gYnV0dG9uc1tpXVxyXG4gICAgdmFyIGRvbUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXHJcbiAgICBkb21CdXR0b24udHlwZSA9IGJ1dHRvbi50eXBlXHJcbiAgICBkb21CdXR0b24udGV4dENvbnRlbnQgPSBidXR0b24udGV4dFxyXG4gICAgZG9tQnV0dG9uLmNsYXNzTmFtZSA9IGJ1dHRvbi5jbGFzc05hbWVcclxuICAgIGRvbUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd2ZXgtZGlhbG9nLWJ1dHRvbicpXHJcbiAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICBkb21CdXR0b24uY2xhc3NMaXN0LmFkZCgndmV4LWZpcnN0JylcclxuICAgIH0gZWxzZSBpZiAoaSA9PT0gYnV0dG9ucy5sZW5ndGggLSAxKSB7XHJcbiAgICAgIGRvbUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd2ZXgtbGFzdCcpXHJcbiAgICB9XHJcbiAgICAvLyBBdHRhY2ggY2xpY2sgbGlzdGVuZXIgdG8gYnV0dG9uIHdpdGggY2xvc3VyZVxyXG4gICAgKGZ1bmN0aW9uIChidXR0b24pIHtcclxuICAgICAgZG9tQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoYnV0dG9uLmNsaWNrKSB7XHJcbiAgICAgICAgICBidXR0b24uY2xpY2suY2FsbCh0aGlzLCBlKVxyXG4gICAgICAgIH1cclxuICAgICAgfS5iaW5kKHRoaXMpKVxyXG4gICAgfS5iaW5kKHRoaXMpKGJ1dHRvbikpXHJcblxyXG4gICAgZG9tQnV0dG9ucy5hcHBlbmRDaGlsZChkb21CdXR0b24pXHJcbiAgfVxyXG5cclxuICByZXR1cm4gZG9tQnV0dG9uc1xyXG59XHJcblxyXG52YXIgcGx1Z2luID0gZnVuY3Rpb24gcGx1Z2luICh2ZXgpIHtcclxuICAvLyBEZWZpbmUgdGhlIEFQSSBmaXJzdFxyXG4gIHZhciBkaWFsb2cgPSB7XHJcbiAgICAvLyBQbHVnaW4gbmFtZVxyXG4gICAgbmFtZTogJ2RpYWxvZycsXHJcblxyXG4gICAgLy8gT3BlblxyXG4gICAgb3BlbjogZnVuY3Rpb24gb3BlbiAob3B0cykge1xyXG4gICAgICB2YXIgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGNsb25lRGVlcCh0aGlzLmRlZmF1bHRPcHRpb25zKSwgb3B0cylcclxuXHJcbiAgICAgIC8vIGBtZXNzYWdlYCBpcyB1bnNhZmUgaW50ZXJuYWxseSwgc28gdHJhbnNsYXRlXHJcbiAgICAgIC8vIHNhZmUgZGVmYXVsdDogSFRNTC1lc2NhcGUgdGhlIG1lc3NhZ2UgYmVmb3JlIHBhc3NpbmcgaXQgdGhyb3VnaFxyXG4gICAgICBpZiAob3B0aW9ucy51bnNhZmVNZXNzYWdlICYmICFvcHRpb25zLm1lc3NhZ2UpIHtcclxuICAgICAgICBvcHRpb25zLm1lc3NhZ2UgPSBvcHRpb25zLnVuc2FmZU1lc3NhZ2VcclxuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcclxuICAgICAgICBvcHRpb25zLm1lc3NhZ2UgPSB2ZXguX2VzY2FwZUh0bWwob3B0aW9ucy5tZXNzYWdlKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBCdWlsZCB0aGUgZm9ybSBmcm9tIHRoZSBvcHRpb25zXHJcbiAgICAgIHZhciBmb3JtID0gb3B0aW9ucy51bnNhZmVDb250ZW50ID0gYnVpbGREaWFsb2dGb3JtKG9wdGlvbnMpXHJcblxyXG4gICAgICAvLyBPcGVuIHRoZSBkaWFsb2dcclxuICAgICAgdmFyIGRpYWxvZ0luc3RhbmNlID0gdmV4Lm9wZW4ob3B0aW9ucylcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLnllc1RleHQgIT09ICcnKSB7XHJcbiAgICAgICAgb3B0aW9ucy5idXR0b25zWzBdLnRleHQgPSBvcHRpb25zLnllc1RleHRcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMubm9UZXh0ICE9PSAnJykge1xyXG4gICAgICAgIG9wdGlvbnMuYnV0dG9uc1sxXS50ZXh0ID0gb3B0aW9ucy5ub1RleHRcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUXVpY2sgY29tbWVudCAtIHRoZXNlIG9wdGlvbnMgYW5kIGFwcGVuZGluZyBidXR0b25zIGFuZCBldmVyeXRoaW5nXHJcbiAgICAgIC8vIHdvdWxkIHByZWZlcmFibHkgYmUgZG9uZSBfYmVmb3JlXyBvcGVuaW5nIHRoZSBkaWFsb2cuIEhvd2V2ZXIsIHNpbmNlXHJcbiAgICAgIC8vIHRoZXkgcmVseSBvbiB0aGUgY29udGV4dCBvZiB0aGUgdmV4IGluc3RhbmNlLCB3ZSBoYXZlIHRvIGRvIHRoZW1cclxuICAgICAgLy8gYWZ0ZXIuIEEgcG90ZW50aWFsIGZ1dHVyZSBmaXggd291bGQgYmUgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuXHJcbiAgICAgIC8vIGEgXCJjcmVhdGVkXCIgdmV4IGluc3RhbmNlIGFuZCBhbiBcIm9wZW5lZFwiIHZleCBpbnN0YW5jZSwgc28gYW55IGFjdGlvbnNcclxuICAgICAgLy8gdGhhdCByZWx5IG9uIHRoZSBzcGVjaWZpYyBjb250ZXh0IG9mIHRoZSBpbnN0YW5jZSBjYW4gZG8gdGhlaXIgc3R1ZmZcclxuICAgICAgLy8gYmVmb3JlIG9wZW5pbmcgdGhlIGRpYWxvZyBvbiB0aGUgcGFnZS5cclxuXHJcbiAgICAgIC8vIE92ZXJyaWRlIHRoZSBiZWZvcmUgY2xvc2UgY2FsbGJhY2sgdG8gYWxzbyBwYXNzIHRoZSB2YWx1ZSBvZiB0aGUgZm9ybVxyXG4gICAgICB2YXIgYmVmb3JlQ2xvc2UgPSBvcHRpb25zLmJlZm9yZUNsb3NlICYmIG9wdGlvbnMuYmVmb3JlQ2xvc2UuYmluZChkaWFsb2dJbnN0YW5jZSlcclxuICAgICAgZGlhbG9nSW5zdGFuY2Uub3B0aW9ucy5iZWZvcmVDbG9zZSA9IGZ1bmN0aW9uIGRpYWxvZ0JlZm9yZUNsb3NlICgpIHtcclxuICAgICAgICAvLyBPbmx5IGNhbGwgdGhlIGNhbGxiYWNrIG9uY2UgLSB3aGVuIHRoZSB2YWxpZGF0aW9uIGluIGJlZm9yZUNsb3NlLCBpZiBwcmVzZW50LCBpcyB0cnVlXHJcbiAgICAgICAgdmFyIHNob3VsZENsb3NlID0gYmVmb3JlQ2xvc2UgPyBiZWZvcmVDbG9zZSgpIDogdHJ1ZVxyXG4gICAgICAgIGlmIChzaG91bGRDbG9zZSkge1xyXG4gICAgICAgICAgb3B0aW9ucy5jYWxsYmFjayh0aGlzLnZhbHVlIHx8IGZhbHNlKVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZXR1cm4gdGhlIHJlc3VsdCBvZiBiZWZvcmVDbG9zZSgpIHRvIHZleFxyXG4gICAgICAgIHJldHVybiBzaG91bGRDbG9zZVxyXG4gICAgICB9LmJpbmQoZGlhbG9nSW5zdGFuY2UpXHJcblxyXG4gICAgICAvLyBBcHBlbmQgYnV0dG9ucyB0byBmb3JtIHdpdGggY29ycmVjdCBjb250ZXh0XHJcbiAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoYnV0dG9uc1RvRE9NLmNhbGwoZGlhbG9nSW5zdGFuY2UsIG9wdGlvbnMuYnV0dG9ucykpXHJcblxyXG4gICAgICAvLyBBdHRhY2ggZm9ybSB0byBpbnN0YW5jZVxyXG4gICAgICBkaWFsb2dJbnN0YW5jZS5mb3JtID0gZm9ybVxyXG5cclxuICAgICAgLy8gQWRkIHN1Ym1pdCBsaXN0ZW5lciB0byBmb3JtXHJcbiAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0Jywgb3B0aW9ucy5vblN1Ym1pdC5iaW5kKGRpYWxvZ0luc3RhbmNlKSlcclxuXHJcbiAgICAgIC8vIE9wdGlvbmFsbHkgZm9jdXMgdGhlIGZpcnN0IGlucHV0IGluIHRoZSBmb3JtXHJcbiAgICAgIGlmIChvcHRpb25zLmZvY3VzRmlyc3RJbnB1dCkge1xyXG4gICAgICAgIHZhciBlbCA9IGRpYWxvZ0luc3RhbmNlLmNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yKCdidXR0b24sIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhJylcclxuICAgICAgICBpZiAoZWwpIHtcclxuICAgICAgICAgIGVsLmZvY3VzKClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZvciBjaGFpbmluZ1xyXG4gICAgICByZXR1cm4gZGlhbG9nSW5zdGFuY2VcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQWxlcnRcclxuICAgIGFsZXJ0OiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAvLyBBbGxvdyBzdHJpbmcgYXMgbWVzc2FnZVxyXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IHtcclxuICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnNcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGNsb25lRGVlcCh0aGlzLmRlZmF1bHRPcHRpb25zKSwgY2xvbmVEZWVwKHRoaXMuZGVmYXVsdEFsZXJ0T3B0aW9ucyksIG9wdGlvbnMpXHJcbiAgICAgIHJldHVybiB0aGlzLm9wZW4ob3B0aW9ucylcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ29uZmlybVxyXG4gICAgY29uZmlybTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0aW9ucy5jYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGlhbG9nLmNvbmZpcm0ob3B0aW9ucykgcmVxdWlyZXMgb3B0aW9ucy5jYWxsYmFjay4nKVxyXG4gICAgICB9XHJcbiAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBjbG9uZURlZXAodGhpcy5kZWZhdWx0T3B0aW9ucyksIGNsb25lRGVlcCh0aGlzLmRlZmF1bHRDb25maXJtT3B0aW9ucyksIG9wdGlvbnMpXHJcbiAgICAgIHJldHVybiB0aGlzLm9wZW4ob3B0aW9ucylcclxuICAgIH0sXHJcblxyXG4gICAgLy8gUHJvbXB0XHJcbiAgICBwcm9tcHQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9wdGlvbnMuY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpYWxvZy5wcm9tcHQob3B0aW9ucykgcmVxdWlyZXMgb3B0aW9ucy5jYWxsYmFjay4nKVxyXG4gICAgICB9XHJcbiAgICAgIHZhciBkZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oe30sIGNsb25lRGVlcCh0aGlzLmRlZmF1bHRPcHRpb25zKSwgY2xvbmVEZWVwKHRoaXMuZGVmYXVsdFByb21wdE9wdGlvbnMpKVxyXG4gICAgICB2YXIgZHluYW1pY0RlZmF1bHRzID0ge1xyXG4gICAgICAgIHVuc2FmZU1lc3NhZ2U6ICc8bGFiZWwgZm9yPVwidmV4XCI+JyArIHZleC5fZXNjYXBlSHRtbChvcHRpb25zLmxhYmVsIHx8IGRlZmF1bHRzLmxhYmVsKSArICc8L2xhYmVsPicsXHJcbiAgICAgICAgaW5wdXQ6ICc8aW5wdXQgbmFtZT1cInZleFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJ2ZXgtZGlhbG9nLXByb21wdC1pbnB1dFwiIHBsYWNlaG9sZGVyPVwiJyArIHZleC5fZXNjYXBlSHRtbChvcHRpb25zLnBsYWNlaG9sZGVyIHx8IGRlZmF1bHRzLnBsYWNlaG9sZGVyKSArICdcIiB2YWx1ZT1cIicgKyB2ZXguX2VzY2FwZUh0bWwob3B0aW9ucy52YWx1ZSB8fCBkZWZhdWx0cy52YWx1ZSkgKyAnXCIgLz4nXHJcbiAgICAgIH1cclxuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIGR5bmFtaWNEZWZhdWx0cywgb3B0aW9ucylcclxuICAgICAgLy8gUGx1Y2sgdGhlIHZhbHVlIG9mIHRoZSBcInZleFwiIGlucHV0IGZpZWxkIGFzIHRoZSByZXR1cm4gdmFsdWUgZm9yIHByb21wdCdzIGNhbGxiYWNrXHJcbiAgICAgIC8vIE1vcmUgY2xvc2VseSBtaW1pY3MgXCJ3aW5kb3cucHJvbXB0XCIgaW4gdGhhdCBhIHNpbmdsZSBzdHJpbmcgaXMgcmV0dXJuZWRcclxuICAgICAgdmFyIGNhbGxiYWNrID0gb3B0aW9ucy5jYWxsYmFja1xyXG4gICAgICBvcHRpb25zLmNhbGxiYWNrID0gZnVuY3Rpb24gcHJvbXB0Q2FsbGJhY2sgKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpXHJcbiAgICAgICAgICB2YWx1ZSA9IGtleXMubGVuZ3RoID8gdmFsdWVba2V5c1swXV0gOiAnJ1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsYmFjayh2YWx1ZSlcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5vcGVuKG9wdGlvbnMpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBOb3cgZGVmaW5lIGFueSBhZGRpdGlvbmFsIGRhdGEgdGhhdCdzIG5vdCB0aGUgZGlyZWN0IGRpYWxvZyBBUElcclxuICBkaWFsb2cuYnV0dG9ucyA9IHtcclxuICAgIFlFUzoge1xyXG4gICAgICB0ZXh0OiAnT0snLFxyXG4gICAgICB0eXBlOiAnc3VibWl0JyxcclxuICAgICAgY2xhc3NOYW1lOiAndmV4LWRpYWxvZy1idXR0b24tcHJpbWFyeScsXHJcbiAgICAgIGNsaWNrOiBmdW5jdGlvbiB5ZXNDbGljayAoKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRydWVcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBOTzoge1xyXG4gICAgICB0ZXh0OiAnQ2FuY2VsJyxcclxuICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgIGNsYXNzTmFtZTogJ3ZleC1kaWFsb2ctYnV0dG9uLXNlY29uZGFyeScsXHJcbiAgICAgIGNsaWNrOiBmdW5jdGlvbiBub0NsaWNrICgpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gZmFsc2VcclxuICAgICAgICB0aGlzLmNsb3NlKClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlhbG9nLmRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgYWZ0ZXJPcGVuOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgaW5wdXQ6ICcnLFxyXG4gICAgeWVzVGV4dDogJycsXHJcbiAgICBub1RleHQ6ICcnLFxyXG4gICAgYnV0dG9uczogW1xyXG4gICAgICBkaWFsb2cuYnV0dG9ucy5ZRVMsXHJcbiAgICAgIGRpYWxvZy5idXR0b25zLk5PXHJcbiAgICBdLFxyXG4gICAgc2hvd0Nsb3NlQnV0dG9uOiBmYWxzZSxcclxuICAgIG9uU3VibWl0OiBmdW5jdGlvbiBvbkRpYWxvZ1N1Ym1pdCAoZSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbnB1dCkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBzZXJpYWxpemUodGhpcy5mb3JtLCB7IGhhc2g6IHRydWUgfSlcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5jbG9zZSgpXHJcbiAgICB9LFxyXG4gICAgZm9jdXNGaXJzdElucHV0OiB0cnVlXHJcbiAgfVxyXG5cclxuICBkaWFsb2cuZGVmYXVsdEFsZXJ0T3B0aW9ucyA9IHtcclxuICAgIGJ1dHRvbnM6IFtcclxuICAgICAgZGlhbG9nLmJ1dHRvbnMuWUVTXHJcbiAgICBdXHJcbiAgfVxyXG5cclxuICBkaWFsb2cuZGVmYXVsdFByb21wdE9wdGlvbnMgPSB7XHJcbiAgICBsYWJlbDogJ1Byb21wdDonLFxyXG4gICAgcGxhY2Vob2xkZXI6ICcnLFxyXG4gICAgdmFsdWU6ICcnXHJcbiAgfVxyXG5cclxuICBkaWFsb2cuZGVmYXVsdENvbmZpcm1PcHRpb25zID0ge31cclxuXHJcbiAgcmV0dXJuIGRpYWxvZ1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHBsdWdpblxyXG5cbn0se1wiZGVlcC1jbG9uZS1zaW1wbGVcIjoxLFwiZG9taWZ5XCI6MixcImZvcm0tc2VyaWFsaXplXCI6M31dfSx7fSxbNF0pKDQpXG59KTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vdmV4LXRoZW1lLWZsYXQtYXR0YWNrLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi92ZXgtdGhlbWUtZmxhdC1hdHRhY2suY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vdmV4LXRoZW1lLWZsYXQtYXR0YWNrLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi92ZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3ZleC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi92ZXguY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcudmV4ID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9cmV0dXJuIGV9KSgpKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBjbGFzc0xpc3QuanM6IENyb3NzLWJyb3dzZXIgZnVsbCBlbGVtZW50LmNsYXNzTGlzdCBpbXBsZW1lbnRhdGlvbi5cbiAqIDEuMS4yMDE3MDQyN1xuICpcbiAqIEJ5IEVsaSBHcmV5LCBodHRwOi8vZWxpZ3JleS5jb21cbiAqIExpY2Vuc2U6IERlZGljYXRlZCB0byB0aGUgcHVibGljIGRvbWFpbi5cbiAqICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGlncmV5L2NsYXNzTGlzdC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cblxuLypnbG9iYWwgc2VsZiwgZG9jdW1lbnQsIERPTUV4Y2VwdGlvbiAqL1xuXG4vKiEgQHNvdXJjZSBodHRwOi8vcHVybC5lbGlncmV5LmNvbS9naXRodWIvY2xhc3NMaXN0LmpzL2Jsb2IvbWFzdGVyL2NsYXNzTGlzdC5qcyAqL1xuXG5pZiAoXCJkb2N1bWVudFwiIGluIHdpbmRvdy5zZWxmKSB7XG5cbi8vIEZ1bGwgcG9seWZpbGwgZm9yIGJyb3dzZXJzIHdpdGggbm8gY2xhc3NMaXN0IHN1cHBvcnRcbi8vIEluY2x1ZGluZyBJRSA8IEVkZ2UgbWlzc2luZyBTVkdFbGVtZW50LmNsYXNzTGlzdFxuaWYgKCEoXCJjbGFzc0xpc3RcIiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiX1wiKSkgXG5cdHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyAmJiAhKFwiY2xhc3NMaXN0XCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcImdcIikpKSB7XG5cbihmdW5jdGlvbiAodmlldykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKCEoJ0VsZW1lbnQnIGluIHZpZXcpKSByZXR1cm47XG5cbnZhclxuXHQgIGNsYXNzTGlzdFByb3AgPSBcImNsYXNzTGlzdFwiXG5cdCwgcHJvdG9Qcm9wID0gXCJwcm90b3R5cGVcIlxuXHQsIGVsZW1DdHJQcm90byA9IHZpZXcuRWxlbWVudFtwcm90b1Byb3BdXG5cdCwgb2JqQ3RyID0gT2JqZWN0XG5cdCwgc3RyVHJpbSA9IFN0cmluZ1twcm90b1Byb3BdLnRyaW0gfHwgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpO1xuXHR9XG5cdCwgYXJySW5kZXhPZiA9IEFycmF5W3Byb3RvUHJvcF0uaW5kZXhPZiB8fCBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdHZhclxuXHRcdFx0ICBpID0gMFxuXHRcdFx0LCBsZW4gPSB0aGlzLmxlbmd0aFxuXHRcdDtcblx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fVxuXHQvLyBWZW5kb3JzOiBwbGVhc2UgYWxsb3cgY29udGVudCBjb2RlIHRvIGluc3RhbnRpYXRlIERPTUV4Y2VwdGlvbnNcblx0LCBET01FeCA9IGZ1bmN0aW9uICh0eXBlLCBtZXNzYWdlKSB7XG5cdFx0dGhpcy5uYW1lID0gdHlwZTtcblx0XHR0aGlzLmNvZGUgPSBET01FeGNlcHRpb25bdHlwZV07XG5cdFx0dGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcblx0fVxuXHQsIGNoZWNrVG9rZW5BbmRHZXRJbmRleCA9IGZ1bmN0aW9uIChjbGFzc0xpc3QsIHRva2VuKSB7XG5cdFx0aWYgKHRva2VuID09PSBcIlwiKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXgoXG5cdFx0XHRcdCAgXCJTWU5UQVhfRVJSXCJcblx0XHRcdFx0LCBcIkFuIGludmFsaWQgb3IgaWxsZWdhbCBzdHJpbmcgd2FzIHNwZWNpZmllZFwiXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRpZiAoL1xccy8udGVzdCh0b2tlbikpIHtcblx0XHRcdHRocm93IG5ldyBET01FeChcblx0XHRcdFx0ICBcIklOVkFMSURfQ0hBUkFDVEVSX0VSUlwiXG5cdFx0XHRcdCwgXCJTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXJcIlxuXHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGFyckluZGV4T2YuY2FsbChjbGFzc0xpc3QsIHRva2VuKTtcblx0fVxuXHQsIENsYXNzTGlzdCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0dmFyXG5cdFx0XHQgIHRyaW1tZWRDbGFzc2VzID0gc3RyVHJpbS5jYWxsKGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIilcblx0XHRcdCwgY2xhc3NlcyA9IHRyaW1tZWRDbGFzc2VzID8gdHJpbW1lZENsYXNzZXMuc3BsaXQoL1xccysvKSA6IFtdXG5cdFx0XHQsIGkgPSAwXG5cdFx0XHQsIGxlbiA9IGNsYXNzZXMubGVuZ3RoXG5cdFx0O1xuXHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdHRoaXMucHVzaChjbGFzc2VzW2ldKTtcblx0XHR9XG5cdFx0dGhpcy5fdXBkYXRlQ2xhc3NOYW1lID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLnRvU3RyaW5nKCkpO1xuXHRcdH07XG5cdH1cblx0LCBjbGFzc0xpc3RQcm90byA9IENsYXNzTGlzdFtwcm90b1Byb3BdID0gW11cblx0LCBjbGFzc0xpc3RHZXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIG5ldyBDbGFzc0xpc3QodGhpcyk7XG5cdH1cbjtcbi8vIE1vc3QgRE9NRXhjZXB0aW9uIGltcGxlbWVudGF0aW9ucyBkb24ndCBhbGxvdyBjYWxsaW5nIERPTUV4Y2VwdGlvbidzIHRvU3RyaW5nKClcbi8vIG9uIG5vbi1ET01FeGNlcHRpb25zLiBFcnJvcidzIHRvU3RyaW5nKCkgaXMgc3VmZmljaWVudCBoZXJlLlxuRE9NRXhbcHJvdG9Qcm9wXSA9IEVycm9yW3Byb3RvUHJvcF07XG5jbGFzc0xpc3RQcm90by5pdGVtID0gZnVuY3Rpb24gKGkpIHtcblx0cmV0dXJuIHRoaXNbaV0gfHwgbnVsbDtcbn07XG5jbGFzc0xpc3RQcm90by5jb250YWlucyA9IGZ1bmN0aW9uICh0b2tlbikge1xuXHR0b2tlbiArPSBcIlwiO1xuXHRyZXR1cm4gY2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuKSAhPT0gLTE7XG59O1xuY2xhc3NMaXN0UHJvdG8uYWRkID0gZnVuY3Rpb24gKCkge1xuXHR2YXJcblx0XHQgIHRva2VucyA9IGFyZ3VtZW50c1xuXHRcdCwgaSA9IDBcblx0XHQsIGwgPSB0b2tlbnMubGVuZ3RoXG5cdFx0LCB0b2tlblxuXHRcdCwgdXBkYXRlZCA9IGZhbHNlXG5cdDtcblx0ZG8ge1xuXHRcdHRva2VuID0gdG9rZW5zW2ldICsgXCJcIjtcblx0XHRpZiAoY2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuKSA9PT0gLTEpIHtcblx0XHRcdHRoaXMucHVzaCh0b2tlbik7XG5cdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0d2hpbGUgKCsraSA8IGwpO1xuXG5cdGlmICh1cGRhdGVkKSB7XG5cdFx0dGhpcy5fdXBkYXRlQ2xhc3NOYW1lKCk7XG5cdH1cbn07XG5jbGFzc0xpc3RQcm90by5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdHZhclxuXHRcdCAgdG9rZW5zID0gYXJndW1lbnRzXG5cdFx0LCBpID0gMFxuXHRcdCwgbCA9IHRva2Vucy5sZW5ndGhcblx0XHQsIHRva2VuXG5cdFx0LCB1cGRhdGVkID0gZmFsc2Vcblx0XHQsIGluZGV4XG5cdDtcblx0ZG8ge1xuXHRcdHRva2VuID0gdG9rZW5zW2ldICsgXCJcIjtcblx0XHRpbmRleCA9IGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbik7XG5cdFx0d2hpbGUgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0dGhpcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cdFx0XHRpbmRleCA9IGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbik7XG5cdFx0fVxuXHR9XG5cdHdoaWxlICgrK2kgPCBsKTtcblxuXHRpZiAodXBkYXRlZCkge1xuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSgpO1xuXHR9XG59O1xuY2xhc3NMaXN0UHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gKHRva2VuLCBmb3JjZSkge1xuXHR0b2tlbiArPSBcIlwiO1xuXG5cdHZhclxuXHRcdCAgcmVzdWx0ID0gdGhpcy5jb250YWlucyh0b2tlbilcblx0XHQsIG1ldGhvZCA9IHJlc3VsdCA/XG5cdFx0XHRmb3JjZSAhPT0gdHJ1ZSAmJiBcInJlbW92ZVwiXG5cdFx0OlxuXHRcdFx0Zm9yY2UgIT09IGZhbHNlICYmIFwiYWRkXCJcblx0O1xuXG5cdGlmIChtZXRob2QpIHtcblx0XHR0aGlzW21ldGhvZF0odG9rZW4pO1xuXHR9XG5cblx0aWYgKGZvcmNlID09PSB0cnVlIHx8IGZvcmNlID09PSBmYWxzZSkge1xuXHRcdHJldHVybiBmb3JjZTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gIXJlc3VsdDtcblx0fVxufTtcbmNsYXNzTGlzdFByb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy5qb2luKFwiIFwiKTtcbn07XG5cbmlmIChvYmpDdHIuZGVmaW5lUHJvcGVydHkpIHtcblx0dmFyIGNsYXNzTGlzdFByb3BEZXNjID0ge1xuXHRcdCAgZ2V0OiBjbGFzc0xpc3RHZXR0ZXJcblx0XHQsIGVudW1lcmFibGU6IHRydWVcblx0XHQsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHR9O1xuXHR0cnkge1xuXHRcdG9iakN0ci5kZWZpbmVQcm9wZXJ0eShlbGVtQ3RyUHJvdG8sIGNsYXNzTGlzdFByb3AsIGNsYXNzTGlzdFByb3BEZXNjKTtcblx0fSBjYXRjaCAoZXgpIHsgLy8gSUUgOCBkb2Vzbid0IHN1cHBvcnQgZW51bWVyYWJsZTp0cnVlXG5cdFx0Ly8gYWRkaW5nIHVuZGVmaW5lZCB0byBmaWdodCB0aGlzIGlzc3VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGlncmV5L2NsYXNzTGlzdC5qcy9pc3N1ZXMvMzZcblx0XHQvLyBtb2Rlcm5pZSBJRTgtTVNXNyBtYWNoaW5lIGhhcyBJRTggOC4wLjYwMDEuMTg3MDIgYW5kIGlzIGFmZmVjdGVkXG5cdFx0aWYgKGV4Lm51bWJlciA9PT0gdW5kZWZpbmVkIHx8IGV4Lm51bWJlciA9PT0gLTB4N0ZGNUVDNTQpIHtcblx0XHRcdGNsYXNzTGlzdFByb3BEZXNjLmVudW1lcmFibGUgPSBmYWxzZTtcblx0XHRcdG9iakN0ci5kZWZpbmVQcm9wZXJ0eShlbGVtQ3RyUHJvdG8sIGNsYXNzTGlzdFByb3AsIGNsYXNzTGlzdFByb3BEZXNjKTtcblx0XHR9XG5cdH1cbn0gZWxzZSBpZiAob2JqQ3RyW3Byb3RvUHJvcF0uX19kZWZpbmVHZXR0ZXJfXykge1xuXHRlbGVtQ3RyUHJvdG8uX19kZWZpbmVHZXR0ZXJfXyhjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RHZXR0ZXIpO1xufVxuXG59KHdpbmRvdy5zZWxmKSk7XG5cbn1cblxuLy8gVGhlcmUgaXMgZnVsbCBvciBwYXJ0aWFsIG5hdGl2ZSBjbGFzc0xpc3Qgc3VwcG9ydCwgc28ganVzdCBjaGVjayBpZiB3ZSBuZWVkXG4vLyB0byBub3JtYWxpemUgdGhlIGFkZC9yZW1vdmUgYW5kIHRvZ2dsZSBBUElzLlxuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiX1wiKTtcblxuXHR0ZXN0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYzFcIiwgXCJjMlwiKTtcblxuXHQvLyBQb2x5ZmlsbCBmb3IgSUUgMTAvMTEgYW5kIEZpcmVmb3ggPDI2LCB3aGVyZSBjbGFzc0xpc3QuYWRkIGFuZFxuXHQvLyBjbGFzc0xpc3QucmVtb3ZlIGV4aXN0IGJ1dCBzdXBwb3J0IG9ubHkgb25lIGFyZ3VtZW50IGF0IGEgdGltZS5cblx0aWYgKCF0ZXN0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJjMlwiKSkge1xuXHRcdHZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbihtZXRob2QpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IERPTVRva2VuTGlzdC5wcm90b3R5cGVbbWV0aG9kXTtcblxuXHRcdFx0RE9NVG9rZW5MaXN0LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odG9rZW4pIHtcblx0XHRcdFx0dmFyIGksIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0dG9rZW4gPSBhcmd1bWVudHNbaV07XG5cdFx0XHRcdFx0b3JpZ2luYWwuY2FsbCh0aGlzLCB0b2tlbik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fTtcblx0XHRjcmVhdGVNZXRob2QoJ2FkZCcpO1xuXHRcdGNyZWF0ZU1ldGhvZCgncmVtb3ZlJyk7XG5cdH1cblxuXHR0ZXN0RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiYzNcIiwgZmFsc2UpO1xuXG5cdC8vIFBvbHlmaWxsIGZvciBJRSAxMCBhbmQgRmlyZWZveCA8MjQsIHdoZXJlIGNsYXNzTGlzdC50b2dnbGUgZG9lcyBub3Rcblx0Ly8gc3VwcG9ydCB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuXHRpZiAodGVzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYzNcIikpIHtcblx0XHR2YXIgX3RvZ2dsZSA9IERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlO1xuXG5cdFx0RE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbih0b2tlbiwgZm9yY2UpIHtcblx0XHRcdGlmICgxIGluIGFyZ3VtZW50cyAmJiAhdGhpcy5jb250YWlucyh0b2tlbikgPT09ICFmb3JjZSkge1xuXHRcdFx0XHRyZXR1cm4gZm9yY2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gX3RvZ2dsZS5jYWxsKHRoaXMsIHRva2VuKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdH1cblxuXHR0ZXN0RWxlbWVudCA9IG51bGw7XG59KCkpO1xuXG59XG5cbn0se31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXG4vKipcbiAqIEV4cG9zZSBgcGFyc2VgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5cbi8qKlxuICogVGVzdHMgZm9yIGJyb3dzZXIgc3VwcG9ydC5cbiAqL1xuXG52YXIgaW5uZXJIVE1MQnVnID0gZmFsc2U7XG52YXIgYnVnVGVzdERpdjtcbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIGJ1Z1Rlc3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgLy8gU2V0dXBcbiAgYnVnVGVzdERpdi5pbm5lckhUTUwgPSAnICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj1cIi9hXCI+YTwvYT48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIvPic7XG4gIC8vIE1ha2Ugc3VyZSB0aGF0IGxpbmsgZWxlbWVudHMgZ2V0IHNlcmlhbGl6ZWQgY29ycmVjdGx5IGJ5IGlubmVySFRNTFxuICAvLyBUaGlzIHJlcXVpcmVzIGEgd3JhcHBlciBlbGVtZW50IGluIElFXG4gIGlubmVySFRNTEJ1ZyA9ICFidWdUZXN0RGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdsaW5rJykubGVuZ3RoO1xuICBidWdUZXN0RGl2ID0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFdyYXAgbWFwIGZyb20ganF1ZXJ5LlxuICovXG5cbnZhciBtYXAgPSB7XG4gIGxlZ2VuZDogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gIHRyOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcbiAgY29sOiBbMiwgJzx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+JywgJzwvY29sZ3JvdXA+PC90YWJsZT4nXSxcbiAgLy8gZm9yIHNjcmlwdC9saW5rL3N0eWxlIHRhZ3MgdG8gd29yayBpbiBJRTYtOCwgeW91IGhhdmUgdG8gd3JhcFxuICAvLyBpbiBhIGRpdiB3aXRoIGEgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyIGluIGZyb250LCBoYSFcbiAgX2RlZmF1bHQ6IGlubmVySFRNTEJ1ZyA/IFsxLCAnWDxkaXY+JywgJzwvZGl2PiddIDogWzAsICcnLCAnJ11cbn07XG5cbm1hcC50ZCA9XG5tYXAudGggPSBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXTtcblxubWFwLm9wdGlvbiA9XG5tYXAub3B0Z3JvdXAgPSBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJtdWx0aXBsZVwiPicsICc8L3NlbGVjdD4nXTtcblxubWFwLnRoZWFkID1cbm1hcC50Ym9keSA9XG5tYXAuY29sZ3JvdXAgPVxubWFwLmNhcHRpb24gPVxubWFwLnRmb290ID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J107XG5cbm1hcC5wb2x5bGluZSA9XG5tYXAuZWxsaXBzZSA9XG5tYXAucG9seWdvbiA9XG5tYXAuY2lyY2xlID1cbm1hcC50ZXh0ID1cbm1hcC5saW5lID1cbm1hcC5wYXRoID1cbm1hcC5yZWN0ID1cbm1hcC5nID0gWzEsICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4xXCI+JywnPC9zdmc+J107XG5cbi8qKlxuICogUGFyc2UgYGh0bWxgIGFuZCByZXR1cm4gYSBET00gTm9kZSBpbnN0YW5jZSwgd2hpY2ggY291bGQgYmUgYSBUZXh0Tm9kZSxcbiAqIEhUTUwgRE9NIE5vZGUgb2Ygc29tZSBraW5kICg8ZGl2PiBmb3IgZXhhbXBsZSksIG9yIGEgRG9jdW1lbnRGcmFnbWVudFxuICogaW5zdGFuY2UsIGRlcGVuZGluZyBvbiB0aGUgY29udGVudHMgb2YgdGhlIGBodG1sYCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGh0bWwgLSBIVE1MIHN0cmluZyB0byBcImRvbWlmeVwiXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBkb2MgLSBUaGUgYGRvY3VtZW50YCBpbnN0YW5jZSB0byBjcmVhdGUgdGhlIE5vZGUgZm9yXG4gKiBAcmV0dXJuIHtET01Ob2RlfSB0aGUgVGV4dE5vZGUsIERPTSBOb2RlLCBvciBEb2N1bWVudEZyYWdtZW50IGluc3RhbmNlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShodG1sLCBkb2MpIHtcbiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiBodG1sKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdHJpbmcgZXhwZWN0ZWQnKTtcblxuICAvLyBkZWZhdWx0IHRvIHRoZSBnbG9iYWwgYGRvY3VtZW50YCBvYmplY3RcbiAgaWYgKCFkb2MpIGRvYyA9IGRvY3VtZW50O1xuXG4gIC8vIHRhZyBuYW1lXG4gIHZhciBtID0gLzwoW1xcdzpdKykvLmV4ZWMoaHRtbCk7XG4gIGlmICghbSkgcmV0dXJuIGRvYy5jcmVhdGVUZXh0Tm9kZShodG1sKTtcblxuICBodG1sID0gaHRtbC5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7IC8vIFJlbW92ZSBsZWFkaW5nL3RyYWlsaW5nIHdoaXRlc3BhY2VcblxuICB2YXIgdGFnID0gbVsxXTtcblxuICAvLyBib2R5IHN1cHBvcnRcbiAgaWYgKHRhZyA9PSAnYm9keScpIHtcbiAgICB2YXIgZWwgPSBkb2MuY3JlYXRlRWxlbWVudCgnaHRtbCcpO1xuICAgIGVsLmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIGVsLnJlbW92ZUNoaWxkKGVsLmxhc3RDaGlsZCk7XG4gIH1cblxuICAvLyB3cmFwIG1hcFxuICB2YXIgd3JhcCA9IG1hcFt0YWddIHx8IG1hcC5fZGVmYXVsdDtcbiAgdmFyIGRlcHRoID0gd3JhcFswXTtcbiAgdmFyIHByZWZpeCA9IHdyYXBbMV07XG4gIHZhciBzdWZmaXggPSB3cmFwWzJdO1xuICB2YXIgZWwgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGVsLmlubmVySFRNTCA9IHByZWZpeCArIGh0bWwgKyBzdWZmaXg7XG4gIHdoaWxlIChkZXB0aC0tKSBlbCA9IGVsLmxhc3RDaGlsZDtcblxuICAvLyBvbmUgZWxlbWVudFxuICBpZiAoZWwuZmlyc3RDaGlsZCA9PSBlbC5sYXN0Q2hpbGQpIHtcbiAgICByZXR1cm4gZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XG4gIH1cblxuICAvLyBzZXZlcmFsIGVsZW1lbnRzXG4gIHZhciBmcmFnbWVudCA9IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIHdoaWxlIChlbC5maXJzdENoaWxkKSB7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCkpO1xuICB9XG5cbiAgcmV0dXJuIGZyYWdtZW50O1xufVxuXG59LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29kZSByZWZhY3RvcmVkIGZyb20gTW96aWxsYSBEZXZlbG9wZXIgTmV0d29yazpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIGZpcnN0U291cmNlKSB7XG4gIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBmaXJzdCBhcmd1bWVudCB0byBvYmplY3QnKTtcbiAgfVxuXG4gIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlID09PSB1bmRlZmluZWQgfHwgbmV4dFNvdXJjZSA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG4gICAgZm9yICh2YXIgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXgrKykge1xuICAgICAgdmFyIG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuXG5mdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgaWYgKCFPYmplY3QuYXNzaWduKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdCwgJ2Fzc2lnbicsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogYXNzaWduXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2lnbjogYXNzaWduLFxuICBwb2x5ZmlsbDogcG9seWZpbGxcbn07XG5cbn0se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gY2xhc3NMaXN0IHBvbHlmaWxsIGZvciBvbGQgYnJvd3NlcnNcclxucmVxdWlyZSgnY2xhc3NsaXN0LXBvbHlmaWxsJylcclxuLy8gT2JqZWN0LmFzc2lnbiBwb2x5ZmlsbFxyXG5yZXF1aXJlKCdlczYtb2JqZWN0LWFzc2lnbicpLnBvbHlmaWxsKClcclxuXHJcbi8vIFN0cmluZyB0byBET00gZnVuY3Rpb25cclxudmFyIGRvbWlmeSA9IHJlcXVpcmUoJ2RvbWlmeScpXHJcblxyXG4vLyBVc2UgdGhlIERPTSdzIEhUTUwgcGFyc2luZyB0byBlc2NhcGUgYW55IGRhbmdlcm91cyBzdHJpbmdzXHJcbnZhciBlc2NhcGVIdG1sID0gZnVuY3Rpb24gZXNjYXBlSHRtbCAoc3RyKSB7XHJcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAgIGRpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIpKVxyXG4gICAgcmV0dXJuIGRpdi5pbm5lckhUTUxcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuICcnXHJcbiAgfVxyXG59XHJcblxyXG4vLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIGFkZCBzcGFjZS1kZWxpbWl0ZWQgY2xhc3Mgc3RyaW5ncyB0byBhIERPTSBlbGVtZW50J3MgY2xhc3NMaXN0XHJcbnZhciBhZGRDbGFzc2VzID0gZnVuY3Rpb24gYWRkQ2xhc3NlcyAoZWwsIGNsYXNzU3RyKSB7XHJcbiAgaWYgKHR5cGVvZiBjbGFzc1N0ciAhPT0gJ3N0cmluZycgfHwgY2xhc3NTdHIubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgdmFyIGNsYXNzZXMgPSBjbGFzc1N0ci5zcGxpdCgnICcpXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgY2xhc3NOYW1lID0gY2xhc3Nlc1tpXVxyXG4gICAgaWYgKGNsYXNzTmFtZS5sZW5ndGgpIHtcclxuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBEZXRlY3QgQ1NTIEFuaW1hdGlvbiBFbmQgU3VwcG9ydFxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbGltb250ZS9zd2VldGFsZXJ0Mi9ibG9iLzk5YmQ1MzlmODVlMTVhYzE3MGY2OWQzNTAwMWQxMmUwOTJlZjAwNTQvc3JjL3V0aWxzL2RvbS5qcyNMMTk0XHJcbnZhciBhbmltYXRpb25FbmRFdmVudCA9IChmdW5jdGlvbiBkZXRlY3RBbmltYXRpb25FbmRFdmVudCAoKSB7XHJcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICB2YXIgZXZlbnROYW1lcyA9IHtcclxuICAgICdhbmltYXRpb24nOiAnYW5pbWF0aW9uZW5kJyxcclxuICAgICdXZWJraXRBbmltYXRpb24nOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcclxuICAgICdNb3pBbmltYXRpb24nOiAnYW5pbWF0aW9uZW5kJyxcclxuICAgICdPQW5pbWF0aW9uJzogJ29hbmltYXRpb25lbmQnLFxyXG4gICAgJ21zQW5pbWF0aW9uJzogJ01TQW5pbWF0aW9uRW5kJ1xyXG4gIH1cclxuICBmb3IgKHZhciBpIGluIGV2ZW50TmFtZXMpIHtcclxuICAgIGlmIChlbC5zdHlsZVtpXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiBldmVudE5hbWVzW2ldXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZVxyXG59KSgpXHJcblxyXG4vLyB2ZXggYmFzZSBDU1MgY2xhc3Nlc1xyXG52YXIgYmFzZUNsYXNzTmFtZXMgPSB7XHJcbiAgdmV4OiAndmV4JyxcclxuICBjb250ZW50OiAndmV4LWNvbnRlbnQnLFxyXG4gIG92ZXJsYXk6ICd2ZXgtb3ZlcmxheScsXHJcbiAgY2xvc2U6ICd2ZXgtY2xvc2UnLFxyXG4gIGNsb3Npbmc6ICd2ZXgtY2xvc2luZycsXHJcbiAgb3BlbjogJ3ZleC1vcGVuJ1xyXG59XHJcblxyXG4vLyBQcml2YXRlIGxvb2t1cCB0YWJsZSBvZiBhbGwgb3BlbiB2ZXggb2JqZWN0cywga2V5ZWQgYnkgaWRcclxudmFyIHZleGVzID0ge31cclxudmFyIGdsb2JhbElkID0gMVxyXG5cclxuLy8gUHJpdmF0ZSBib29sZWFuIHRvIGFzc2lzdCB0aGUgZXNjYXBlQnV0dG9uQ2xvc2VzIG9wdGlvblxyXG52YXIgaXNFc2NhcGVBY3RpdmUgPSBmYWxzZVxyXG5cclxuLy8gdmV4IGl0c2VsZiBpcyBhbiBvYmplY3QgdGhhdCBleHBvc2VzIGEgc2ltcGxlIEFQSSB0byBvcGVuIGFuZCBjbG9zZSB2ZXggb2JqZWN0cyBpbiB2YXJpb3VzIHdheXNcclxudmFyIHZleCA9IHtcclxuICBvcGVuOiBmdW5jdGlvbiBvcGVuIChvcHRzKSB7XHJcbiAgICAvLyBDaGVjayBmb3IgdXNhZ2Ugb2YgZGVwcmVjYXRlZCBvcHRpb25zLCBhbmQgbG9nIGEgd2FybmluZ1xyXG4gICAgdmFyIHdhcm5EZXByZWNhdGVkID0gZnVuY3Rpb24gd2FybkRlcHJlY2F0ZWQgKHByb3ApIHtcclxuICAgICAgY29uc29sZS53YXJuKCdUaGUgXCInICsgcHJvcCArICdcIiBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkIGluIHZleCAzLiBVc2UgQ1NTIGNsYXNzZXMgYW5kIHRoZSBhcHByb3ByaWF0ZSBcIkNsYXNzTmFtZVwiIG9wdGlvbnMsIGluc3RlYWQuJylcclxuICAgICAgY29uc29sZS53YXJuKCdTZWUgaHR0cDovL2dpdGh1Yi5odWJzcG90LmNvbS92ZXgvYXBpL2FkdmFuY2VkLyNvcHRpb25zJylcclxuICAgIH1cclxuICAgIGlmIChvcHRzLmNzcykge1xyXG4gICAgICB3YXJuRGVwcmVjYXRlZCgnY3NzJylcclxuICAgIH1cclxuICAgIGlmIChvcHRzLm92ZXJsYXlDU1MpIHtcclxuICAgICAgd2FybkRlcHJlY2F0ZWQoJ292ZXJsYXlDU1MnKVxyXG4gICAgfVxyXG4gICAgaWYgKG9wdHMuY29udGVudENTUykge1xyXG4gICAgICB3YXJuRGVwcmVjYXRlZCgnY29udGVudENTUycpXHJcbiAgICB9XHJcbiAgICBpZiAob3B0cy5jbG9zZUNTUykge1xyXG4gICAgICB3YXJuRGVwcmVjYXRlZCgnY2xvc2VDU1MnKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoZSBkaWFsb2cgaW5zdGFuY2VcclxuICAgIHZhciB2ZXhJbnN0YW5jZSA9IHt9XHJcblxyXG4gICAgLy8gU2V0IGlkXHJcbiAgICB2ZXhJbnN0YW5jZS5pZCA9IGdsb2JhbElkKytcclxuXHJcbiAgICAvLyBTdG9yZSBpbnRlcm5hbGx5XHJcbiAgICB2ZXhlc1t2ZXhJbnN0YW5jZS5pZF0gPSB2ZXhJbnN0YW5jZVxyXG5cclxuICAgIC8vIFNldCBzdGF0ZVxyXG4gICAgdmV4SW5zdGFuY2UuaXNPcGVuID0gdHJ1ZVxyXG5cclxuICAgIC8vIENsb3NlIGZ1bmN0aW9uIG9uIHRoZSB2ZXggaW5zdGFuY2VcclxuICAgIC8vIFRoaXMgaXMgaG93IGFsbCBBUEkgZnVuY3Rpb25zIHNob3VsZCBjbG9zZSBpbmRpdmlkdWFsIHZleGVzXHJcbiAgICB2ZXhJbnN0YW5jZS5jbG9zZSA9IGZ1bmN0aW9uIGluc3RhbmNlQ2xvc2UgKCkge1xyXG4gICAgICAvLyBDaGVjayBzdGF0ZVxyXG4gICAgICBpZiAoIXRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcclxuXHJcbiAgICAgIC8vIGVzY2FwZUJ1dHRvbkNsb3NlcyBpcyBjaGVja2VkIGZpcnN0XHJcbiAgICAgIGlmIChpc0VzY2FwZUFjdGl2ZSAmJiAhb3B0aW9ucy5lc2NhcGVCdXR0b25DbG9zZXMpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQWxsb3cgdGhlIHVzZXIgdG8gdmFsaWRhdGUgYW55IGluZm8gb3IgYWJvcnQgdGhlIGNsb3NlIHdpdGggdGhlIGJlZm9yZUNsb3NlIGNhbGxiYWNrXHJcbiAgICAgIHZhciBzaG91bGRDbG9zZSA9IChmdW5jdGlvbiBzaG91bGRDbG9zZSAoKSB7XHJcbiAgICAgICAgLy8gQ2FsbCBiZWZvcmUgY2xvc2UgY2FsbGJhY2tcclxuICAgICAgICBpZiAob3B0aW9ucy5iZWZvcmVDbG9zZSkge1xyXG4gICAgICAgICAgcmV0dXJuIG9wdGlvbnMuYmVmb3JlQ2xvc2UuY2FsbCh0aGlzKVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBPdGhlcndpc2UgaW5kaWNhdGUgdGhhdCBpdCdzIG9rIHRvIGNvbnRpbnVlIHdpdGggY2xvc2VcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9LmJpbmQodGhpcykoKSlcclxuXHJcbiAgICAgIC8vIElmIGJlZm9yZUNsb3NlKCkgZmFpbHMsIGFib3J0IHRoZSBjbG9zZVxyXG4gICAgICBpZiAoc2hvdWxkQ2xvc2UgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBzdGF0ZVxyXG4gICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlXHJcblxyXG4gICAgICAvLyBEZXRlY3QgaWYgdGhlIGNvbnRlbnQgZWwgaGFzIGFueSBDU1MgYW5pbWF0aW9ucyBkZWZpbmVkXHJcbiAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuY29udGVudEVsKVxyXG4gICAgICBmdW5jdGlvbiBoYXNBbmltYXRpb25QcmUgKHByZWZpeCkge1xyXG4gICAgICAgIHJldHVybiBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByZWZpeCArICdhbmltYXRpb24tbmFtZScpICE9PSAnbm9uZScgJiYgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcmVmaXggKyAnYW5pbWF0aW9uLWR1cmF0aW9uJykgIT09ICcwcydcclxuICAgICAgfVxyXG4gICAgICB2YXIgaGFzQW5pbWF0aW9uID0gaGFzQW5pbWF0aW9uUHJlKCcnKSB8fCBoYXNBbmltYXRpb25QcmUoJy13ZWJraXQtJykgfHwgaGFzQW5pbWF0aW9uUHJlKCctbW96LScpIHx8IGhhc0FuaW1hdGlvblByZSgnLW8tJylcclxuXHJcbiAgICAgIC8vIERlZmluZSB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGFjdHVhbGx5IGNsb3NlIHRoZSBpbnN0YW5jZVxyXG4gICAgICB2YXIgY2xvc2UgPSBmdW5jdGlvbiBjbG9zZSAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJvb3RFbC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUnVuIG9uY2VcclxuICAgICAgICB0aGlzLnJvb3RFbC5yZW1vdmVFdmVudExpc3RlbmVyKGFuaW1hdGlvbkVuZEV2ZW50LCBjbG9zZSlcclxuICAgICAgICB0aGlzLm92ZXJsYXlFbC5yZW1vdmVFdmVudExpc3RlbmVyKGFuaW1hdGlvbkVuZEV2ZW50LCBjbG9zZSlcclxuICAgICAgICAvLyBSZW1vdmUgZnJvbSBsb29rdXAgdGFibGUgKHByZXZlbnQgbWVtb3J5IGxlYWtzKVxyXG4gICAgICAgIGRlbGV0ZSB2ZXhlc1t0aGlzLmlkXVxyXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZGlhbG9nIGZyb20gdGhlIERPTVxyXG4gICAgICAgIHRoaXMucm9vdEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5yb290RWwpXHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBvdmVybGF5IGZyb20gdGhlIERPTVxyXG4gICAgICAgIHRoaXMuYm9keUVsLnJlbW92ZUNoaWxkKHRoaXMub3ZlcmxheUVsKVxyXG4gICAgICAgIC8vIENhbGwgYWZ0ZXIgY2xvc2UgY2FsbGJhY2tcclxuICAgICAgICBpZiAob3B0aW9ucy5hZnRlckNsb3NlKSB7XHJcbiAgICAgICAgICBvcHRpb25zLmFmdGVyQ2xvc2UuY2FsbCh0aGlzKVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgc3R5bGluZyBmcm9tIHRoZSBib2R5LCBpZiBubyBtb3JlIHZleGVzIGFyZSBvcGVuXHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHZleGVzKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShiYXNlQ2xhc3NOYW1lcy5vcGVuKVxyXG4gICAgICAgIH1cclxuICAgICAgfS5iaW5kKHRoaXMpXHJcblxyXG4gICAgICAvLyBDbG9zZSB0aGUgdmV4XHJcbiAgICAgIGlmIChhbmltYXRpb25FbmRFdmVudCAmJiBoYXNBbmltYXRpb24pIHtcclxuICAgICAgICAvLyBTZXR1cCB0aGUgZW5kIGV2ZW50IGxpc3RlbmVyLCB0byByZW1vdmUgdGhlIGVsIGZyb20gdGhlIERPTVxyXG4gICAgICAgIHRoaXMucm9vdEVsLmFkZEV2ZW50TGlzdGVuZXIoYW5pbWF0aW9uRW5kRXZlbnQsIGNsb3NlKVxyXG4gICAgICAgIHRoaXMub3ZlcmxheUVsLmFkZEV2ZW50TGlzdGVuZXIoYW5pbWF0aW9uRW5kRXZlbnQsIGNsb3NlKVxyXG4gICAgICAgIC8vIEFkZCB0aGUgY2xvc2luZyBjbGFzcyB0byB0aGUgZGlhbG9nLCBzaG93aW5nIHRoZSBjbG9zZSBhbmltYXRpb25cclxuICAgICAgICB0aGlzLnJvb3RFbC5jbGFzc0xpc3QuYWRkKGJhc2VDbGFzc05hbWVzLmNsb3NpbmcpXHJcbiAgICAgICAgdGhpcy5vdmVybGF5RWwuY2xhc3NMaXN0LmFkZChiYXNlQ2xhc3NOYW1lcy5jbG9zaW5nKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNsb3NlKClcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICAvLyBBbGxvdyBzdHJpbmdzIGFzIGNvbnRlbnRcclxuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgb3B0cyA9IHtcclxuICAgICAgICBjb250ZW50OiBvcHRzXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBgY29udGVudGAgaXMgdW5zYWZlIGludGVybmFsbHksIHNvIHRyYW5zbGF0ZVxyXG4gICAgLy8gc2FmZSBkZWZhdWx0OiBIVE1MLWVzY2FwZSB0aGUgY29udGVudCBiZWZvcmUgcGFzc2luZyBpdCB0aHJvdWdoXHJcbiAgICBpZiAob3B0cy51bnNhZmVDb250ZW50ICYmICFvcHRzLmNvbnRlbnQpIHtcclxuICAgICAgb3B0cy5jb250ZW50ID0gb3B0cy51bnNhZmVDb250ZW50XHJcbiAgICB9IGVsc2UgaWYgKG9wdHMuY29udGVudCkge1xyXG4gICAgICBvcHRzLmNvbnRlbnQgPSBlc2NhcGVIdG1sKG9wdHMuY29udGVudClcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdG9yZSBvcHRpb25zIG9uIGluc3RhbmNlIGZvciBmdXR1cmUgcmVmZXJlbmNlXHJcbiAgICB2YXIgb3B0aW9ucyA9IHZleEluc3RhbmNlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB2ZXguZGVmYXVsdE9wdGlvbnMsIG9wdHMpXHJcblxyXG4gICAgLy8gR2V0IEJvZHkgRWxlbWVudFxyXG4gICAgdmFyIGJvZHlFbCA9IHZleEluc3RhbmNlLmJvZHlFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF1cclxuXHJcbiAgICAvLyB2ZXggcm9vdFxyXG4gICAgdmFyIHJvb3RFbCA9IHZleEluc3RhbmNlLnJvb3RFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICByb290RWwuY2xhc3NMaXN0LmFkZChiYXNlQ2xhc3NOYW1lcy52ZXgpXHJcbiAgICBhZGRDbGFzc2VzKHJvb3RFbCwgb3B0aW9ucy5jbGFzc05hbWUpXHJcblxyXG4gICAgLy8gT3ZlcmxheVxyXG4gICAgdmFyIG92ZXJsYXlFbCA9IHZleEluc3RhbmNlLm92ZXJsYXlFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICBvdmVybGF5RWwuY2xhc3NMaXN0LmFkZChiYXNlQ2xhc3NOYW1lcy5vdmVybGF5KVxyXG4gICAgYWRkQ2xhc3NlcyhvdmVybGF5RWwsIG9wdGlvbnMub3ZlcmxheUNsYXNzTmFtZSlcclxuICAgIGlmIChvcHRpb25zLm92ZXJsYXlDbG9zZXNPbkNsaWNrKSB7XHJcbiAgICAgIHJvb3RFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIG92ZXJsYXlDbGlja0xpc3RlbmVyIChlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSByb290RWwpIHtcclxuICAgICAgICAgIHZleEluc3RhbmNlLmNsb3NlKClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBib2R5RWwuYXBwZW5kQ2hpbGQob3ZlcmxheUVsKVxyXG5cclxuICAgIC8vIENvbnRlbnRcclxuICAgIHZhciBjb250ZW50RWwgPSB2ZXhJbnN0YW5jZS5jb250ZW50RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgY29udGVudEVsLmNsYXNzTGlzdC5hZGQoYmFzZUNsYXNzTmFtZXMuY29udGVudClcclxuICAgIGFkZENsYXNzZXMoY29udGVudEVsLCBvcHRpb25zLmNvbnRlbnRDbGFzc05hbWUpXHJcbiAgICBjb250ZW50RWwuYXBwZW5kQ2hpbGQob3B0aW9ucy5jb250ZW50IGluc3RhbmNlb2Ygd2luZG93Lk5vZGUgPyBvcHRpb25zLmNvbnRlbnQgOiBkb21pZnkob3B0aW9ucy5jb250ZW50KSlcclxuICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjb250ZW50RWwpXHJcblxyXG4gICAgLy8gQ2xvc2UgYnV0dG9uXHJcbiAgICBpZiAob3B0aW9ucy5zaG93Q2xvc2VCdXR0b24pIHtcclxuICAgICAgdmFyIGNsb3NlRWwgPSB2ZXhJbnN0YW5jZS5jbG9zZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAgICAgY2xvc2VFbC5jbGFzc0xpc3QuYWRkKGJhc2VDbGFzc05hbWVzLmNsb3NlKVxyXG4gICAgICBhZGRDbGFzc2VzKGNsb3NlRWwsIG9wdGlvbnMuY2xvc2VDbGFzc05hbWUpXHJcbiAgICAgIGNsb3NlRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB2ZXhJbnN0YW5jZS5jbG9zZS5iaW5kKHZleEluc3RhbmNlKSlcclxuICAgICAgY29udGVudEVsLmFwcGVuZENoaWxkKGNsb3NlRWwpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIHRvIERPTVxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLmFwcGVuZExvY2F0aW9uKS5hcHBlbmRDaGlsZChyb290RWwpXHJcblxyXG4gICAgLy8gQ2FsbCBhZnRlciBvcGVuIGNhbGxiYWNrXHJcbiAgICBpZiAob3B0aW9ucy5hZnRlck9wZW4pIHtcclxuICAgICAgb3B0aW9ucy5hZnRlck9wZW4uY2FsbCh2ZXhJbnN0YW5jZSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBBcHBseSBzdHlsaW5nIHRvIHRoZSBib2R5XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoYmFzZUNsYXNzTmFtZXMub3BlbilcclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIGNyZWF0ZWQgdmV4IGluc3RhbmNlXHJcbiAgICByZXR1cm4gdmV4SW5zdGFuY2VcclxuICB9LFxyXG5cclxuICAvLyBBIHRvcC1sZXZlbCB2ZXguY2xvc2UgZnVuY3Rpb24gdG8gY2xvc2UgZGlhbG9ncyBieSByZWZlcmVuY2Ugb3IgaWRcclxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UgKHZleE9ySWQpIHtcclxuICAgIHZhciBpZFxyXG4gICAgaWYgKHZleE9ySWQuaWQpIHtcclxuICAgICAgaWQgPSB2ZXhPcklkLmlkXHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ZXhPcklkID09PSAnc3RyaW5nJykge1xyXG4gICAgICBpZCA9IHZleE9ySWRcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nsb3NlIHJlcXVpcmVzIGEgdmV4IG9iamVjdCBvciBpZCBzdHJpbmcnKVxyXG4gICAgfVxyXG4gICAgaWYgKCF2ZXhlc1tpZF0pIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmV4ZXNbaWRdLmNsb3NlKClcclxuICB9LFxyXG5cclxuICAvLyBDbG9zZSB0aGUgbW9zdCByZWNlbnRseSBjcmVhdGVkL29wZW5lZCB2ZXhcclxuICBjbG9zZVRvcDogZnVuY3Rpb24gY2xvc2VUb3AgKCkge1xyXG4gICAgdmFyIGlkcyA9IE9iamVjdC5rZXlzKHZleGVzKVxyXG4gICAgaWYgKCFpZHMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZleGVzW2lkc1tpZHMubGVuZ3RoIC0gMV1dLmNsb3NlKClcclxuICB9LFxyXG5cclxuICAvLyBDbG9zZSBldmVyeSB2ZXghXHJcbiAgY2xvc2VBbGw6IGZ1bmN0aW9uIGNsb3NlQWxsICgpIHtcclxuICAgIGZvciAodmFyIGlkIGluIHZleGVzKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoaWQpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH0sXHJcblxyXG4gIC8vIEEgZ2V0dGVyIGZvciB0aGUgaW50ZXJuYWwgbG9va3VwIHRhYmxlXHJcbiAgZ2V0QWxsOiBmdW5jdGlvbiBnZXRBbGwgKCkge1xyXG4gICAgcmV0dXJuIHZleGVzXHJcbiAgfSxcclxuXHJcbiAgLy8gQSBnZXR0ZXIgZm9yIHRoZSBpbnRlcm5hbCBsb29rdXAgdGFibGVcclxuICBnZXRCeUlkOiBmdW5jdGlvbiBnZXRCeUlkIChpZCkge1xyXG4gICAgcmV0dXJuIHZleGVzW2lkXVxyXG4gIH1cclxufVxyXG5cclxuLy8gQ2xvc2UgdG9wIHZleCBvbiBlc2NhcGVcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24gdmV4S2V5dXBMaXN0ZW5lciAoZSkge1xyXG4gIGlmIChlLmtleUNvZGUgPT09IDI3KSB7XHJcbiAgICBpc0VzY2FwZUFjdGl2ZSA9IHRydWVcclxuICAgIHZleC5jbG9zZVRvcCgpXHJcbiAgICBpc0VzY2FwZUFjdGl2ZSA9IGZhbHNlXHJcbiAgfVxyXG59KVxyXG5cclxuLy8gQ2xvc2UgYWxsIHZleGVzIG9uIGhpc3RvcnkgcG9wIHN0YXRlICh1c2VmdWwgaW4gc2luZ2xlIHBhZ2UgYXBwcylcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKCkge1xyXG4gIGlmICh2ZXguZGVmYXVsdE9wdGlvbnMuY2xvc2VBbGxPblBvcFN0YXRlKSB7XHJcbiAgICB2ZXguY2xvc2VBbGwoKVxyXG4gIH1cclxufSlcclxuXHJcbnZleC5kZWZhdWx0T3B0aW9ucyA9IHtcclxuICBjb250ZW50OiAnJyxcclxuICBzaG93Q2xvc2VCdXR0b246IHRydWUsXHJcbiAgZXNjYXBlQnV0dG9uQ2xvc2VzOiB0cnVlLFxyXG4gIG92ZXJsYXlDbG9zZXNPbkNsaWNrOiB0cnVlLFxyXG4gIGFwcGVuZExvY2F0aW9uOiAnYm9keScsXHJcbiAgY2xhc3NOYW1lOiAnJyxcclxuICBvdmVybGF5Q2xhc3NOYW1lOiAnJyxcclxuICBjb250ZW50Q2xhc3NOYW1lOiAnJyxcclxuICBjbG9zZUNsYXNzTmFtZTogJycsXHJcbiAgY2xvc2VBbGxPblBvcFN0YXRlOiB0cnVlXHJcbn1cclxuXHJcbi8vIFRPRE8gTG9hZGluZyBzeW1ib2xzP1xyXG5cclxuLy8gSW5jbHVkZSBlc2NhcGVIdG1sIGZ1bmN0aW9uIG9uIHRoZSBsaWJyYXJ5IG9iamVjdFxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkodmV4LCAnX2VzY2FwZUh0bWwnLCB7XHJcbiAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICB3cml0YWJsZTogZmFsc2UsXHJcbiAgdmFsdWU6IGVzY2FwZUh0bWxcclxufSlcclxuXHJcbi8vIFBsdWdpbiBzeXN0ZW0hXHJcbnZleC5yZWdpc3RlclBsdWdpbiA9IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luIChwbHVnaW5GbiwgbmFtZSkge1xyXG4gIHZhciBwbHVnaW4gPSBwbHVnaW5Gbih2ZXgpXHJcbiAgdmFyIHBsdWdpbk5hbWUgPSBuYW1lIHx8IHBsdWdpbi5uYW1lXHJcbiAgaWYgKHZleFtwbHVnaW5OYW1lXSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdQbHVnaW4gJyArIG5hbWUgKyAnIGlzIGFscmVhZHkgcmVnaXN0ZXJlZC4nKVxyXG4gIH1cclxuICB2ZXhbcGx1Z2luTmFtZV0gPSBwbHVnaW5cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB2ZXhcclxuXG59LHtcImNsYXNzbGlzdC1wb2x5ZmlsbFwiOjEsXCJkb21pZnlcIjoyLFwiZXM2LW9iamVjdC1hc3NpZ25cIjozfV19LHt9LFs0XSkoNClcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjVmMDJiYzcyZmMzNjg3N2MwODhkMWQzZGVmNjk1MDc1LnR0ZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJkYXRhOmZvbnQvdHRmO2Jhc2U2NCxBQUVBQUFBU0FRQUFCQUFnUmtaVVRXYVNmVTBBQVF4d0FBQUFIRWRFUlVZNEpUVFNBQUVNakFBQUFLUkhVRTlUTzdJMXF3QUJEVEFBQUMxQ1IxTlZRaFYvVHJNQUFUcDBBQUEyWWs5VEx6SnBWNkFBQUFBQnFBQUFBR0JqYldGd3V2Zkhod0FBREpBQUFBUUdZM1owSUJHZEFCRUFBQnc4QUFBQVBHWndaMjJHakhUTEFBQVFtQUFBQ3habllYTndBQUFBRUFBQkRHZ0FBQUFJWjJ4NVp1Rnp1ZTBBQUNIQUFBRE1hR2hsWVdRR2E4d09BQUFCTEFBQUFEWm9hR1ZoQnZBRStRQUFBV1FBQUFBa2FHMTBlRzFsZFNrQUFBSUlBQUFLaUd4dlkyR1BoVndvQUFBY2VBQUFCVVp0WVhod0E5VUw0UUFBQVlnQUFBQWdibUZ0WlhVek9ORUFBTzRvQUFBSUNYQnZjM1MzcGFKTkFBRDJOQUFBRmpOd2NtVndwcFpVdkFBQUc3QUFBQUNKQUFFQUFBQUJBRUlJM0FnbFh3ODg5UUFMQStnQUFBQUF6c083YUFBQUFBRFZLOHpEL3V2KytBUndBOFFBQWdBSUFBSUFBQUFBQUFBQUFRQUFBNFQrMUFBQUJLUCs2LzU4QkhBQVpBQU9BQUFBQUFBQUFBQUFBQUFBQXFJQUFRQUFBcUlBU3dBSEFFb0FCUUFDQUNRQU13QnlBQUFBakFzV0FBUUFBUUFEQWI0QkxBQUZBQUFDaWdKWS8vY0FTd0tLQWxnQUt3RmVBQjBCRVFBQUFBQUVBQUFBQUFBQUFDQUFBQWNBQUFBQUFBQUFBQUFBQUFCVlMxZE9BQUVBSVBzQ0F5RC9PQURJQTRRQkxDQUFBWk1BQUFBQUFjOENmd0FBQUNBQUVRQ3RBQUFBQUFBQUFVMEFBQUNVQUFBQS93Qk1BUHNBVUFIeEFCUUJvUUFpQXk0QVNRSnFBRHdBa0FCUUFSd0FTZ0VjLytVQmNnQlVBZDRBSlFEbUFDRUJOZ0FlQU9ZQU9nRWhBQWdDR0FBMEFWQUFJd0cvQUJjQmtnQURBZFFBRFFHYUFBa0J6Z0F3QVprQU1BSFJBQ3dCemdBaUFPVUFPZ0RtQUNBQjh3QWpBZDhBSWdIMkFEWUJSd0JZQXk0QUtBSVkvL1VCN0FCSEFmTUFNd0puQUVjQnZ3QkhBWlVBUndJL0FESUNod0JIQVBjQVJ3RVgvK01COWdCSEFZTUFSZ0xzQUNjQ2h3QkhBbDBBTXdIaEFFY0NXQUF6QWdBQVJ3RzFBQmNCeXdCSEFrNEFTd0lKQUVRRFNnQkpBaVVBQVFIbUFFY0I3UUFFQVIwQU93RkZBRGtCSGYvbEFaOEFDZ0hGLzhjQmhnQ1dBYThBS0FHd0FEa0JTUUFwQWJBQUp3RnNBQ2tCRFFBL0Fhei94d0hLQURVQTB3QTBBTjcvMWdHOEFEWUExd0EyQXNFQU5BSElBRFFCbEFBcUFhNEFIUUd1QUNjQlBnQTFBVGdBQXdGQUFEMEJ6d0ErQVlzQVVRS2VBRkVCcXdBRkFZbi9qZ0dRLy9jQkhRQXVBVDBBVHdFZC8rb0I0QUErQUpRQUFBRC9BQ2tCZ0FBeEFaRUFBd0cwQUNvQjZBQVZBVDBBVHdHZEFBc0JoZ0NFQXJFQU93RXhBRU1CZkFBcUFlQUFKQUUyQUI0QnN3QW5BWVlBWHdFbUFEb0Izdi8vQVZZQUt3RXRBRFlCaGdDV0FkVUFIZ0hTQUVnQTVnQlVBWVlBVVFENUFFRUJJUUJDQVhYLzlnS21BQUlDckFBQ0Fzb0FKZ0ZILytnQ0dQLzFBaGovOVFJWS8vVUNHUC8xQWhqLzlRSVkvL1VDOC8vV0FmTUFNd0cvQUVjQnZ3QkhBYjhBUndHL0FFY0E5d0JIQVBjQVJ3RDNBRWNBOXdCSEFuMEFId0tIQUVjQ1hRQXpBbDBBTXdKZEFETUNYUUF6QWwwQU13SGhBRW9DWGdBekFrNEFTd0pPQUVzQ1RnQkxBazRBU3dIbUFFY0I1UUJJQWhVQVB3R3ZBQ2dCcndBb0FhOEFLQUd2QUNnQnJ3QW9BYThBS0FKUEFDNEJTUUFwQVd3QUtRRnNBQ2tCYkFBcEFXd0FLUURUQURJQTB3QTBBTk1BSFFEVEFEUUJyZ0ExQWNnQU5BR1VBQ29CbEFBcUFaUUFLZ0dVQUNvQmxBQXFBZDRBSndHVUFDTUJ6d0ErQWM4QVBnSFBBRDRCendBK0FZbi9qZ0cyQUI0QmlmK09BaGovOVFHdkFDZ0NHUC8xQWE4QUtBSVkvL1VCdHdBb0FmTUFNd0ZKQUNrQjh3QXpBVWtBS1FIekFETUJTUUFwQWZNQU13RkpBQ2tDWndCSEFkMEFKd0puQUVjQndnQW5BYjhBUndGc0FDa0J2d0JIQVd3QUtRRy9BRWNCYkFBcEFiOEFSd0ZzQUNrQnZ3QkhBV3dBS1FJL0FESUJyUC9IQWo4QU1nR3MvOGNDUHdBeUFhei94d0kvQURJQnJQL0hBb2NBUndIS0FEVUNud0JRQWdvQVhBRDNBRDBBMHdBVEFQY0FSd0RUQUNnQTl3QkhBTk1BSkFEMy8vQUEwLy9qQVBjQVJ3RFRBRFFDRGdCSEFiRUFOQUVYLytNQTN2L1dBZllBUndHOEFEWUJ3QUEwQVlNQVJnRFhBRFlCZ3dCR0FOY0FEd0dOQUVZQTVRQTJBWU1BUmdEa0FEWUJqUUFaQU9RQURRS0hBRWNCeUFBMEFvY0FSd0hJQURRQ2h3QkhBY2dBTkFLUEFFY0IwUUEyQWwwQU13R1VBQ29DWFFBekFaUUFLZ0pkQURNQmxBQXFBeUVBTXdKNkFDOENBQUJIQVQ0QU5RSUFBRWNCUGdBUUFnQUFSd0UrQURVQnRRQVhBVGdBQXdHMUFCY0JPQUFEQWJVQUZ3RTRBQU1CdFFBWEFUZ0FBd0hMQUVjQlFBQTlBY3NBUndGQUFEMEJ5d0JIQVVnQUpRSk9BRXNCendBK0FrNEFTd0hQQUQ0Q1RnQkxBYzhBUGdKT0FFc0J6d0ErQWs0QVN3SFBBRDRDVFFCTEFjOEFQZ05LQUVrQ25nQlJBZVlBUndHSi80NEI1Z0JIQWUwQUJBR1EvL2NCN1FBRUFaRC85d0h0QUFRQmtQLzNBUC8vOVFKZkFETUJwUUF2QWxZQVN3SFJBRDRDR1AvMUFhOEFLQUQzQUVjQTB3QWRBbDBBTXdHVUFDb0NUZ0JMQWM4QVBnSk9BRXNCendBK0FrNEFTd0hQQUQ0Q1RnQkxBYzhBUGdKT0FFc0J6d0ErQWwwQU13R2xBQ29DR3YvMkFhOEFLQUx6LzlZQ1R3QXVBbDRBTXdHVUFDTUJ0UUFYQVRnQUF3SExBRWNCUUFBOUFONy8xZ0dHQUhBQmhnQitBWVlBWFFHR0FJUUJoZ0RSQVlZQXBBR0dBRU1CaGdCY0FZWUFXQUFBQUZ3QUFBQjVBQUFBWXdJWi8vVUN2UUFSQWRVQUhnSk9BQ0lEU2dCSkFwNEFVUU5LQUVrQ25nQlJBMG9BU1FLZUFGRUNSd0ExQWhqLzlRR3ZBQ2dDR1AvMUFhOEFLQUlZLy9VQnJ3QW9BaGovOVFHdkFDZ0NHUC8xQWE4QUtBSVkvL1VCcndBb0Foai85UUd2QUNnQ0dQLzFBYThBS0FJWS8vVUJyd0FvQWhqLzlRR3ZBQ2dDR1AvMUFhOEFLQUlZLy9VQnJ3QW9BYjhBUndGc0FDa0J2d0JIQVd3QUtRRy9BRWNCYkFBcEFiOEFSd0ZzQUNrQnZ3QkhBV3dBS1FHL0FFY0JiQUFwQWI4QVJ3RnNBQ2tCdndCSEFXd0FLUUQzQUVjQTB3QTBBUGNBT1FEVEFDVUNYUUF6QVpRQUtnSmRBRE1CbEFBcUFsMEFNd0dVQUNvQ1hRQXpBWlFBS2dKZEFETUJsQUFxQWwwQU13R1VBQ29DWFFBekFaUUFLZ0pmQURNQnBRQXZBbDhBTXdHbEFDOENYd0F6QWFVQUx3SmZBRE1CcFFBdkFsOEFNd0dsQUM4Q1RnQkxBYzhBUGdKT0FFc0J6d0ErQWxZQVN3SFJBRDRDVmdCTEFkRUFQZ0pXQUVzQjBRQStBbFlBU3dIUkFENENWZ0JMQWRFQVBnSG1BRWNCaWYrT0FlWUFSd0dPLzQ0QjVnQkhBWW4vamdIbUFFY0JpZitPQWVYLzh3TzQvL01Ba0FCQUFKQUFRUURtQUIwQTlRQTVBUDhBUGdGV0FCMEIxd0E5QWRjQUd3RHlBRnNBNWdBNkFZa0FOZ0lyQUI0RW93QkpBSkFBVUFEdUFGQUEzUUFoQU4wQUJBQTgvdXNCZUFCUEFWWUFOd0VuQURBQlNRQkVBU1lBVUFGTEFFQUJTZ0JTQVlJQURnSDBBQTRBMXdBMkFrSUFUUUs5QUJFREdRQTBBZndBRlFIOEFEVUIvQUFXQWZ3QU53SDhBR1VCL0FBK0Fmd0FQUUg4QUdZQit3QWtBaG4vOVFLSUFGSUIyQUFHQWQ0QUp3RWhBQWdBOHdCMkFnTUFBZ0hoQUFBQkF2LzRBZUVBU0FIZUFCMEI5QUFEQWZjQUF3SHBBRUFCaGdDRkFZWUFnZ0hmQUQ4QjR3QS9BZzRBUndKWkFETUJ0UCtFQWhML2hBRG8vNFFCWlArRUFvRC9oQUhOLzRRQjR2K0VBTk1BTkFKSEFEVUJCZ0EvQWJFQU5BRU1BRDhCTVFCREFUSUFTZ0RzQUVRQk1BQkNBUUVBUkFEQUFFMEJNZ0FIQVVVQVNBQ1lBRVVBcEFBTkFUZ0FTUUNaQUVVQjhnQkpBVVVBU0FFaEFFSUJNUUE0QVRFQVFRRGVBRWNBNUFBdkFPSUFUQUZCQUV3QkZRQlpBYzRBV1FFckFDZ0JGZi9lQVJnQUhnRU1BRDhCNFFBL0FQTUFBQUVTQUFBQnh3QUFBaDRBUXdGYkFDOEI1Z0FiQWFjQUZRSGxBQjRCb0FBV0FjNEFNQUdmQUR3QjBRQXNBYzRBTndGNEFCZ0ErUUFZQVZiLzVRRXQvKzBCVnYvekFTZi85Z0ZKQUFBQkpnQW1BVXYvL3dGS0FCNEI0UUEwQWRzQVRnSGJBQnNCM0FBdEFkc0FHd0hiQURJQjJ3QTJBZHdBVmdIZEFEQUIyd0E2QWQ4QUp3SGJBRVlCMndBakFkc0FIZ0hjQUJJQjJ3QWlBZHNBTndIY0FFc0IzUUF3QWRzQUtBRjRBQ1lBK1FBWkFWWUFEUUV0QUFvQlZnQU9BU2NBQ0FGSkFCd0JKZ0FvQVVzQUdBRktBQ29CZUFCSEFQa0FPZ0ZXQUM0QkxRQXJBVllBTHdFbkFDa0JTUUE5QVNZQVNBRkxBRGtCU2dCS0F2TUFPQUdHQUlvQmhnQ0RBWVlBZndHR0FIZ0JoZ0NLQVlZQVpnR0dBTTBCaGdDWkFZWUFnZ0dHQUc0Q1B3QXlBajhBTWdHR0FJQUJoZ0NBQVlZQWdBR0dBSFFCdnYveUFuci84UUdHQUhNQmhnQjNBWVlBZFFHR0FIQUJoZ0NFQVlZQWhRR1dBRUVCZ3dCZkF3OEFaQUdzLzhjQnJQL0hBWVlBdHdHV0FDQUNXQUFBQUZjQUh3R1dBR0lCaGdDY0FiNEFBQUo2QUFBQmxnQkJBZjhBendIL0FLY0FYZ0FzQUFBQUF3QUFBQU1BQUFBY0FBRUFBQUFBQWZ3QUF3QUJBQUFBSEFBRUFlQUFBQUIwQUVBQUJRQTBBSDRCU0FGK0FaSUJvUUd3QWR3QjZ3SC9BaHNDTndMSEFza0MzUU1EQXlNREpnT1VBNmtEdkFQQUhvVWVuaDc1SUJRZ0dpQWVJQ0lnSmlBd0lETWdPaUJFSUhBZ2VTQ2pJS3doRXlFaUlTWWhMaUdUSVpraUFpSUdJZzhpRWlJVklob2lIaUlySWtnaVlDSmxKY3IyMlBzQy8vOEFBQUFnQUtBQlNnR1NBYUFCcndITkFlb0IrZ0lZQWpjQ3hnTEpBdGdEQXdNakF5WURsQU9wQTd3RHdCNkFIcDRlb0NBVElCZ2dIQ0FnSUNRZ01DQXlJRGtnUkNCd0lIUWdveUNzSVJNaElpRW1JUzRoa0NHV0lnSWlCaUlQSWhFaUZTSVpJaDRpS3lKSUltQWlaQ1hLOXRmN0FmLy8vK1Avd3YvQi82Ny9vZitVLzNqL2EvOWQvMFgvS3Y2Yy9wditqZjVvL2tuK1IvM2EvY2I5dFAyeDR2TGkydUxaNGNEaHZlRzg0YnZodXVHeDRiRGhxK0dpNFhmaGRPRkw0VVBnM2VEUDRNemd4ZUJrNEdMZit0LzMzKy9mN3QvczMrbmY1dC9hMzc3ZnA5K2szRUFMTkFjTUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUdBZ29BQUFBQUFRQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBZ0FBQUFBQUFBQUNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFFQUFBQUFBQU1BQkFBRkFBWUFCd0FJQUFrQUNnQUxBQXdBRFFBT0FBOEFFQUFSQUJJQUV3QVVBQlVBRmdBWEFCZ0FHUUFhQUJzQUhBQWRBQjRBSHdBZ0FDRUFJZ0FqQUNRQUpRQW1BQ2NBS0FBcEFDb0FLd0FzQUMwQUxnQXZBREFBTVFBeUFETUFOQUExQURZQU53QTRBRGtBT2dBN0FEd0FQUUErQUQ4QVFBQkJBRUlBUXdCRUFFVUFSZ0JIQUVnQVNRQktBRXNBVEFCTkFFNEFUd0JRQUZFQVVnQlRBRlFBVlFCV0FGY0FXQUJaQUZvQVd3QmNBRjBBWGdCZkFHQUFZUUFBQUlZQWh3Q0pBSXNBa3dDWUFKNEFvd0NpQUtRQXBnQ2xBS2NBcVFDckFLb0FyQUN0QUs4QXJnQ3dBTEVBc3dDMUFMUUF0Z0M0QUxjQXZBQzdBTDBBdmdIYkFISUFaQUJsQUdrQjNRQjRBS0VBY0FCckFmRUFkZ0JxQWdjQWlBQ2FBZ1FBY3dJSUFna0Fad0IzQWZ3Qi93SCtBWEVDQlFCc0FId0Jid0NvQUxvQWdRQmpBRzRDQXdGQUFnWUIvUUJ0QUgwQjRBQmlBSUlBaFFDWEFSTUJGQUhUQWRRQjJBSFpBZFVCMWdDNUFnb0F3UUU1QWVZQjd3SGtBZVVDRFFJT0Fkd0FlUUhYQWRvQjRRQ0VBSXdBZ3dDTkFJb0Fqd0NRQUpFQWpnQ1ZBSllBQUFDVUFKd0FuUUNiQVBNQllnRnBBSEVCWlFGbUFXY0FlZ0ZxQVdnQll3QUFzQUFzSUxBQVZWaEZXU0FnUzdnQUVWRkxzQVpUV2xpd05CdXdLRmxnWmlDS1ZWaXdBaVZoc0FGRll5TmlHeUVoc0FCWnNBQkRJMFN5QUFFQVEyQkNMYkFCTExBZ1lHWXRzQUlzSUdRZ3NNQlFzQVFtV3JFb0NVTkZSVkpiV0NFaklSdUtXQ0N3VUZCWUliQkFXUnNnc0RoUVdDR3dPRmxaSUxBSlEwVkZZV1N3S0ZCWUliQUpRMFZGSUxBd1VGZ2hzREJaR3lDd3dGQllJR1lnaW9waElMQUtVRmhnR3lDd0lGQllJYkFLWUJzZ3NEWlFXQ0d3Tm1BYllGbFpXUnV3QVN0WldTT3dBRkJZWlZsWkxiQURMQ0JGSUxBRUpXRmtJTEFGUTFCWXNBVWpRckFHSTBJYklTRlpzQUZnTGJBRUxDTWhJeUVnWkxFRllrSWdzQVlqUXJBSlEwV3dDVU93QkVWZ1JiQURLaUVnc0FaRElJb2dpckFCSzdFd0JTV0tVVmhnVUJ0aFVsbFlJMWtoSUxCQVUxaXdBU3NiSWJCQVdTT3dBRkJZWlZrdHNBVXNzQWRESzdJQUFnQkRZRUl0c0FZc3NBY2pRaU1nc0FBalFtR3dBbUptc0FGanNBRmdzQVVxTGJBSExDQWdSU0N3Q2tOanVBUUFZaUN3QUZCWXNFQmdXV2F3QVdOZ1JMQUJZQzJ3Q0N5eUJ3b0FRMFZDS2lHeUFBRUFRMkJDTGJBSkxMQUFReU5Fc2dBQkFFTmdRaTJ3Q2l3Z0lFVWdzQUVySTdBQVE3QUVKV0FnUllvallTQmtJTEFnVUZnaHNBQWJzREJRV0xBZ0c3QkFXVmtqc0FCUVdHVlpzQU1sSTJGRVJMQUJZQzJ3Q3l3Z3NBQWpRckFLS2lFdHNBd3NzUU1EUmJBQllVUXRzQTBzc0FGZ0lDQ3dDME5Lc0FCUVdDQ3dDeU5DV2JBTVEwcXdBRkpZSUxBTUkwSlpMYkFPTENDd0VHSm1zQUZqSUxnRUFHT0tJMkd3RFVOZ0lJcGdJTEFOSTBJakxiQVBMRXRVV0xFR0FVUlpKTEFOWlNONExiQVFMRXRSV0V0VFdMRUdBVVJaR3lGWkpMQVRaU040TGJBUkxMRUFEa05WV0xFT0RrT3dBV0ZDc0E0cldiQUFRN0FDSlVLeEN3SWxRckVNQWlWQ3NBRVdJeUN3QXlWUVdMRUJBRU5nc0FRbFFvcUtJSW9qWWJBTktpRWpzQUZoSUlvalliQU5LaUVic1FFQVEyQ3dBaVZDc0FJbFliQU5LaUZac0F0RFI3QU1RMGRnc0FKaUlMQUFVRml3UUdCWlpyQUJZeUN3Q2tOanVBUUFZaUN3QUZCWXNFQmdXV2F3QVdOZ3NRQUFFeU5Fc0FGRHNBQStzZ0VCQVVOZ1FpMndFaXl4QUFORlZGZ0FzQTRqUWlCRnNBb2pRckFKSTdBRVJXQkNJR0N3QVdHMUR3OEJBQTBBUWtLS1lMRVJCaXV3Y1NzYklsa3RzQk1zc1FBU0t5MndGQ3l4QVJJckxiQVZMTEVDRWlzdHNCWXNzUU1TS3kyd0Z5eXhCQklyTGJBWUxMRUZFaXN0c0Jrc3NRWVNLeTJ3R2l5eEJ4SXJMYkFiTExFSUVpc3RzQndzc1FrU0t5MndIU3l3REN1eEFBTkZWRmdBc0E0alFpQkZzQW9qUXJBSkk3QUVSV0JDSUdDd0FXRzFEdzhCQUEwQVFrS0tZTEVSQml1d2NTc2JJbGt0c0I0c3NRQWRLeTJ3SHl5eEFSMHJMYkFnTExFQ0hTc3RzQ0Vzc1FNZEt5MndJaXl4QkIwckxiQWpMTEVGSFNzdHNDUXNzUVlkS3kyd0pTeXhCeDByTGJBbUxMRUlIU3N0c0Njc3NRa2RLeTJ3S0N3Z1BMQUJZQzJ3S1N3Z1lMQVBZQ0JESTdBQllFT3dBaVZoc0FGZ3NDZ3FJUzJ3S2l5d0tTdXdLU290c0Nzc0lDQkhJQ0N3Q2tOanVBUUFZaUN3QUZCWXNFQmdXV2F3QVdOZ0kyRTRJeUNLVlZnZ1J5QWdzQXBEWTdnRUFHSWdzQUJRV0xCQVlGbG1zQUZqWUNOaE9Cc2hXUzJ3TEN5eEFBTkZWRmdBc0FFV3NDc3FzQUVWTUJzaVdTMndMU3l3REN1eEFBTkZWRmdBc0FFV3NDc3FzQUVWTUJzaVdTMndMaXdnTmJBQllDMndMeXdBc0FKRlk3Z0VBR0lnc0FCUVdMQkFZRmxtc0FGanNBRXJzQXBEWTdnRUFHSWdzQUJRV0xCQVlGbG1zQUZqc0FFcnNBQVd0QUFBQUFBQVJENGpPTEV1QVJVcUxiQXdMQ0E4SUVjZ3NBcERZN2dFQUdJZ3NBQlFXTEJBWUZsbXNBRmpZTEFBUTJFNExiQXhMQzRYUEMyd01pd2dQQ0JISUxBS1EyTzRCQUJpSUxBQVVGaXdRR0JaWnJBQlkyQ3dBRU5oc0FGRFl6Z3RzRE1zc1FJQUZpVWdMaUJIc0FBalFyQUNKVW1LaWtjalJ5TmhJRmhpR3lGWnNBRWpRckl5QVFFVkZDb3RzRFFzc0FBV3NBUWxzQVFsUnlOSEkyR3dCVVVyWllvdUl5QWdQSW80TGJBMUxMQUFGckFFSmJBRUpTQXVSeU5ISTJFZ3NBUWpRckFGUlNzZ3NHQlFXQ0N3UUZGWXN3SWdBeUFic3dJbUF4cFpRa0lqSUxBSVF5Q0tJMGNqUnlOaEkwWmdzQVJEc0FKaUlMQUFVRml3UUdCWlpyQUJZMkFnc0FFcklJcUtZU0N3QWtOZ1pDT3dBME5oWkZCWXNBSkRZUnV3QTBOZ1diQURKYkFDWWlDd0FGQllzRUJnV1dhd0FXTmhJeUFnc0FRbUkwWmhPQnNqc0FoRFJyQUNKYkFJUTBjalJ5TmhZQ0N3QkVPd0FtSWdzQUJRV0xCQVlGbG1zQUZqWUNNZ3NBRXJJN0FFUTJDd0FTdXdCU1Zoc0FVbHNBSmlJTEFBVUZpd1FHQlpackFCWTdBRUptRWdzQVFsWUdRanNBTWxZR1JRV0NFYkl5RlpJeUFnc0FRbUkwWmhPRmt0c0RZc3NBQVdJQ0Fnc0FVbUlDNUhJMGNqWVNNOE9DMndOeXl3QUJZZ3NBZ2pRaUFnSUVZalI3QUJLeU5oT0Myd09DeXdBQmF3QXlXd0FpVkhJMGNqWWJBQVZGZ3VJRHdqSVJ1d0FpV3dBaVZISTBjallTQ3dCU1d3QkNWSEkwY2pZYkFHSmJBRkpVbXdBaVZoc0FGRll5TWdXR0liSVZsanVBUUFZaUN3QUZCWXNFQmdXV2F3QVdOZ0l5NGpJQ0E4aWpnaklWa3RzRGtzc0FBV0lMQUlReUF1UnlOSEkyRWdZTEFnWUdhd0FtSWdzQUJRV0xCQVlGbG1zQUZqSXlBZ1BJbzRMYkE2TENNZ0xrYXdBaVZHVWxnZ1BGa3VzU29CRkNzdHNEc3NJeUF1UnJBQ0pVWlFXQ0E4V1M2eEtnRVVLeTJ3UEN3aklDNUdzQUlsUmxKWUlEeFpJeUF1UnJBQ0pVWlFXQ0E4V1M2eEtnRVVLeTJ3UFN5d05Dc2pJQzVHc0FJbFJsSllJRHhaTHJFcUFSUXJMYkErTExBMUs0b2dJRHl3QkNOQ2lqZ2pJQzVHc0FJbFJsSllJRHhaTHJFcUFSUXJzQVJETHJBcUt5MndQeXl3QUJhd0JDV3dCQ1lnTGtjalJ5TmhzQVZGS3lNZ1BDQXVJeml4S2dFVUt5MndRQ3l4Q0FRbFFyQUFGckFFSmJBRUpTQXVSeU5ISTJFZ3NBUWpRckFGUlNzZ3NHQlFXQ0N3UUZGWXN3SWdBeUFic3dJbUF4cFpRa0lqSUVld0JFT3dBbUlnc0FCUVdMQkFZRmxtc0FGallDQ3dBU3NnaW9waElMQUNRMkJrSTdBRFEyRmtVRml3QWtOaEc3QURRMkJac0FNbHNBSmlJTEFBVUZpd1FHQlpackFCWTJHd0FpVkdZVGdqSUR3ak9Cc2hJQ0JHSTBld0FTc2pZVGdoV2JFcUFSUXJMYkJCTExBMEt5NnhLZ0VVS3kyd1FpeXdOU3NoSXlBZ1BMQUVJMElqT0xFcUFSUXJzQVJETHJBcUt5MndReXl3QUJVZ1I3QUFJMEt5QUFFQkZSUVRMckF3S2kyd1JDeXdBQlVnUjdBQUkwS3lBQUVCRlJRVExyQXdLaTJ3UlN5eEFBRVVFN0F4S2kyd1JpeXdNeW90c0Vjc3NBQVdSU01nTGlCR2lpTmhPTEVxQVJRckxiQklMTEFJSTBLd1J5c3RzRWtzc2dBQVFDc3RzRW9zc2dBQlFDc3RzRXNzc2dFQVFDc3RzRXdzc2dFQlFDc3RzRTBzc2dBQVFTc3RzRTRzc2dBQlFTc3RzRThzc2dFQVFTc3RzRkFzc2dFQlFTc3RzRkVzc2dBQVBTc3RzRklzc2dBQlBTc3RzRk1zc2dFQVBTc3RzRlFzc2dFQlBTc3RzRlVzc2dBQVB5c3RzRllzc2dBQlB5c3RzRmNzc2dFQVB5c3RzRmdzc2dFQlB5c3RzRmtzc2dBQVFpc3RzRm9zc2dBQlFpc3RzRnNzc2dFQVFpc3RzRndzc2dFQlFpc3RzRjBzc2dBQVBpc3RzRjRzc2dBQlBpc3RzRjhzc2dFQVBpc3RzR0Fzc2dFQlBpc3RzR0Vzc0RZckxyRXFBUlFyTGJCaUxMQTJLN0E2S3kyd1l5eXdOaXV3T3lzdHNHUXNzQUFXc0RZcnNEd3JMYkJsTExBM0t5NnhLZ0VVS3kyd1ppeXdOeXV3T2lzdHNHY3NzRGNyc0RzckxiQm9MTEEzSzdBOEt5MndhU3l3T0NzdXNTb0JGQ3N0c0dvc3NEZ3JzRG9yTGJCckxMQTRLN0E3S3kyd2JDeXdPQ3V3UENzdHNHMHNzRGtyTHJFcUFSUXJMYkJ1TExBNUs3QTZLeTJ3Ynl5d09TdXdPeXN0c0hBc3NEa3JzRHdyTGJCeExDdXdDR1d3QXlSUWVMQUJGVEF0QUFCTHVBRElVbGl4QVFHT1dia0lBQWdBWXlDd0FTTkVzQUlqY0xFRUFVU3hBQWRDc2hrQkFDcXhBQWRDc3d3SUFRZ3FzUUFIUXJNV0JnRUlLckVBQ0VLeURRRUpLckVBQ1VLeUFRRUpLck1PQ0FFTEtyRUZBa1N4SkFHSVVWaXdRSWhZc1FVRVJMRW1BWWhSV0xvSWdBQUJCRUNJWTFSWXNRVUNSRmxaV1ZtNEFmK0ZzQVNOc1FNQVJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUMwQUxRQW5BQ2NDZndBQUFxSUJ6UC83LzBJRGhQN1VBb1gvK3dLaUFjNy8rZjgrQTRUKzFBQUFBQUFBQUFBQUFBQUFhQUNJQVBRQm5BSVVBb1FDbUFMT0F0NERMZ05rQTRBRGxBUE1BK1lFSGdRK0JJZ0U3Z1V3Qlh3RnlnWDhCbVFHZEFhR0JwZ0d0Z2JNQnVvSFhBZ09DRVlJbmdqY0NUNEpnZ202Q2dJS05BcE9DbndLc2dyV0N4UUxSZ3VHQzhJTURneGNETG9NNkEwZURVWU5oZzIyRGVJT0dnNUVEbDRPYmc2V0RyUU96QThtRDN3UHdoQWVFRzRReUJFK0VZUVJrQkdjRWVZUitoSmdFcVlTNkJORUU1NFR5aFFjRkhnVXZoVHVGVG9WYkJXeUZqd1duQmE2RnNvWERCY01GeHdYaUJmbUdGb1lyaGpVR1V3WmZobjZHZ0lhS2hwT0dtSWEvQnNvRzJnYmVodUtHNW9idEJ1OEhBQWNEaHhBSEZBY1dCeGtITWdkTmg0QUhoQWVJaDQwSGtZZVdCNXFIbndlekI4dUgwQWZVaDlrSDNZZmlCK2FINndmdmlCQ0lGUWdaaUI0SUlvZ25DQ3VJTkloTmlGSUlWb2hiQ0YrSVpBaDBpSmNJbWdpZENLQUlvd2ltQ0trSXlZampDT1lJNlFqc0NPOEk4Z2oxQ1BnSSt3a1dDUmtKSEFrZkNTSUpKUWtvQ1M4SlNRbE1DVThKVWdsVkNWZ0pib2x4aVhZSmVRbDlpWUNKbHdtMkNicUp2WW5DQ2NVSnlZbk1pZEVKMUFuWWlmSUo5b29haWg4S0lnb21paW1LTGdveENrcUtkUXA1aW55S2dRcUVDb2lLaTRxUUNwTUtsNHE3Q3IrS3hBcmFpdkdLOWdyNUN2MkxBSXNGQ3dnTEZ3c3NDekNMTllzNGkxZUxYQXRmQzJNTFp3dDZDMzZMZ3d1SEM0c0xsNHVmaTZRTHNZdS9DOGVMekF2UEM5T0wxNHZjQzk4TDd3d0RqQWdNQ3d3UGpCS01Gd3dhRERtTVdReGRqR0NNWkl4b2pHME1jQXgwakhlTWZBeC9ES21NeDR6TURNOE01QTBFRFFpTkRRMGVEVHVOUUExRERVZU5TbzFQRFZJTlZvMVpqVjROWVExNURaTU5sNDJhalo4Tm9nMm1qYXNOcmcyeWpiV051ZzI5RGRLTjZ3NEVqaGlPTHc0empqYU9PdzQrRGtLT1JZNUtEazBPVVk1VWpsa09YQTVnam1PT2FBNXJEb01Pbkk2NWpyeU93UTdFRHNpT3k0N1BqdE9PMTQ3Ymp1d085ZzhBand1UEdnOGlEekVQUFk5T0QxcVBhdzkwRDNzUGdZK1RqNkFQcncremo3YVB1dysrRDhLUHhZL2hEK1FQNXcvcmorNlA4dy8yRC9xUC9aQUNFQVVRQ1pBTWtDZ1FTNUJRRUZNUVY1QmFrRjhRWWhCbWtHbVFocEM3a0w2UXdaREdFTWtRelpEUWtOVVEyQkRja04rUTVCRG5FT3VRN3BEemtQY1ErNUQra1FHUkU1RVdrUm1SSGhFaEVTV1JLSkV0RVRBUk5KRTNrVHdSUHhGY0VYb1JmcEdCa1lZUnBCR29rYXVSc0JHekViWVJ1Ukc4RWI4Unc1SEdrY3NSemhIU2tkV1IyaEhkRWVHUjVKSHBFZXdSOEpIemtmYVNEaElTa2hXU0doSWRFaVNTTEJJd0VqY1NPUkkva2tLU1JaSlZFbWlTYkpKdWtuR1NkWktka3ArU29wS21rcXlTc2hLMkVyb1N2aExDRXNZU3loTE9FdUFTK3hMOUV3d1REaE1nRXlVVEtSTXVFeldUT3BNL0UwUVRTSk5aRTFzVFpSTnZFM1FUZGhONkU0R1RsQk9lazZRVHJ4T3prN2dUd2hQUWs5MlQrWlFTbEJvVUtCUTJsRU9VU3hSVUZHSVViQlI0RkhzVWZSU0pGSTJVbVpTbmxMVVV3QlRPRk5xVTVwVDZsUVlWRHhVYkZTa1ZMcFZBbFV3VlZwVmtsWEtWZXhXS0ZaYVZvcFdyRmJjVnY1WExsZGlWNUpYMWxmV1Y5WlgxbGdDV0J4WVVGaVNXTDVZOUZqOFdSeFpKRmxlV1d4WmVsbUlXWlpacEZteVdjQlp6bG5jV2VwYUdGb3lXbVphcGxyU1d3aGJRbHRpVzdaYjhGd2FYRFJjYUZ5cVhOWmRERjFFWFdSZHVGM3lYaHhlTmw1cVhxaGUwbDhHWHo1ZlhsK3NYK1JmOUdBRVlCUmdKR0EwWUVSZ1ZHQmtZSFJnaEdEc1lRWmhJbUZBWVY1aGVtR2lZYlpoM0dId1loNWlNR0pDWW01aW1tTE9Zd3hqTEdOTVkzWmpvR1BXWkJaa1ZHU0laSmhrb0dUeVpQNWxDbVVzWlR4bFBHVlFaV0Jsbm1XdVpiNWx6bVgwWmlCbU5BQUFBQUlBVFAvOUFOWUNrUUFHQUJFQWpVdXdERkJZUUJrQUFBRURBUUFEYkFBQkFRNUhCQUVEQXdKWEFBSUNGd0pJRzB1d0RsQllRQmtBQUFFREFRQURiQUFCQVE1SEJBRURBd0pYQUFJQ0R3SklHMHV3SFZCWVFCa0FBQUVEQVFBRGJBQUJBUTVIQkFFREF3SlhBQUlDRndKSUcwQVdBQUVBQVc0QUFBTUFiZ1FCQXdNQ1Z3QUNBaGNDU0ZsWldVQU1Cd2NIRVFjUUpoTVFCUWNXS3pjSEp4TS9BUmNDRmhVVUJpTWlOVFEyTTVFZkJqb0dKUVZiRVJJUEh4SVB6d0lIQWJVR0FnYjlzeElPRHhJZ0R4SUFBQUFDQUZBQjBRRUFBbjBBQlFBTEFBaTFDZ2NFQVFJc0t4TUhKejhCSHdFSEp6OEJGM0FkQXh3bUJFVWRCQjBtQXdIVkJBYWlCQWFpQkFhaUJBWUFBQUFBQWdBVUFDQUIzUUkvQUNNQUp3QmVRRnNoQVFjSUFnRUJBQXdCQWdFRFJnc0JDUWdKYmdRQkFnRUNid3dLQWdnUUR3MERCd0FJQjE0T0JnSUFBUUVBVVE0R0FnQUFBVlVGQXdJQkFBRkpKQ1FrSnlRbkppVWpJaUFmSFJ3YkdoZ1hFaEVTRWhFU0VSSVFFUWNjS3lVekZ3Y2pCeU1uTnlNSEl5YzNJeWMzTXpjakp6Y3pOek1YQnpNM014Y0hNeGNIS3dFSE16Y0JRbklFQTNzckh3UXFjaXNmQXlwcEJBTnlIV2tFQTNJcEh3TW5jaWtlQkNkd0JRUjVsaDV5SHZjRkhiVUZzTFVGc0FRZWV3UWRyQWVsckFlbEJCMTdld0FBQXdBaS80RUJhUUo3QUNJQUtRQXdBTEJBSGlJaEFRTUFCQzBzSlJnVUJnTUhBd0FQQVFFQ0EwWW1BUUFTQVFNQ1JVdXdDbEJZUUJzQUFRSUNBV01BQUFBRVZRQUVCQTVIQUFNREFsY0FBZ0lYQWtnYlM3QU1VRmhBR2dBQkFnRnZBQUFBQkZVQUJBUU9Sd0FEQXdKWEFBSUNGd0pJRzB1d0RsQllRQm9BQVFJQmJ3QUFBQVJWQUFRRURrY0FBd01DVndBQ0FnOENTQnRBR2dBQkFnRnZBQUFBQkZVQUJBUU9Sd0FEQXdKWEFBSUNGd0pJV1ZsWnR4Z1ZFaGdVQlFjWUt3QVhEd0VtSndjZUFSVVVCZzhCSXljM0ppYy9BUjRCRnpjdUFUVTBOajhCTXhjSEJoWVhOdzRCRlJZbUp3YytBVFVCUFN3TUNTY3JHelE0VDBFUkdnWVFURFFJQnhkQUh4czJPVkZCRWhzSEVvc25KUmd0TjY0bEpCa3JOd0h0RXlnQ0d3UEdHVFV1TkZFSmZRWjFBaUVyQWhVWEFjc2FOUzQwVHdhTEI0T2lKUk8xQmpnaXlTVVR1UWs2SWdBQUJRQkovNllDK3dLaEFBVUFFUUFjQUNnQU13Qk9RRXNLQVFVTEFRY0FCUWRmQUFJQUFBWUNBRjhKQVFNREFWY0lBUUVCRGtjQUJnWUVWd0FFQkJjRVNDa3BIUjBTRWdZR0tUTXBNaTh0SFNnZEp5TWhFaHdTR3hjVkJoRUdFQ29NQnhRckNRRXZBUUVYQkJZVkZBWWpJaVkxTkRZekRnRVZGRE15TmpVMEppTUFGaFVVQmlNaUpqVTBOak1PQVJVVUZqTXlOalUwSXdLei9jWVRCQUk2RlA1OVBWaFJPajVhVUVSQ1d6MUNMeTBCMGo1WVVUbytXVkJFUVM0c1BVSmNBb3I5SEFzTEF1VU1GRWRCWTNCSFFtSndJMWhQYmxoUE5UbisrVVpDWTNCSFFtSndJMWhQTlRsWVQyNEFBQUFBQWdBOC8va0Nqd0tHQUNNQUx3Qk9RRXNPRFFJQkFCMGNBZ0lCRVFFR0FnTkdBUUVBQVVVQUJnSUZBZ1prQUFFQUFnWUJBbDBBQUFBRVZ3Y0JCQVFXUndBRkJRTlhBQU1ER2dOSUFBQXZMaWtuQUNNQUlpWVRGU1FJQnhjckFCY1BBU1lqSWdZVkZCWVhKVGNYRHdJV0ZSUU9BU01pSmpVME56VXVBVFUwTmpNQ0ZSUVdNekkyTlRRbUp3Y0JrMHdPQ2tOSFJVNDdNd0VnVWdVTXRRRWlOMnBLWFd1V0tTeHFYdGxVU2xkakdSYWVBb1lvS1FJclJENDJRZ1FQQ2djbUNRUXlSVHhlTlZKR2VFSUVFMGt5VGx2K2VXWTRRbDFOSlQ4VEJ3QUFBQUFCQUZBQjBRQ1dBbjBBQlFBR3N3UUJBU3dyRXdjblB3RVhjQjBESENZRUFkVUVCcUlFQmdBQUFRQksvM0lCUHdLWEFBOEFMN2NQQmdBREFBRUJSa3V3TFZCWVFBc0FBQUVBYndBQkFSQUJTQnRBQ1FBQkFBRnVBQUFBWlZtMEZSY0NCeFVyQVFZUkZCWVhEd0VqTGdFMUVEY3pGd0UreXpNN0FSVUZRem5mQlJFQ2Y0ditvRjE5TUFZU05vVm1BWENVRXdELy8vL2wvM0VBMmdLV0VRc0FDd0VrQWdqQUFBQUpzUUFCdUFJSXNDOHJBQUFGQUZRQnBRRjlBdFFBQmdBTkFCUUFHd0FpQUNGQUhpSWhJQnNhR1JnWEZSUVNFUThNQ1FZREFnRVRBRU1BQUFCbEZBRUhGQ3NUQnljM05qTVhEd0VuTkQ4QkZ6WVhEd0VuUHdFSEJnY3ZBVGNYRHdFbUx3RTNGL0VYQlFJVUV3TkJCMlVHQldXMkF3SnZDZ1JtS0FrU0JUUVJCakEvQ3hnQlVCUUNXd0lGY0FZRm1RTWxGeEFDTkE0UEF4VVdCaUN2RHcwQmFBOEJFbGtFRHdSVUNnQUFBUUFsQUQ4QndnSFpBQThBTFVBcUNnSUNBUUFCUmc0QkFFUUhCZ0lCUXdNQkFBRUJBRkVEQVFBQUFWVUNBUUVBQVVrU0ZCSVFCQWNYS3dFekZ3Y2pEd0VuTnlNbk56TS9BUmNCQ2JVRUI3Y1dJUVFXdGdRSXRoY2hCQUVlQkNHM0F3UzJCU0MzQkFVQUFBQUFBUUFoLzVZQWdnQS9BQXdBQnJNTUF3RXNLellWRkFjbk56WTFOQ2MxTmplQ1R4SUJOaDRSRUNrak5qb1JCU29vR0JFR0RRVUFBQUFCQUI0QTJ3RWVBU0lBQlFBR3N3UUJBU3dySlFjblB3RVhBUnIzQlFUM0Jmd2hCU0VoQlFBQUFRQTYvLzBBZWdBK0FBb0FSVXV3REZCWVFBd0NBUUVCQUZjQUFBQVhBRWdiUzdBT1VGaEFEQUlCQVFFQVZ3QUFBQThBU0J0QURBSUJBUUVBVndBQUFCY0FTRmxaUUFvQUFBQUtBQWtrQXdjVUt6WVdGUlFHSXlJMU5EWXphUkVSRHlBU0R6NFNEZzhTSUE0VEFBQUFBQUVBQ1ArUkFUSUNwQUFGQUJOQUVBQUFBUUJ2QUFFQkVBRklFaEFDQnhVckZ5TW5BVE1YTHlNRUFRTWlCVzhGQXc0R0FBQUNBRFQvK3dIcEFmTUFDd0FWQUNwQUp3UUJBUVVCQXdJQkExOEFBZ0lBVndBQUFCY0FTQXdNQUFBTUZRd1VFUThBQ3dBS0pBWUhGQ3NBRmhVVUJpTWlKalUwTmpNT0FSVVVNekkyTlRRakFZaGhnWGRiWW9OMloycWFZR3FhQWZOcmFZaWNhbWVJbnkyQ2NhMS9jYkFBQVFBakFBQUE3QUh4QUFrQUVrQVBCZ1FDQUVRQUFBQVBBRWdSQVFjVUt6Y0hJejhCQnljL0FSZkhGekFhSFk0R0JMOEd6czdIOFNrRUpqZ0dBQUFBQUFFQUYvLytBWVlCOFFBZEFETkFNQThLQWdFQUFVWUFBd0lBQWdNQWJBVUJCQUFDQXdRQ1h3QUFBQUZWQUFFQkR3RklBQUFBSFFBY0VTZ3lKd1lIRnlzQUZoVVVCZzhCRnpNM0Z3Y25Jd2NuUHdFK0FUVTBKaU1pQnlNbk5qTUJMMEJEVW53QzBsRURERnZmSmdNRW4wazhLU1ZPUmdjRFVWY0I4VFlyS21GV2hBTURCU2dDQVFJZ3BVeFJJaHdsU1NaT0FBQUJBQVAvbmdGWEFmSUFLUUJRUUUwbkFRVUVHZ1lGQXdJREVBOENBUUlPQVFBQkJFWUFCUVFEQkFVRGJBY0JCZ0FFQlFZRVh3QURBQUlCQXdKZkFBRUFBQUZUQUFFQkFGY0FBQUVBU3dBQUFDa0FLQkVsSWlRa0t3Z0hHU3NBRmhVVUJnY1ZGaFVVRGdFaklpYy9BUll6TWpZMU5DWW5JeWMvQVRJK0FUVTBKaU1pQnlNbk5qTUJEMGhDT1hFK2JFTXNNUUVGTGk1U1owWkNOUVFHTEI5SE1EQXBQVW9HQWsxSkFmSStNaTlYR2dRYlpUZFhNZ2txQlJCU1F6QTNBd1VpQVNWQkppUXJQaWhBQUFBQ0FBMy9uZ0dtQWU0QUVBQVVBRFJBTVJBS0FnQURBVVlGQVFCREFBSUVBbTRBQkFNRWJnVUJBd0FBQTFFRkFRTURBRllCQVFBREFFb1JFaEVUSlNBR0J4a3JKU2NqRHdJbk55TUhKemNCTXdNekZ3TWpBek1CblZFVEZRTWxCQmpLTlFRRUFTc3VMV1FGYkFYMTFWY0NzZ1VFQmJZQ0JpSUJiLzZTQlFFeC90UUFBQUFCQUFuL25RR0ZBZkVBSHdBeVFDOGZBUUFERHc0RUF3SUFEUUVCQWdOR0FBTUFBQUlEQUYwQUFnRUJBbE1BQWdJQlZ3QUJBZ0ZMT1NRbklRUUhGeXNCQnljakJ4Y1dGUlFPQVNNaUp6VTNGak15UGdFMU5DOENQd0VYTXpjWEFYd0ZPSzBZUDU5QmMwY3BLd1lzTERsWk1ZTlRCQjRNTklkT0FnSEdCQU8yRHlKek9sNDJDU29GRHlsSkxsVWVFZ2IxQ2dJREJBQUFBQUlBTVAvNUFiRUNVUUFWQUNFQU5FQXhGUlFDQUFJQ0FRTUVBa1lBQWdBQ2JnQUFCUUVFQXdBRVh3QURBd0ZYQUFFQkdnRklGaFlXSVJZZ0p4WWxJd1lIRnlzU0J4YzJNeklXRlJRT0FTTWlKalUwUGdFM014Y1ZBQWNHRlJRek1qWTFOQ1lqcno4RVJrbEVVaVJYU1ZCVlFwdC9CU0QrK2trRmUxQkVPellCMzdnRk0xQkRMRnhCWUZaS25vNHNGd2IrKzBBWkk1UmdQamM3QUFFQU1QK1lBWndCOEFBTUFDcEFKd29CQVFBQlJnUUJBVU1DQVFBQkFRQlJBZ0VBQUFGVkFBRUFBVWtCQUFrSEFBd0JDd01IRXlzQk53Y0JCeThCQVNNSEp6Y1hBWFFvQlA3Mk5Da0JBVGJxUXdRS1N3SHVBaVgrTTJZTkNBSVlCQVlwQWdBREFDei8rd0djQWs0QUdnQW1BRFFBTTBBd05DQVVCUVFEQWdGR0JBRUJCUUVDQXdFQ1h3QURBd0JYQUFBQUZ3QklHeHNBQUM0c0d5WWJKUUFhQUJrc0JnY1VLd0FXRlJRUEFSNENGUlFPQVNNaUpqVTBOajhCTGdFMU5EWXpEZ0VWRkJZWFBnRTFOQ1lqQWc0QkZSUVdNekkyTlRRdUFTY0JVRXgvQVNZdkh6QlhPVXhZVVVJQkxTNWdTenBJTWpJNlJ6UXdVandyUWpsQ1V5QXhMUUpPUWp4bk5RUVJJVFFuTUUwclMwQS9UaG9FRmpreFJsY2xRRFFzTUJZVVFEWXNNUDdrSVRncE1qcEpOeUl0SEJQLy93QWkvNTRCb3dIMkVRc0FHUUhUQWUvQUFBQUpzUUFDdUFIdnNDOHJBUC8vQURyLy9RQ2JBVThRSWdBUkFBQVJBd0FSQUNFQkVRQUpzUUVCdUFFUnNDOHJBUC8vQUNEL2xnQ2FBVThRSWdBUC93QVJBd0FSQUNBQkVRQUpzUUVCdUFFUnNDOHJBQUFCQUNNQVdRSExBY3NBQ2dBR3N3a0ZBU3dyQVFVSEJROEJKVDhCSlJjQngvNktBUUZWRFFiK2tRVUZBWllJQWFpWkJZOGVCSjBxQnFVZEFQLy9BQ0lBckFIUEFXc1FJZ0lBRGswUkFnSUErN01BRWJFQUFiQk5zQzhyc1FFQnVQK3pzQzhyQUFBQUFBRUFOZ0JaQWRzQnl3QUtBQWF6Q1FJQkxDc0JCd1V2QVNVMUpTYzNCUUhiQmY1ckJnVUJlUDZ2QWhBQmJRRWdLcDBFSG84Rm1RWWRwUUFBQUFJQVdQLzlBV0lDa1FBVUFCOEFmMEFPRWdFQUFRb0pDQWNHQlFNQUFrWkxzQXhRV0VBWEFBQUFBVmNFQVFFQkZrY0ZBUU1EQWxjQUFnSVhBa2diUzdBT1VGaEFGd0FBQUFGWEJBRUJBUlpIQlFFREF3SlhBQUlDRHdKSUcwQVhBQUFBQVZjRUFRRUJGa2NGQVFNREFsY0FBZ0lYQWtoWldVQVRGUlVBQUJVZkZSNGJHUUFVQUJRUkVBWUhFeXNTRmhVVUR3UW5Qd0kyTlRRbUx3RS9BUkFXRlJRR0l5STFORFl6NzNOaVlRSUhKQVFIQm1wUFlWOEREUWtSRWc4ZkVnOENpa285VkR3OEJHWUVCbkVKUUM5Qk1qc0dCaHdEL2EwU0RnOFNJQThTQUFBQUFBSUFLUDlCQXdvQ1dnQXhBRDhBcGtBYUVRRURCQkFCQ0FNM0FRRUlFd0VKQVJRQkFBa2tBUVlGQmtaTHNDWlFXRUF6QUFnREFRTUlBV3dBQVFrREFRbHFBQWNBQkFNSEJGOEFBd01SUndvQkNRa0FWd0lCQUFBUFJ3QUZCUVpYQUFZR0V3WklHMEEzQUFnREFRTUlBV3dBQVFrREFRbHFBQWNBQkFNSEJGOEFBd01SUndBQUFBOUhDZ0VKQ1FKVkFBSUNFa2NBQlFVR1Z3QUdCaE1HU0ZsQUVqSXlNajh5UGhvbUVoWXJGeElSRVFzSEhDc2tCZ2MzSXdZSEl5NEJOVFErQVRjekZ6Y1hBd2MrQVRVMExnRWpJZzRCRlJRZUFUTVhCeTRDTlRRK0FUTXlIZ0VWQkQ0QlB3SW5EZ0lWRkJZekF3cWxtaUVIVjJBTklCODJhVWtFUUI0SE1BVnZlRWVGV20yb1hWK3VkQUVTZWJkbFpycDVZNVZSL2pCQ1Zpa0NCRDA0VkN3WERadVhDUE9jV1JaRk9rK01Xd2dPRHdUK29rb01oSEJTZmtWZXFXeHVuMVVHR3dKZXFuSjV2R2hPalZ6elNvWlhFVEFPQVVwNVJ6YzBBQUFBQXYvMUFBQUI1UUovQUFvQUR3QXdRQzBBQkFJRkFnUUZiQUFGQUFBQkJRQmVBQUlDRGtjR0F3SUJBUThCU0FBQUR3ME1Dd0FLQUFvUkVpSUhCeFlySVM4Q0R3SWpBVE1UQXlNREZ6Y0Jzd1lkam9GRUZqSUJOemVDcEFTbmRuczFqZ0VCakRjQ2YvMkJBa2IrcUFJQ0FBTUFSLy85QWI4Q2dBQVFBQmtBSkFBNVFEWVFBUVFESWdFRkJBSkdBQU1BQkFVREJGMEFBZ0lCVndBQkFRNUhCZ0VGQlFCWEFBQUFEd0JJR2hvYUpCb2pHUkVuSWtNSEJ4Z3JBQlVVQmlNaUp5TTNFemN5RmhVVUJnYzJKaXNCQnhjK0FUVUNOalUwSmljakR3RVdNd0cvZzN4Rk13RWNOWTFJVGpvMlB6YzFXaUZ4T1Qxa2FEdzVldzhTSmlRQk5HMWhhUVBDQWIwQlF6OUFXaGJXTXZjQ0RFOCsvakJUU3pFNkJXK2NBd0FBQVFBei8vb0NCUUtFQUJnQUxFQXBEZ0VDQVFBQlJnQUFBQU5YQkFFREF4WkhBQUVCQWxjQUFnSVhBa2dBQUFBWUFCY2tKQ1FGQnhZckFCY1BBU1lqSWdZVkZCWXpNamNYQndZaklpWTFORDRCTXdIQ1F4RUlPbFYyZ2xoVFcxTUlDbHBZYUc5SWlWOENoRFlzQVRpMG9XeHpRQU11T29kOGViQmVBQUlBUi8vN0FrMENnd0FNQUJnQWJrdXdERkJZUUJjQUFnSUJWd1FCQVFFT1J3VUJBd01BVndBQUFCY0FTQnRMc0E1UVdFQVhBQUlDQVZjRUFRRUJEa2NGQVFNREFGY0FBQUFQQUVnYlFCY0FBZ0lCVndRQkFRRU9Sd1VCQXdNQVZ3QUFBQmNBU0ZsWlFCSU5EUUFBRFJnTkZoUVJBQXdBQzBVR0J4UXJBQllWRkE0Qkl5SW5JemNUTnhJMk5UUW1JeUlIQXdjV013SFRla3lUWjBwMUFSdzF5aXlOWVYxUVNqUVNXamtDZzRKM2VyUmhCY0lCdlFUOW9iaWxhbTRFL25DYkJnQUJBRWNBQUFIWEFuOEFGQUEzUURRUkFRVUVBd0VCQUFzQkF3SURSZ0FBQUFFQ0FBRmRBQVVGQkZVQUJBUU9Sd0FDQWdOVkFBTUREd05JSWhJU0lpSWdCZ2NaS3hNWE54Y0hKdzhDRnpjWEJ5RTNFeUVYQnljSG8zWmxCQXBwY2c0U2U1TURDdjdESERVQlBBTUtqSDhCWGdFQ0JpVUJBVytiQVFNR0pzSUJ2UVltQWdFQUFBQUFBUUJIQUFBQnlnSi9BQkFBTFVBcURRRUVBd01CQVFBQ1JnQUFBQUVDQUFGZEFBUUVBMVVBQXdNT1J3QUNBZzhDU0NJU0VpSWdCUWNZS3hNWE54Y0hKdzhDSXpjVElSY0hKd2VoYjJJRENtWnBEUmN4SERVQkxnUUxoM1lCVXdFQkJTWUNBV1RGd2dHOUJpY0RBUUFBQUFFQU12LzdBaWNDaEFBYkFEaEFOUUVCQUFFUEFRSUFBa1lBQUFFQ0FRQUNiQUFCQVFSWEJRRUVCQlpIQUFJQ0ExY0FBd01YQTBnQUFBQWJBQm9vSXlFU0JnY1hLd0FYQnlNbUl5SUdGUlF6TWo4RER3RU9BU01pSmpVMFBnRXpBZFpSRVFkT1RZT090VUJaRGdrdUNoQStWakp2ZFU2VWFBS0VNeTAxdGFmWUcxOVVCRk9HRXhDRWVueXlYUUFBQUFFQVJ3QUFBbGdDZndBUkFDRkFIZ0FFQUFFQUJBRmVCUUVEQXc1SEFnRUFBQThBU0JFaEVoSWlFUVlIR1NzbEJ5TS9BU2NQQWlNM0V6TURGemNUTXdJZkZ6QWFEYm1wRGhjeEd6VXhKcSt6SXpIRnhjSnNBZ0pweGNJQnZmN2JBZ0lCSlFBQkFFY0FBQURJQW44QUJRQVRRQkFBQVFFT1J3QUFBQThBU0JJUUFnY1ZLek1qTnhNekEzZ3hHelV4T2NJQnZmNUdBQUFBQWYvai81d0E0d0ovQUE4QUgwQWNEUUVBQVFGR0JnVUVBd0JEQUFBQUFWVUFBUUVPQUVnU0d3SUhGU3MzQnc0QkJ5YzFQZ0UvQVJNSEp6Y3pxd3NKVGxVUlIwTUhDeTU1QmdpdDFHQkpZUzRiQ0NkVU8xa0JpQUVHSkFBQ0FFZi8rQUlYQW44QUJRQVNBQ0ZBSGhJT0NBTUFBUUZHQ2dFQVF3SUJBUUVPUndBQUFBOEFTQndTRUFNSEZpc3pJemNUTXdNV0Z3Y0dCeWNtSno4Q013RjNNQnMyTURuRmd3RVFIQWFJYUFINUxqdisxTUlCdmY1R0dhRUhCZ1lEcjZnRTlqUCsxQUFBQUFBQkFFWUFBQUZwQW44QUNBQWZRQndJQVFBQ0FVWUFBUUVPUndBQ0FnQldBQUFBRHdCSUVoSVFBd2NXS3lrQk54TXpBd2N6RndGZy91WWJOVEE1RXVzRHdnRzkva2FiQlFBQkFDY0FBQUtnQW44QUV3QXZRQ3dBQlFBQkF3VUJYUUlCQUFBRVZRWUJCQVFPUndnSEFnTUREd05JQUFBQUV3QVRFaElSRWhFUkVna0hHaXNoTnhNakF5TURJd01ISXhNekZ4TXpFemN6QXdKZ0NBZ0Y5U3gzQmxBcks1RTNGbUlGMFN3M0ZNTUJaLzRrQWR6K25NWUNmMkwrY1FHWFd2MkJBQUFBQVFCSEFBQUNXQUtBQUE0QUpVQWlEUUVEUkFBQkFRTlZBQU1ERGtjQUJBUUFWUUlCQUFBUEFFZ1JFaElSRUFVSEdDc2hJd0VqQXdjak54TXpBVE1UTndNQ0JqSCs2d1l0R0M0Yk56RUJGUVZHTGp3Q0xmNmd6YjRCd2YzVEFpb0UvallBQUFJQU0vLzZBa01DaFFBTkFCa0FMRUFwQlFFREF3RlhCQUVCQVJaSEFBSUNBRmNBQUFBWEFFZ09EZ0FBRGhrT0dCUVNBQTBBRENVR0J4UXJBQllWRkE0Qkl5SW1OVFErQVRNT0FSVVVGak15TmpVMEppTUIwSE5JaTJGcGMwaUtZWUNCV1ZWN2cxbFhBb1dGZVhxellJaDhlYkJlS3JXa2JISzNwV3h2QUFBQUFnQkhBQUFCMVFLQUFBd0FGQUFyUUNnQUJBQUFBUVFBWHdBREF3SlhCUUVDQWc1SEFBRUJEd0ZJQUFBVUV4SVFBQXdBQ3hJa0JnY1ZLd0FXRlJRR0t3RVBBU00zRXpjU05qVTBKd2NERndHQVZZRnlUZ1VYTVJ3MW14MVVkMm9wYmdLQVVVeHdoU25Gd2dHOUFmNmZhMUYyQmdMK3d3RUFBZ0F6LzBVQ25BS0ZBQllBSWdBclFDZ1dBUUFDQVVZRkFnRURBRU1BQXdNQlZ3QUJBUlpIQUFJQ0FGY0FBQUFYQUVna0p5VW9CQWNYS3dRWEZRWVBBUzRCSndjaUpqVTBQZ0V6TWhZVkZBWUhKaFl6TWpZMU5DWWpJZ1lWQWVHN0RBb0ZZN1JHRldselNJcGhhbk43Y3ZGWlZYdURXVmQ3Z1hZZENCUUtBaEZlUndHSWZIbXdYb1Y1b2N3WmxYSzNwV3R3dGFRQUFBQUNBRWYvK0FIV0FvQUFGQUFjQURkQU5BSUJBQVFGQVFFQUFrWUhBUUZEQlFFRUFBQUJCQUJkQUFNREFsY0FBZ0lPUndBQkFROEJTQlVWRlJ3VkhDY2lFaG9HQnhjckFBWUhGaGNIQmdjbkppY2pEd0VqTnhNM01oWVZCejRCTlRRbkJ3TUIxbFJMUFVnQ0R4c0hTekoyQnhjeEd6YWNUbFMvUkVsM2FpZ0JtSFljaFhZR0NBVUVoM2cyeGNJQnZRRlBTY1FVWUVsd0JnTCswUUFCQUJmLyt3R2pBb01BTFFBeFFDNEJBUUFER2hnREF3SUFBa1lBQUFBRFZ3UUJBd01XUndBQ0FnRlhBQUVCRndGSUFBQUFMUUFzSmk0a0JRY1dLd0FYRHdFbUl5SU9BUlVVSGdFWEhnSVZGQTRCSXlJbUp6OEJIZ0V6TWo0Qk5UUXVBU2N1QWpVMFBnRXpBV2M4RGdveFBpdENKUjRySnkwMEpqZGdPaWhTSHdzSkcwb2xMRWNvSGkwbkt6UWtORnc0QW9NZUxRTWxKRG9mSFMwaEdCc3BQeW94VWk4WEZqRURIQndrT3lJZk1DSVlHaWs5S2k5UExRQUFBQUVBUndBQUFlWUNmd0FOQUNKQUh3MEtBZ0FEQVVZQ0FRQUFBMVVBQXdNT1J3QUJBUThCU0JJaUVpQUVCeGNyQVNjakF3Y2pOeE1qQnljM0lSY0IzR1JMTlJZd0dqQkphQVFMQVpBRUFsUUMvbS9Gd2dHVUFnVW1CZ0FBQVFCTC8vc0NOQUovQUJjQUcwQVlBd0VCQVE1SEFBSUNBRmNBQUFBWEFFZ1RKUllpQkFjWEt5VU9BU01pSmpVMFB3RVRNd01HRlJRV016STJOeE16QXdJQkRINXFYR1lFRFNjdk5RTk1TVlJsRERBd0t1dHpmVjlZSFJsYUFUMytiUmdYU2sxalh3R1gvcm9BQVFCRUFBQUNOQUovQUFrQUlVQWVBZ0VBQUE1SEFBRUJBMVVFQVFNRER3TklBQUFBQ1FBSkVoSVJCUWNXS3pNRE14Y1RNd0UzTXdISWhESUhiQVFCQVJVeC9zc0NmemI5N3dJUU4vMkJBQUFCQUVrQUFBTnpBbjhBRXdBelFEQUtBUUFDQVVZQUFBQUNWUVlFQWdJQ0RrY0ZBUU1EQVZVSUJ3SUJBUThCU0FBQUFCTUFFeElTRWhJUkVSRUpCeG9ySVFNakF5TURNeGNUTXhNbk14Y1RNeE0zTXdFQ0QxRUZ3VE44TVFWbkJzUWlNZ2RuQnZzVU1QN09BWmYrYVFKL05QM3dBYUNrTi8zekFnNDIvWUVBQUFFQUFRQUFBaVVDZndBUEFDQkFIUThMQndNRUFBSUJSZ01CQWdJT1J3RUJBQUFQQUVnVUVoUVFCQWNYS3lFakx3RVBBU01UQXpNZkFUOEJNd01CNGpnU2c4SWNOdnllT1JGNHNCMDM2aXo2L1NrQlNnRTFLK2ptTGY3S0FBQUFBQUVBUndBQUFnUUNmd0FOQUI1QUd3QUNBUUFCQWdCc0F3RUJBUTVIQUFBQUR3QklFaElURVFRSEZ5czNCeU0vQVFNekZ4TXpFemN6QWZzV01Cb0dqalVIYlFiSUVEYisvcisvdnk4QmtSLyt5QUUzSVA1d0FBQUJBQVQvL2dIM0FvQUFFUUFwUUNZTUFRSURBd0VCQUFKR0FBSUNBMVVBQXdNT1J3QUFBQUZWQUFFQkR3RklNaUl5SUFRSEZ5czNJVGNYQnljaEJ6Y0JJUWNuTnhjaE53ZEVBUnBOQkFwWi91UXNCUUd1L3ZSSkJBdFNBUk1wQkNrRUJTa0JBaVVDTWdRR0tRRUJKZ0FBQVFBNy8zMEJQd0tHQUFvQUhVQWFBZ0VBQVFGR0NnRUJSQUFBQUFGVkFBRUJEZ0JJRWhVQ0J4VXJBUWNERnc4Qkp4c0JOeGNCUEg1VmV3TUdvREV0b2dRQ2FBcjlSd29hQkFvQmV3RjZDZ1FBQUFBQUFRQTUvNUVCTEFLa0FBVUFFMEFRQUFBQkFHOEFBUUVRQVVnU0VRSUhGU3NGQnlNRE56TUJMQVVpekFRaWFnVUREUVlBLy8vLzVmOTlBT2tDaGhFTEFENEJKQUlEd0FBQUNiRUFBYmdDQTdBdkt3QUFBUUFLQUhFQmZBSHBBQW9BSFVBYUJnVUNBRU1BQVFBQUFWRUFBUUVBVlFBQUFRQkpGUklDQnhVckpRY0RJd01ISnhNM014TUJlQjltQmNJSEc5RUhLbkI1Q0FGUC9yUUREQUZvQlA2V0FBQUIvOGYvaGdHcy82a0FCUUFZUUJVQUFRQUFBVkVBQVFFQVZRQUFBUUJKRWhBQ0J4VXJCU0VuTnlFWEFhWCtKZ1FIQWRzRGVnUWZCQUFBQUFBQkFKWUNCZ0ZLQXFvQUNBQUdzd2dEQVN3ckVoY1BBU1l2QVQ4QitWRVFCMkk2QVJNSEFtRkVGZ0ZRTkFZWkFRQUNBQ2ovK2dGM0FjNEFFZ0FnQUVoQVJSQUJBd0lZRndJQUF3QUJCQUFDQVFJQkJBUkdFUUVDUkFBREFnQUNBd0JzQUFBRUFnQUVhZ0FDQWhGSEJRRUVCQUZWQUFFQkVnRklFeE1USUJNZkdoY1NFd1lIRnlzbER3RTNJd1lISXk0Qk5UUStBVGN6RnpjWEFqNEJQd0luSWc0QkZSUVdNd0ZJQnpNaENGRmlEQ0VmTldoSkJEOGZCL2RCVlNnQ0F6dzJVaXNXREd4ckJlK1ZYQlpGT2srTFhBZ1BFQVQrYUVpR1Z4RXREMGw1UnpZekFBQUNBRG4vK2dHSEFyOEFFUUFlQUVCQVBSMEJCQUVKQVFBRUFrWU1Dd29EQWtRQUFRTUVBd0VFYkFVQkJBQURCQUJxQUFNREFsVUFBZ0lSUndBQUFCSUFTQklTRWg0U0hpWVNGaFlHQnhjckFCWVZGQTRCQnlNdkFSTS9BUU16TmpjekFqNEJOVFFtSXlJT0FROEJGd0ZvSHpacFNnUkhHbEFGTTBJSFUyRU5hMU1zRmcwSlFWVW9Cam9CdFVRNVQ0dGNDQklFQWt4ZUJmNGNsbHYrVjBsNVJ6WXlTSU5XUVE4QUFBQUFBUUFwLy9vQlNnSE1BQm9BTmtBekFBRUFCQUlCQWdBT0FRRUNBMFlBQWdBQkFBSUJiQUFBQUFSWEFBUUVFVWNBQVFFRFZRQURBeElEU0JZVUVTUWpCUWNZS3dFUEFTWWpEZ0VWRkJZek1qY3pGdzRCQnlNdUFqVTBOak1YQVVvTkN5TWVTRk1nSWo4eUNSQWZRaXdLSVNvWGNIQThBYThrQXgwQmpucEFOMkFZTmpRSkJSMUJPWXFzRkFBQ0FDZi8rZ0diQXI4QUV3QWdBRWxBUmhBQkF3SVlBUUFEQUFFRUFBSUJBZ0VFQkVZVEVoRURBa1FBQXdJQUFnTUFiQUFBQkFJQUJHb0FBZ0lSUndVQkJBUUJWUUFCQVJJQlNCUVVGQ0FVSHhvWEVoTUdCeGNySlE4Qk55TUdCeU11QVRVMFBnRTNNeGMvQWdBK0FUOEJKeUlPQVJVVUZqTUJTZ2N6SVFoU1pBMGdIelpwU2dVNUZRVXovdVJDVmlnSlBqaFRMQllNYkdzRjc1VmNGVVk1VDR0Y0NBMmRYZ1g5YzBpRlZ6OE9TWGxITmpJQUFBQUFBZ0FwLy9vQlVRSE9BQmNBSHdBNVFEWWFEd0lEQkFBQkFnTUNSZ0FEQkFJRUF3SnNCUUVFQkFGWEFBRUJFVWNBQWdJQVZRQUFBQklBU0JnWUdCOFlIaElvRmhJR0J4Y3JKUVlISXk0Qk5UUStBVGNYRmhVVUJ4VVVGak15TmpjekFnWUhQZ0UxTkNNQk5rSlZDemd6Tmw4OEIxRDZJeVFqUVJrSmJWTUtZbWd6Ym1VUEJreEpXSTFTQWdFSlJuWllEa0U4TkMwQkluUmRJbFF0TGdBQUFBRUFQLzk5QVpVQ3dRQWFBRnBBRVJvQkFBVVRDUUlDQVFKR0R3NE5Bd0pEUzdBdFVGaEFGUUFGQUFBQkJRQmZBd0VDQWdGVkJBRUJBUkVDU0J0QUd3QUZBQUFCQlFCZkJBRUJBZ0lCVVFRQkFRRUNWUU1CQWdFQ1NWbEFDUklTRmhJVElnWUhHU3NCQnlZaklnWVBBVE1YQnlNUEF4TTNJeWMzTXpjMk14OEJBWWNJS0NNdU9nY05jQVVHY3gwZEJqTXJIVVVGQmtrTEY1QlRBZ0tKQVJNL1BGOEZIdHZXYWdZQlFlQUZIbFdyRGdRQUFBUC94Lzg3QVhVQnpnQVVBQ0lBTUFCVVFGRVNBUU1CSVNBQ0JBTUtDUWNEQlFJRFJoTUJBVVFHQVFNQkJBRURCR3dBQkFJQkJBSnFBQUlGQVFJRmFnQUJBUkZIQndFRkJRQllBQUFBR3dCSUl5TVZGU013SXk4bkpoVWlGU0lwR3lNSUJ4WXJKUWNPQVNNaUppYy9BVFVtTlRRK0FUY3pGemNYRGdJVkZCWXpNajRCUHdJbkFqWS9BU01HRHdFR0ZSNENNd0ZJQ2c5NldEeE5EUU9SSmpOalJBUTdId2lnVENnV0NnZzZUeWtEQXpsZld3d2VCMkJKZWdnQkdTOGdlMVp4ZVVBNkNHZ0lKRkZNZ2xRSURoQUVKa0p2UWpNeVEzdFBFeXNOL2IxZldkNmRQbUVIQmhBa0dRQUFBUUExLy93QmtRSy9BQm9BTFVBcUNBSUNBUUFCUmhRVEVnTUNSQkVRRGdZRUFVTUFBUUFCYndBQUFBSlZBQUlDRVFCSUV4a3FBd2NXS3dBV0R3RUREd0VUTnpRbUl5SUdCeFVQQVJNL0FRTXpQZ0UzTXdGdUpBRUJLZ2t6T1FFUURCeDFSd2MwVkFRMFF3YzRXeTRMQWNndUlRMysvR2NGQVdFT0ZCcWZqUUZyQlFKZ1hnWCtGR0o1SWYvL0FEVC8vQUMzQW9ZUUlnRHpBQUFRQWdGbXBnQUFBUC8vLzliL1B3QzRBb1lRSWdGaEFBQVFBZ0ZtcHdBQUFBQUJBRGIvOVFHZ0FyOEFIZ0FwUUNZV0ZSUURBa1FURWhFR0JRUUJCd0ZEQUFFQUFXOEFBQUFDVlFBQ0FoRUFTQk1ZTFFNSEZpc0FCeFlYRHdFbkppYzNOalUwSmlNaUJnOENFejhCQXpNK0FUOEJGaFVCb0oxRk9RSW5CaTFRQXBvVURTRjBTd2N6VXdVelFnYytXQzRRUmdFUVdXcEtCQW9DUG40TFdsTVhGNW1WYWdVQ1lGNEYvaHBuY3hrQkRra0FBQUFBQVFBMi8vd0F3UUsvQUFVQUJyTUVBUUVzS3pjSEV6OEJBMmt6VXdVelVRRUZBbUJlQmYydEFBRUFOUC84QW9rQnp3QXVBRFpBTXg0ZEFnQURKeHdTQ0FJRkFnQUNSaHNhR0JBR0JRSkRCQUVDQUFKdkFRRUFBQU5WQlFFREF4RUFTQk1WRXhrb0tnWUhHU3NBRmc4QkF3OEJFemMySmlNaUJnOENFemMwSmlNaUJnY1ZEd0VUUHdFSE16NEJOek1lQVE4Q016NEJOek1DWmlRQkFTb0pORGtCQVJBTUhIZEpDVE01QVJBTUczUkpCalF6QlRJaUJ6cFpMZ3NlSkFFQkdRYzRXeTRMQWNndUlRMysvR2NGQVdFT0V4dWlrR1lGQVdFT0ZCcWVqZ0ZyQlFGc1hnWDRaSGNoQnk0aERabGllU0VBQUFFQU5QLzhBWkFCendBYUFDMUFLaFFUQWdBQ0VnZ0NBd0VBQWtZUkVBNEdCQUZEQUFFQUFXOEFBQUFDVlFBQ0FoRUFTQk1aS2dNSEZpc0FGZzhCQXc4QkV6YzJKaU1pQmdjVkR3RVRQd0VITXo0Qk56TUJiU1FCQVNvSk5Ea0JBUkFNRzNaSUJqUXpCVElpQnpwYUxnc0J5QzRoRGY3OFp3VUJZUTRURzUrTkFXc0ZBV3hlQmZoa2R5RUFBZ0FxLy9rQmFnSE9BQThBSFFBbFFDSUVBUU1EQVZjQUFRRVJSd0FDQWdCWEFBQUFGd0JJRUJBUUhSQWNKaVlsQlFjV0t3QVdGUlFPQVFjakxnRTFORDRCTnpNT0FoVVVGak15UGdFMU5DWWpBVGd5TWw5QUJ6VXpNMkJBQno5SUppRWxNVWdtSVNVQngwWkVYSTlWQkFkSFIxdVBWQUlwUjM1Uk9UVklmMUU0TkFBQUFnQWQvMElCaUFITUFCTUFJQUJKUUVZT0RRSURBZ3dCQVFNZkFRUUJDQUVBQkFSR0N3b0pBd0JEQUFFREJBTUJCR3dGQVFRQUF3UUFhZ0FEQXdKVkFBSUNFVWNBQUFBU0FFZ1VGQlFnRkNBbUVoZ1dCZ2NYS3dBV0ZSUU9BUWNqSnc4Q0V6OEJCek0yTnpNQ1BnRTFOQ1lqSWc0QkR3RVhBV2dnTm1wS0JEZ0xCek5MQlRJZ0IxTmlEV3RTTEJZTUNrRldLQWcrQWJWRk9FK0xYQWdPVld3RkFpWmVCZkNYV3Y1WFNYbEhOakpJaFZjOUVBQUFBQUlBSi85Q0FYWUJ6Z0FTQUNBQVJVQkNFQUVEQWhnWEFnQURBa1lSQVFKRUFnRUFBd0ZEQUFNQ0FBSURBR3dBQUFRQ0FBUnFBQUlDRVVjRkFRUUVBVlVBQVFFU0FVZ1RFeE1nRXg4YUZ4SVRCZ2NYS3dVUEFSTWpCZ2NqTGdFMU5ENEJOek1YTnhjQ1BnRS9BaWNpRGdFVkZCWXpBUzhITXprSFUyRU5JQjgyYVVrRVBSOEg5MEJWS0FNRE9qZFNMQllNVDJvRkFhbVdXeFZHT1UrTFhBZ09FQVQrYUVpRVZoUXVEVWw1UnpZeUFBQUFBQUVBTmYvOEFWSUJ5d0FPQUJoQUZRNEpDQWNFQUVRR0JRUURBRU1BQUFCbEdnRUhGQ3NCQnljR0F3OEJFejhCQnpNMk54Y0JTUVVKV25NR016SUdNU0VIV21BVUFZb0NBUTcrNVY4RkFXeGVCZmJFTUFJQUFBQUJBQVAvK1FFa0Fjd0FKUUF1UUNzQkFRQURGZ01DQWdBVUFRRUNBMFlBQUFBRFZ3QURBeEZIQUFJQ0FWY0FBUUVhQVVnYkpSc2tCQWNYS3dBWER3RW1JeUlHRlJRV0Z4NEJGUlFPQVNNbUp6OEJGak15TmpVMEppY3VBVFUwUGdFekFRUWdEZ2ttSlNZMklTTXFMU2xKTHpJckN3a3FNeW8ySkNRcEtpcElLd0hFRHl3Q0lEUWdHU1FhSGpVcEpUNGtCeHN0QlM4MEl4MHBHaDB5SmlVOElRQUFBQUVBUGYvNUFVRUNUZ0FjQUZkQUVoa1JBZ0lERFFZQUF3QUNBa1lXRlFJRFJFdXdMVkJZUUJjRkFRSUNBMVVFQVFNREVVY0FBQUFCVlFBQkFSSUJTQnRBRlFRQkF3VUJBZ0FEQWwwQUFBQUJWUUFCQVJJQlNGbEFDUklVRWhZVklRWUhHU3MzRkRNeU54OEJCZ2NqTGdFL0FSTTNJeWMzTXo4QkZ3Y3pGd2NqQTN3aUtUY0tFRDg5Q3g0a0FRRXVCMFFGQkVrUEx3WVhoZ1FFaXpSVUtWb0JGbHNhQmlrZ0V3RU9OUVVlZUJVRWlRVWUvc2tBQUFBQkFENy8rQUdZQWN3QUdnQXRRQ29RQ3dBREFnQUNBUUlCQWdKR0doa1lEd1FBUkFBQUFnQnVBQUlDQVZVQUFRRVNBVWdyRXhNREJ4WXJKUThCTnlNT0FRY2pMZ0UvQVJNL0FRTUhCaFl6TWpZL0F3Rm9Cak1oQmpoYkxnc2RKQUVCS2dveU9BRUJFQXdiZEVnQ0JqSnNhd1gzWW5naENDNGdEUUVFWndiK29oSVVHWjJORDE0RkFBQUFBQUVBVVFBQUFYNEJ5d0FSQUJ0QUdCRVBDQWNHQlFGRUFBRUJBRlVBQUFBUEFFZ1VGQUlIRlNzQUZSUUhBeU1ETnhjVE16YzJOVFFuUHdFQmZpdWROREV4QlI0Rmd5TWFBaXdCb3lrelIvOEFBY1VHVGY2NjJEd29JQ1VIQ3dBQUFBRUFVUUFBQXBJQnl3QWJBRFpBTXhRSEJRTUFBd0ZHRmdZQ0EwUUFBQUFEVlFBREF4RkhCQUVDQWdGVkJnVUNBUUVQQVVnQUFBQWJBQnNTRWhRUkVRY0hHQ3NoQXlNREl3TTNGeE16RXpjekZ4TXpOelkxTkNjL0FSWVZGQWNEQWFNckJyVTJOakFESmdhZ0ZqUUVKZ1Y0SXhvQ0xCb3Frd0dEL24wQnhRWTEvcVFCV1RReC9xVFdQeVVnSlFjTEtDa3dTdjhBQUFBQUFRQUYvL3NCb3dITUFBOEFKa0FqRHc0S0J3WUNCZ0FCQVVZSUFRRkVBQUVBUXdBQkFSRkhBQUFBRHdCSUZ4UUNCeFVyQlM4QkR3RWpOeWMzSHdFL0FUTUhGd0U1RWxPQUZ6aTFiRElPVDNnWU5xNTNCUzJnb2licjJBa2xtNVlsNGVJQUFBSC9qdjgrQVh3Qnl3QWJBQ3hBS1E4TENnTUJBZ2tCQUFFQ1Joc1pFUkFFQWtRQUFnRUNiZ0FCQVFCWEFBQUFHd0JJRlNRbUF3Y1dLd0FWRkE4QkRnRWpJaThCTnhZek1qY0ROeGNUTXpjMk5UUW5Qd0VCZkN5QlJIUTlKU1VDQnljZVhWOVZNUXMxQ1c4a0dnSXNBYVVyT0V6ZWRXVVBLZ1FQbHdIQ0JrMyt4TVpCS3lJakJ3c0FBQUFBQWYvMy8vWUJjd0hWQUI0QXJFQVdHQUVGQmhjS0NRZ0VBQVVBQVFFQUEwWWRHZ0lHUkV1d0ZWQllRQ01BQUFVQkJRQUJiQUFGQlFaVkFBWUdFVWNBQXdNUFJ3QUJBUUpYQkFFQ0Fob0NTQnRMc0M1UVdFQW1BQUFGQVFVQUFXd0FBd0VDQVFNQ2JBQUZCUVpWQUFZR0VVY0FBUUVDVndRQkFnSWFBa2diUUNvQUFBVUJCUUFCYkFBREFRUUJBd1JzQUFVRkJsVUFCZ1lSUndBRUJCSkhBQUVCQWxjQUFnSWFBa2haV1VBS0ZSSVJJaVVpRVFjSEdpcy9BVElYRmpNeU5qOEJGd1lqSWljbUl5SUhJeWNCRHdFblB3RWZBVGNYU1J3V0p5Z1RNQzhGQ2hnSmZ4YzFNQlVpSEFVUUFTK29PQVFKQlRmR0ZCSTZCZzhPUkVzREQ3QVJFQndPQVpVQkJBVXFCQVFCRGhBQUFBQUFBUUF1LzNRQk9nS09BQzhBTlVBeUFnRUFBeGtQRGdNRUFRQWFBUUlCQTBZQUFRQUNBUUpiQUFBQUExY0VBUU1ERmdCSUFBQUFMd0F1SGh3WUZpUUZCeFFyQUI4QkJ5WWpJZ1lWRkI4QkZBWUhGUllWRkFjR0ZSUXpNamNYQndZaklqVTBOelkxTkNjM1BnRTFOQzhCTkRZekFSMGFBd2taRFNrbUFnRW9LVGNXRnpzTkdRTUZGUmhiR0JSTkF6VXdBUUU5UEFLT0JnVWRCVGxCRVNZd04wRVFBeGRBRzBwUEhrQUZIUVFHV2lCWlNCVkNEQjBJT2owZkVUUlJTd0FBQVFCUC92Z0ErQU1hQUFjQUVFQU5Cd1lDQUVRQUFBQmxFUUVIRkNzVEF3Y25Hd0UzRjdwRUl3UkRQaVVEQVI3OTNBSUdBaDRCK3dNRUFBRC8vLy9xLzNNQTlnS05FUXNBWGdFa0FnSEFBQUFKc1FBQnVBSUJzQzhyQUFBQkFENEEzQUduQVRnQUdBQXhRQzRTRVFjREF3SVVCUVFEQUFFQ1JnQUNBd0p1QkFFREFRTnVBQUVBQVc0QUFBQmxBQUFBR0FBWEV5Y1NCUWNXS3hJUEFTTW5OVDhCRmhjV016STJQd0V6Rnc4Q0ppY21JNGdrRXdjTVNBZ1VTVlFRQ1JZV0R3Z01BVWdKRGxSTkVRRU5JUkFTQmo4RUF4UVlEeFFORWdaQUFnRVhGLy8vQUNuL09nQ3pBYzRSQ3dBRUFQOEJ5OEFBQUFteEFBSzRBY3V3THlzQUFBSUFNZitMQVdJQ2l3QWRBQ1FBWGtBVkdRRURBaDBCQUFNa0NRVUJCQVFBRHdFQkJBUkdTN0FvVUZoQUZRQURBQUFFQXdCZ0FBUUFBUVFCV1FBQ0FnNENTQnRBSFFBQ0F3SnVBQU1BQUFRREFHQUFCQUVCQkZNQUJBUUJWUUFCQkFGSldiY1hFaG9ZSWdVSEdDc0JCeVlyQVFNMk54OEJCZzhCSXljM0xnSTFORFkvQVRNWEJ6Y2ZBUTRCRlJRV0Z4TUJWZ2tuSUFWRE9Tc0lEalZMR3hzRUdTSXJHVnBaR2hzR0dCVkFCc1JHSWlOQkFid0RIUDU2RUU0QkUxa1VvUWFXQmh4Q09uZWlGSmtHamdFVUNCMkthMEE5QWdHRkFBRUFBLy8vQVlnQ1VBQWpBRWhBUlFFQkFBY0RBUUVBSFFvQ0FnRVBBUU1DRXdFRUF3VkdDQUVIQUFBQkJ3QmZCZ0VCQlFFQ0F3RUNYUUFEQXdSVkFBUUVEd1JJQUFBQUl3QWlFaFVpSkJJU0pBa0hHaXNBRnc4QkppTWlEd0V6RndjakJ3WUhGVE0zRndjbkl5YzNOajhCSXljM016YytBVE1CVWpZSUJDb3paQTRPZmdNSGZoUUpMTEpQQXdsVTh3TUhTQXdUUkFNR1JRMEpVa1lDVUJJbkF4bHhjUVFibTBnaEFnTUdKQUVGR3d0aW53VWFiRXBQQUFBQUFnQXFBTHdCcWdJWkFDTUFNUUJRUUUwakFBSUNBU0FjQWdVQ0Z4TUZBUVFFQlE0S0FnQUVCRVlTRVJBSkJ3VUFRd01CQVFJQmJnQUNCZ0VGQkFJRlh3QUVBQUFFVXdBRUJBQlhBQUFFQUVza0pDUXhKREFuRWlJZEt3Y0hHQ3NCQnhZVkZBY1hEd0V2QVFZaklpY0hMd0UvQVNZMU5EY25Qd0V6RnpZek1oYzNNeGNPQWhVVUZqTXlQZ0UxTkNZakFhbEpGQ2c3QVJrR09DWXZMaUJJQnhNQ1NSUW9Pd0lYQnprbkxTd2hTQWNUMFRZaE5DZ2ZOaUUxS0FIOVFDQWxOQ3BBQnhZQlFoNGRRd0VXQmtBY0tUUXFRQWNXUXgwY1FoWXdIelVmSnpZZk5COG5Od0FBQUFFQUZRQUFBZFlCN2dBZkFFUkFRUk1BQWdBSEFVWUtBUWdIQ0c0QUNRQUJBQWtCYkFzQkJ3WUJBQWtIQUY0RkFRRUVBUUlEQVFKZEFBTUREd05JSHg0ZEhCb1pFUklTRWhFUkVoSVJEQWNjS3dFSEl3OEJNeGNISXdjak55TW5Oek0zSnlNbk56TW5NeDhCTXo4Qk13Y3pBYzhHbVRZRHhBUUd4UkFwRWJRREJiWURIbzBEQlg5Vkx3WmlCYWtQTHBHSEFSc2FUaGdFR1g1K0JCa2NTZ1FaMEJqdTdSblFBQUlBVC83NEFQZ0RHZ0FGQUFzQUVrQVBDZ1VFQVFRQVJBQUFBR1VXQVFjVUt4TUhKeE0zRndNSEp4TTNGOFFqQlRRbEE0SWpCRE1qQlFGeUJBUUJwUU1FKytRQ0JnR2RCUWNBQUFBQ0FBdi9tUUdJQW9NQU1RQStBRFpBTXdFQkFBTThOU3NjRWdVQ0FCb0JBUUlEUmdBQ0FBRUNBVnNBQUFBRFZ3UUJBd01XQUVnQUFBQXhBREFmSFJrWEpBVUhGQ3NBRnc4QkppTWlEZ0VWRkJZWEhnRVZGQVlIRmhVVURnRWpJaWMvQVJZek1qNEJOVFFtSnk0Qk5UUTJOeVkxTkQ0Qk14SW1Md0VPQVJVVUZoOEJOalVCV0RBTUNDMHJIekliS1MwMU5qZzBKUzFOTGtVeUN3Y3hQQ0kxSGl3dE5UVThNU1FyU2kwZkxTNHBLeThyTHl0WkFvTVZLZ0VjR3lvVkhDNGtLMEFzS2tnWEtpc2tQeVloS1FVc0d5c1hIVElqS2tBcUtrb1hLU29rUFNYK2t6UWxJaFUzSEI4eEpTUW9QUUFDQUlRQ09RRmRBbmtBQ1FBVEFDUkFJUUlCQUFBQlZ3VURCQU1CQVE0QVNBb0tBQUFLRXdvU0VBNEFDUUFJSXdZSEZDc1NGaFVVSXlJMU5EWXpIZ0VWRkFZaklqVTBNN0lRSHg4UkQ2a1FFUTRmSUFKNUVRNGdIdzRTQVJBT0R4SWZJQUFBQXdBNy8vUUNoZ0pXQUE4QUh3QTNBRlJBVVNFQkJBY3VJd0lGQkFKR0NBRUJDUUVEQndFRFh3QUZBQVlDQlFaZkFBUUVCMWNLQVFjSEdVY0FBZ0lBVndBQUFCb0FTQ0FnRUJBQUFDQTNJRFl5TUN3cUppUVFIeEFlR0JZQUR3QU9KZ3NIRkNzQUhnRVZGQTRCSXlJdUFUVTBQZ0V6RGdJVkZCNEJNekkrQVRVMExnRWpGaGNQQVNZaklnWVZGQll6TWpjWEJ3WWpJaVkxTkRZekFiZUdTVW1HVjFlRlNVbUZWMUI1UWtKNVVFOTVRME41VHo4dENBVWlNams4T3pjeExBVUVNREJKVFZCTUFsWk1pbHRiaWt4TWlsdGJpa3dhUm41VFUzNUdSbjVUVTM1R2F4b2ZBUmxFUTBSSEhBRWdIRmhTVWxnQUFQLy9BRU1CVkFFc0FvY1FBZ0lkQUFBQUFnQXFBREFCaVFHUkFBZ0FFUUFJdFJBS0J3RUNMQ3MvQVJjUEFSY1BBU2MvQVJjUEFSY1BBU2NzcXhjQm1uVUNHb0tkcXhjQm1uVUNHb0xxcHc4SW1wa0lENndPcHc4SW1wa0lENndBQUFBQkFDUUFQd0dxQVI0QUNBQWNRQmtCQVFCREFBRUFBQUZSQUFFQkFGVUFBQUVBU1JJVEFnY1ZLeVVISnpjaEp6Y2hGd0dRSUFVVy9xWURCd0Y2QlVJREJMWUZJQVlBQUFBQkFCNEEyd0VlQVNJQUJRQUdzd1FCQVN3ckpRY25Qd0VYQVJyM0JRVDNCZndoQlNFaEJRQUFCQUFuQVZnQmpRSytBQXNBRndBcEFEQUFvRUFQR1FFRUNCd0JCUVFmSGdJREJRTkdTN0FvVUZoQUxRQUZCQU1FQlFOc0NRRUJBQUlHQVFKZkN3RUlBQVFGQ0FSZENnRURBQUFEQUZzQUJ3Y0dWd0FHQmc0SFNCdEFOQUFGQkFNRUJRTnNDUUVCQUFJR0FRSmZBQVlBQndnR0IxOExBUWdBQkFVSUJGMEtBUU1BQUFOVENnRURBd0JYQUFBREFFdFpRQ0FxS2d3TUFBQXFNQ293THkwb0ppVWtJaUVNRnd3V0VoQUFDd0FLSkF3SEZDc0FGaFVVQmlNaUpqVTBOak1TTmpVMEppTWlCaFVVRmpNMkJ4WVhCd1lISnlZbkl4VVhJelV6TWhVSE5qVTBKdzhCQVN0aVlsRlJZbUpSUjFaV1JrZFdWa2RCS0JnZEFRVVdBeE1jSXdFY1FUNCtJaW9jQVFLK1lsQlJZMk5SVUdMK3NWWkhSbFpXUmtkV29oSWpKQVFDQXdJWU1Bbzl3VGdyQ3gwakFnRkxBQUFCQUY4Q1NBR0RBbXdBQlFBMHRRSUJBQUVCUmt1d0dWQllRQXNBQUFBQlZRQUJBUTRBU0J0QUVBQUJBQUFCVVFBQkFRQlZBQUFCQUVsWnRCSVFBZ2NWS3dFaEp6Y2hGd0dBL3VNRUF3RWRCQUpJQlI4RUFBQUFBZ0E2QVpFQk5BS0ZBQTBBR3dBcFFDWUFBZ0FBQWdCYkJRRURBd0ZYQkFFQkFSWURTQTRPQUFBT0d3NGFGUk1BRFFBTUpRWUhGQ3NTRmhVVURnRWpJaVkxTkQ0Qk13NENGUlFXTXpJK0FUVTBKaVAyUGlkQUpEQS9KMEVsSHpJZU1DUWJNUjR3SXdLRlB5OGtQaVErTHlRK0pSMGNNQm9qTVJ3dkdpTXlBUC8vLy8vL3N3SENBZGtRSWdBT0FBQVJBd0lBLzlqK3VnQUpzUUVCdVA2NnNDOHJBUC8vQUNzQlJRRkRBcjhSQXdKbUFCNEJSd0FKc1FBQnVBRkhzQzhyQUFBQS8vOEFOZ0ZFQVI4Q3dCRURBbWNBTEFGSEFBbXhBQUc0QVVld0x5c0FBQUFBQVFDV0FnWUJTd0txQUFnQUJyTUhBd0VzS3dFSEJnY3ZBVFkzRndGTEFqcGlCeEJQVEFZQ2tBWTBVQUVXUWtzQkFBQUEvLzhBSHY4K0FaNEJ5eEFDQVhBQUFBQUJBRWovdUFIbEFuOEFIUUFqUUNBZEFRQUNBVVlWRkFnSEJnVUFRd0VCQUFBQ1Z3QUNBZzRBU0Nzc0VBTUhGaXNCSXdNSERnRUhKemMrQVQ4QkV5TU9BUlVVRmhjSExnRTFORFk3QVJjQjNFNDFCZ2hPVHcwQlBqOEdCVFZCVGxaR1FoSlJWMzF0cmdVQ1YvNVlNajFmS1JjSEpVNHdLd0d6QlZ0TVBGQVBJQTlkU21WMEJnRC8vd0JVQU5FQWxBRVNFUU1BRVFBYUFOUUFDTEVBQWJEVXNDOHJBQUVBVWY5SEFOa0FEd0FUQUNKQUh4TVFDUWNFQVFJQlJnQUNBUUp1QUFFQkFGZ0FBQUFUQUVnVkpDUURCeFlyRnhZVkZBWWpJaWMvQVJZek1qVTBMd0UzTXdlMUpDZ2VLQm9IQlJnY0pCWXVHQ0VWU1JZZkdpRWdIQUVmSGc4T0hWSkVBUC8vQUVFQlJ3RFRBc0VSQXdKbEFDZ0JSd0FKc1FBQnVBRkhzQzhyQUFBQS8vOEFRZ0ZUQVI0Q2hoQUNBaXNBQVAvLy8vWUFNQUZWQVpFUUl3SGxBSTBBQUJBQ0FlWHlBQUFFQUFML3BnSjJBcUVBQlFBUEFDQUFKQUJFUUVFZ0dnSUJCUllCQWdFQ1JnNElCZ01FUkFBRUJnUnVBQVlBQm00QUFBVUFiZ2dIQWdVREFRRUNCUUZlQUFJQ0R3SklJU0VoSkNFa0V4RVRJaElrR3drSEdpc1hMd0VCSHdFRlB3RVhEd0VqUHdFSEFTY2pEd0luTnlNSEp6OEJNd2N6RnljM0l3Y1lFd01DT2hRRC9lY0VpUVVmRHlvUUdWOENNVG9IQ3dNaUFnNkNLQU1EeUNjZFFBUm9Gd1NZV2dzTEF1VU1DMHdnSmdYeGhIN0xHUDR5QW13REFnSnZBZ1VjNStVRUJMR3hBQUFBQUFNQUF2K21BbnNDb1FBRkFBOEFMUUJCUUQ0ZkdnSUNBUUZHRGd3S0F3VkVBQVFEQUFNRUFHd0FBQUVEQUFGcUJnRUZBQU1FQlFOZkFBRUJBbFVBQWdJUEFrZ1FFQkF0RUN3UktESXZGd2NIR0NzSkFTOEJBUmNCQnlNL0FRY25Qd0VYQUJZVkZBWVBBUmN6TnhjSEp5TUhKejhCUGdFMU5DWWpJZ2NqSnpZekFsUDl4Uk1EQWpvVS9sMFBLaEFaWHdRRWlRVUJiRFF3UFY4Q21UOEJDVWlvSEFNRWRqWXRIaHM1TkFZRFBrRUNpdjBjQ3dzQzVReisrWVIreXhnRElDWUYvdmtwSVI5RVFXVUNBZ1VpQWdFQ0czczVQQmtWR2pZaE9RQUVBQ2IvcGdLYUFxRUFCUUF0QUQ0QVFnREtRQm9yS2hVREFnTU1Dd0lCREFvQkFBRStPQUlIQ3pRQkNBY0ZSa3V3SUZCWVFFUUFCUVFEQkFVRGJBQUtBZ3dDQ2d4c0FBd0JBZ3dCYWdBQkFBQUxBUUJmRGcwQ0N3a0JCd2dMQjE0QUJBUUdWd0FHQmhaSEFBSUNBMWNBQXdNWlJ3QUlDQThJU0J0QVFnQUZCQU1FQlFOc0FBb0NEQUlLREd3QURBRUNEQUZxQUFNQUFnb0RBbDhBQVFBQUN3RUFYdzROQWdzSkFRY0lDd2RlQUFRRUJsY0FCZ1lXUndBSUNBOElTRmxBR2o4L1AwSS9Ra0ZBUFR3N09qYzFFaWtpRVNVaUl5UW5Ed2NjS3hjdkFRRWZBUUFHSXlJblB3RVdNekkyTlRRbkl5YzNNejRDTlRRbUl5SUhJeWMyTXpJV0ZSUUdCeFVXRlFFbkl3OENKemNqQnljL0FUTUhNeGNuTnlNSFBCTURBam9VQS82WFhVY2pIQUVETEJRMVFWWWxBd1VlRkN3ZUlCb29NQVVETnpBcE5pc2xTZ0dGT2djTEF5SUNEb0lvQXdQSUp4MUFCR2dYQkpoYUN3c0M1UXdML3NKRkJ4OENCaThtUFFNREhRRVdKUllXR2lRZktDb2hIVGNQQWhKQS91d0NiQU1DQW04Q0JSem41UVFFc2JFQS8vLy82UDg2QVBJQnpoRUxBQ0lCU2dITHdBQUFDYkVBQXJnQnk3QXZLd0QvLy8vMUFBQUI1UU5TRUNJQUpBQUFFUU1DZlFCbUFMZ0FDTEVDQWJDNHNDOHJBQUQvLy8vMUFBQUI1UU5SRUNJQUpBQUFFUU1DZVFCd0FMZ0FDTEVDQWJDNHNDOHJBQUQvLy8vMUFBQUI1UU5KRUNJQUpBQUFFUU1DZkFCcEFMZ0FDTEVDQWJDNHNDOHJBQUQvLy8vMUFBQUI2Z05BRUNJQUpBQUFFUU1CYVFCbUFMZ0FDTEVDQWJDNHNDOHJBQUQvLy8vMUFBQUI1UU14RUNJQUpBQUFFUU1BYWdCbUFMZ0FDTEVDQXJDNHNDOHJBQUQvLy8vMUFBQUI1UU5pRUNJQUpBQUFFUU1CWndCbUFMZ0FDTEVDQXJDNHNDOHJBQUFBQXYvV0FBQUN5UUovQUJZQUdnQThRRGtLQVFNQ0doa1NFQTREQmdRRkZnRUFCQU5HQUFVREJBTUZaQUFEQXdKVkFBSUNEa2NBQkFRQVZRRUJBQUFQQUVnU0ppSVJGUkFHQnhrcktRRTNKdzhDSXdFaEZ3Y25JeE0zRnc4QkZ6TTNGd0VqQXpjQ3YvN01BZ2J3Yng0MEFaMEJQd1FMbW1JRzJ3TUQyZ1Z3bXdQK3R3WEYwVFhmTUswM0FuOEdKZ0wrOENvRkpDajFBd1lDSC83T0tRQUFBQUVBTS85SEFnVUNoQUFyQUVCQVBRNERBUU1CQUNNY0doSUVBd1FDUmdBQUFBVlhCZ0VGQlJaSEFBRUJCRmNBQkFRWFJ3QURBd0pYQUFJQ0V3SklBQUFBS3dBcUZTUXJKQ1FIQnhnckFCY1BBU1lqSWdZVkZCWXpNamNYQndZUEFSY1dGUlFHSXlJblB3RVdNekkxTkM4Qk55NEJOVFErQVRNQndrTVJCenRVZG9OWVUxdFRDQXBNU3c4Z0pDZ2VLQm9IQlJnY0pCWXVFbVZzU0lsZkFvUTJMQUU0dEtGc2MwQURMaklITUJRV0h4b2hJQndCSHg0UERoMDlBb2Q2ZWJCZUFQLy9BRWNBQUFIWEExSVFJZ0FvQUFBUkF3SjlBRmdBdUFBSXNRRUJzTGl3THlzQUFQLy9BRWNBQUFIWEExRVFJZ0FvQUFBUkF3SjVBR01BdUFBSXNRRUJzTGl3THlzQUFQLy9BRWNBQUFIWEEwa1FJZ0FvQUFBUkF3SjhBRndBdUFBSXNRRUJzTGl3THlzQUFQLy9BRWNBQUFIWEF6RVFJZ0FvQUFBUkF3QnFBRmdBdUFBSXNRRUNzTGl3THlzQUFQLy9BRWNBQUFFbUExSVFJZ0FzQUFBUkF3SjkvOUFBdUFBSXNRRUJzTGl3THlzQUFQLy9BRWNBQUFFd0ExRVFJZ0FzQUFBUkF3SjUvOW9BdUFBSXNRRUJzTGl3THlzQUFQLy9BRWNBQUFFMkEwa1FJZ0FzQUFBUkF3SjgvOVFBdUFBSXNRRUJzTGl3THlzQUFQLy9BRWNBQUFFWUF6QVFJZ0FzQUFBUkF3S0EvOUFBdUFBSXNRRUNzTGl3THlzQUFBQUNBQi8vK3dKakFvTUFFUUFpQUptMURRRUJBZ0ZHUzdBTVVGaEFJUVVCQWdZQkFRY0NBVjBBQkFRRFZ3Z0JBd01PUndrQkJ3Y0FWd0FBQUJjQVNCdExzQTVRV0VBaEJRRUNCZ0VCQndJQlhRQUVCQU5YQ0FFREF3NUhDUUVIQndCWEFBQUFEd0JJRzBBaEJRRUNCZ0VCQndJQlhRQUVCQU5YQ0FFREF3NUhDUUVIQndCWEFBQUFGd0JJV1ZsQUdCSVNBQUFTSWhJZ0hoMGJHaGtXQUJFQUVCSVNSUW9IRmlzQUZoVVVEZ0VqSWljalB3RWpKemN6RXpjU05qVTBKaU1pRHdFekZ3Y2pEd0VXTXdIcGVreVRaMGwyQVJzT1pRSUVaeVRLTEl4Z1hVMU9JYWtDQktzUEVsbzZBb09DZDNxMFlRWENjZ1VnQVNZRS9hRzRwV3B1QlB3RUlXK2JCdi8vQUVjQUFBSllBMEFRSWdBeEFBQVJBd0ZwQUpnQXVBQUlzUUVCc0xpd0x5c0FBUC8vQURQLytnSkRBMUlRSWdBeUFBQVJBd0o5QUlNQXVBQUlzUUlCc0xpd0x5c0FBUC8vQURQLytnSkRBMUVRSWdBeUFBQVJBd0o1QUkwQXVBQUlzUUlCc0xpd0x5c0FBUC8vQURQLytnSkRBMGtRSWdBeUFBQVJBd0o4QUljQXVBQUlzUUlCc0xpd0x5c0FBUC8vQURQLytnSkRBMEFRSWdBeUFBQVJBd0ZwQUlNQXVBQUlzUUlCc0xpd0x5c0FBUC8vQURQLytnSkRBekVRSWdBeUFBQVJBd0JxQUlNQXVBQUlzUUlDc0xpd0x5c0FBQUFCQUVvQWNBR2hBYWdBRHdBR3N3d0VBU3dyQVFjWER3RW5CeWMxTnljL0FSYzNGd0dna0hBQkczS1NGcEp5QVJ0eWtoY0JqSUNCQmhXQmdSVUdnWUFIRllLQ0ZRQUFBQUFEQURQL29nSkRBc3dBRndBZkFDY0FRVUErRXdFQ0FTVWtHaGtYQlFNQ0N3Y0NBQU1EUmhRQkFVUUtDQUlBUXdBQ0FnRlhBQUVCRmtjRUFRTURBRmNBQUFBWEFFZ2dJQ0FuSUNZcEtpUUZCeFlyQUJVVURnRWpJaWNITHdFM0pqVTBQZ0V6TWhjM0h3RUhBQmNCSmlNaUJoVUVOalUwSndFV013SkRTSXRoT1M4K0hnSkFWa2VLWVVBdk5oNENPUDV6UEFFZEtUUjdnUUVwZ3pmKzVDUXhBaGVRZXJOZ0ZtNEtCWEpBbTNtd1hoaGZDZ2RpL2lvM0Fma1d0YVRldDZWNE52NEpFd0FBLy84QVMvLzdBalFEVWhBaUFEZ0FBQkVEQW4wQWZBQzRBQWl4QVFHd3VMQXZLd0FBLy84QVMvLzdBalFEVVJBaUFEZ0FBQkVEQW5rQWhnQzRBQWl4QVFHd3VMQXZLd0FBLy84QVMvLzdBalFEU1JBaUFEZ0FBQkVEQW53QWZ3QzRBQWl4QVFHd3VMQXZLd0FBLy84QVMvLzdBalFETVJBaUFEZ0FBQkVEQUdvQWZBQzRBQWl4QVFLd3VMQXZLd0FBLy84QVJ3QUFBZ1FEVVJBaUFEd0FBQkVEQW5rQVVnQzRBQWl4QVFHd3VMQXZLd0FBQUFJQVNBQUFBY2dDZndBTkFCWUFMMEFzQmdFREFBUUZBd1JnQUFVQUFBRUZBRjhBQWdJT1J3QUJBUThCU0FBQUZoVVRFUUFOQUF3U0VTUUhCeFlyQUJZVkZBWXJBUWNqTnhNekJ6Y1NOalUwSndjREJ4Y0JjMVdCY2s4T01CbzJNQTl0SFZSM2JTUUVjQUlMVVUxd2hYakNBYjExQWY2ZWJGRjFCZ0wrNWlJQ0FBQUFBQUVBUC85OUFlWUN3QUE2QUdWQUZDc0JBd1FOQVFFREN3RUFBUU5HSnlZbEF3QkRTN0F0VUZoQUhRQUZBQUlFQlFKZkFBTURCRlVBQkFRUlJ3QUJBUUJYQUFBQUdnQklHMEFiQUFVQUFnUUZBbDhBQkFBREFRUURYUUFCQVFCWEFBQUFHZ0JJV1VBSkl4SVlMeVVZQmdjWkt3QVdGeDRCRlJRT0FTTW1KejhCRmpNeU5qVTBKaWN1QVRVME5qYytBVFUwSXlJR0J3TVBBaE0zSXljM016YytBVE15RmhVVUJnY09BUlVCVWlFaUp5b3BTQzQyS1FvSUtqVXBPQ0lpSnlrakpDQWhZemhGQ0M4Y0J6TXJIVVVGQmtrTUNsNU5RRXNtSlI4ZUFVWXFIaUE1S0NVOEl3Y2JLd1F0TkNRZEt4d2hOeWtwTkNJZE1DSlFQRGIrbmRacUJnRkI0QVVlWEU1Vk9qZ3NPU01jS2g0QS8vOEFLUC82QVhjQ3FoQWlBRVFBQUJBQ0FFTVNBQUFBLy84QUtQLzZBWGNDcWhBaUFFUUFBQkFDQUhZZEFBQUEvLzhBS1AvNkFZTUNteEFpQUVRQUFCQUNBV0lpQUFBQS8vOEFLUC82QVo4Q2lCQWlBRVFBQUJBQ0FXa2JBQUFBLy84QUtQLzZBWGdDZVJBaUFFUUFBQkFDQUdvYkFBQUEvLzhBS1AvNkFYY0NxaEFpQUVRQUFCQUNBV2NiQUFBQUFBTUFMdi82QWpzQnpnQWlBQ29BT0FCWVFGVWlBUVlBTnlVV0JnUUNCZzRCQndJRFJnQUNCZ2NHQWdkc0NnZ0pBd1lHQUZjRkFRQUFFVWNBQndjRFZRUUJBd01TUndBQkFRTlZCQUVEQXhJRFNDc3JJeU1yT0NzNE1qQWpLaU1wRnhjVEVpY1FDd2NaS3dBM0Z4WVZGQWNWRmpNeU5qY3pGd1lISXk0Qk5UUTNCZ2NqTGdFMU5ENEJOek1YRmdZSFBnRTFOQ01FRGdFVkZCWXpNajRCTnpZM0p3R3JPQWRSL0FGR0pFSVlDaEZBVndzNk1nUkhVd3doSURacFNRUm9IbFFMWTJvMC92NVJMQllNQ2p4T0pCTVhVQUhMQXdFSlJuVmFGWFUwTFJoa0VBZE5TaUFWZ1ZJV1JqcE9pMXdJSVFSMVhTSlZMUzRFU1hsR056TklnRkVvRnhvQUFRQXAvMGNCU3dITUFDc0FSa0JES3dFQUJRRUJBZ0FOQVFFQ0l5SWJHUkVGQkFFRVJnQUNBQUVBQWdGc0FBRUVBQUVFYWdBQUFBVlhBQVVGRVVjQUJBUURXQUFEQXhNRFNCb2tLaEVrSWdZSEdTc0JCeVlqRGdFVkZCWXpNamN6Rnc0QkR3RVhGaFVVQmlNaUp6OEJGak15TlRRdkFUY3VBVFUwTmpNZkFRRTlDaU1mU0ZNaElVQXhDUkViT2lRUUlDUW9IaWdhQndVWUhDUVdMaEl3TDNGdlBBWUJpd01kQVk1NlB6aGdHREF5RERRVUZoOGFJU0FjQVI4ZUR3NGRQZ2hDVVlxc0ZBa0FBQUQvL3dBcC8vb0JVUUtxRUNJQVNBQUFFQUlBUXdJQUFBRC8vd0FwLy9vQldBS3FFQ0lBU0FBQUVBSUFkZzBBQUFELy93QXAvL29CY3dLYkVDSUFTQUFBRUFJQlloSUFBQUQvL3dBcC8vb0JhQUo1RUNJQVNBQUFFQUlBYWdzQUFBRC8vd0F5Ly93QTVnS3FFQ0lBOHdBQUVBSUFRNXdBQUFELy93QTAvL3dBOHdLcUVDSUE4d0FBRUFJQWRxZ0FBQUQvL3dBZC8vd0JEZ0tiRUNJQTh3QUFFQUlCWXEwQUFBRC8vd0EwLy93QTdnSjRFQ0lBOHdBQUVBSUNnS1lBQUFBQUFnQTEvL2tCZ2dMQUFDRUFNQUE5UURvaElCOGRHUllWRkJJSkFRSVFBUU1CQWtZQUFnRUNiZ0FEQXdGWEFBRUJFVWNGQVFRRUFGY0FBQUFYQUVnaUlpSXdJaTh0R3pZa0JnY1hLd0FWRkE0QkJ5TXVBVFUwUGdFM014WVhKaWNITHdFM0ppYy9BVE1XRnpjZkFRY0NQZ0UxTkNjbUl5SU9BUlVVRmpNQmR6SmZRUWMyTXpOZlFBY1RFeFl6aEFVSGR6SklBUjRGVERkMkJRaHJQVWtuQkJFek1Va25JaVlCM3A1Y2tWWUVCMGRIV1k5U0FnRUpRemc4QXhzM0xoOEhHQ0kyTmdNY01QM1JTSDlTSkJzdVIzOVJPalVBQUFELy93QTAvL3dCcVFLSUVDSUFVUUFBRUFJQmFTVUFBQUQvL3dBcS8va0JhZ0txRUNJQVVnQUFFQUlBUXdVQUFBRC8vd0FxLy9rQmFnS3FFQ0lBVWdBQUVBSUFkaEVBQUFELy93QXEvL2tCZHdLYkVDSUFVZ0FBRUFJQlloWUFBQUQvL3dBcS8va0JrZ0tJRUNJQVVnQUFFQUlCYVE0QUFBRC8vd0FxLy9rQmF3SjVFQ0lBVWdBQUVBSUFhZzRBQUFELy93QW5BRGdCd1FIVEVDSUNBQUFBRUNzQUVRQ0NBRHMrTUJFTEFCRUFyQUdXUGpBQUViRUJBYkE3c0M4cnNRSUJ1QUdXc0M4ckFBQURBQ1Ava1FGcUFod0FHUUFpQUNzQVBrQTdHUlVDQWdFb0d3SURBZ3dCQUFNRFJoWUJBVVFMQ1FJQVF3QUNBZ0ZYQUFFQkVVY0VBUU1EQUZjQUFBQVhBRWdqSXlNckl5b3FLeVFGQnhZckFCVVVEZ0VISXlZbkJ5OEJOeVkxTkQ0Qk56TVdGemNmQVFjQ0Z4TW1JeUlPQVJVV1BnRTFOQ2NERmpNQmFqSmZRQWNRRFRNZEFqTXNNMkJBQnd3U0p4c0RKK2tTcHdzUE1VZ21kMGdtRUtZTERRR1ZXRnlQVlFRQ0JHNExCbTRpWEZ1UFZBSUJCbFVLQjFUK25oc0Jad1JIZmxGdVNIOVJPQnIrbVFNQUFBRC8vd0ErLy9nQm1BS3FFQ0lBV0FBQUVBSUFReHdBQUFELy93QSsvL2dCbUFLcUVDSUFXQUFBRUFJQWRpY0FBQUQvL3dBKy8vZ0JtQUtiRUNJQVdBQUFFQUlCWWl3QUFBRC8vd0ErLy9nQm1BSjVFQ0lBV0FBQUVBSUFhaVVBQUFELy8vK08vejRCZkFLcUVDSUFYQUFBRUFJQWR2Y0FBQUFBQWdBZS8wRUJpUUsrQUJNQUlBQkdRRU1mQVFRQkNBRUFCQUpHRGcwTUF3SkVDd29KQXdCREFBRURCQU1CQkd3RkFRUUFBd1FBYWdBREF3SlZBQUlDRVVjQUFBQVNBRWdVRkJRZ0ZDQW1FaGdXQmdjWEt3QVdGUlFPQVFjakp3OENFejhCQXpNMk56TUNQZ0UxTkNZaklnNEJEd0VYQVdvZk5tbEtCVGNNQnpOc0JUSkJDRkppRFd0U0xCVU5Da0JXS0FrK0FiVkVPVStMWEFnT1Ztd0ZBeHBmQlA0Y2xseitWMGw1UnpZeVNJVldQaEQvLy8rTy96NEJmQUo1RUNJQVhBQUFFQUlBYXZVQUFBRC8vLy8xQUFBQjZRTWtFQ0lBSkFBQUVRTUFjUUJtQUxnQUNMRUNBYkM0c0M4ckFBRC8vd0FvLy9vQm5nSnNFQ0lBUkFBQUVBSUFjUnNBQUFELy8vLzFBQUFCNVFNN0VDSUFKQUFBRVFNQ2VnQmlBTGdBQ0xFQ0FiQzRzQzhyQUFELy93QW8vL29CZkFLUEVDSUFSQUFBRUFJQlpSWUFBQUFBQXYvMS96d0I1UUovQUJzQUlBQklRRVVBQVFVR0FVWUlBUUlCUlFBSEF3Z0RCd2hzQUFZQ0JRSUdCV3dBQ0FBQkFnZ0JYZ0FEQXc1SEJBRUNBZzlIQUFVRkFGY0FBQUFiQUVnaEVSRWtFUkVTSnlFSkJ4d3JCUVlqSWlZMU5EWTNMd0lQQWlNQk14TWpEZ0VWRkRNeU56TURJd01YTndIakp5c1lJU0k1QmgyT2dVUVdNZ0UzTjRJSk9DY2NIeU1EblFTbmRudU9OaHdjRnpvN05ZNEJBWXczQW4vOWdUZzJGUjB3QXJiK3FBSUNBQUFBQWdBby96c0Jkd0hPQUNRQU1nQmdRRjBmQVFZRktpa0NBd1lpQVFjREl3RUVCd2tCQUFFRlJpQUJCVVFBQmdVREJRWURiQUFEQndVREIyb0FBUVFBQkFFQWJBQUZCUkZIQ0FFSEJ3UlZBQVFFRWtjQUFBQUNXQUFDQWhzQ1NDVWxKVElsTVIwWEVoWWlFU1FKQnhvckZnWVZGQll6TWpjekZ3WWpJaVkxTkRZL0FTTUdCeU11QVRVMFBnRTNNeGMzRndNUEFTWStBVDhDSnlJT0FSVVVGalA4SmhRUElSMENEQ1lzR3lVbE5pRUhWRjhOSVI4MWFFa0ZQaDhITHdjTXRFQlVLQU1ET3pkUkxCY01Pak1TRVJFdEhEVWlIUmMyTisyWVdSWkZPaytMWEFnUEVBVCtvbXNCTWtpRVZoUXVEa2w1UnpZekFQLy9BRFAvK2dJRkExRVFJZ0FtQUFBUkF3SjVBSHdBdUFBSXNRRUJzTGl3THlzQUFQLy9BQ24vK2dGUkFxb1FJZ0JHQUFBUUFnQjJCZ0FBQVAvL0FEUC8rZ0lGQTBrUUlnQW1BQUFSQXdKOEFIVUF1QUFJc1FFQnNMaXdMeXNBQVAvL0FDbi8rZ0ZyQXBzUUlnQkdBQUFRQWdGaUNnQUFBUC8vQURQLytnSUZBejRRSWdBbUFBQVJBd0ZtQUhFQXVBQUlzUUVCc0xpd0x5c0FBUC8vQUNuLytnRktBb1lRSWdCR0FBQVFBZ0ZtQkFBQUFQLy9BRFAvK2dJRkEwRVFJZ0FtQUFBUkF3SjdBRzBBdUFBSXNRRUJzTGl3THlzQUFQLy9BQ24vK2dGdEFxQVFJZ0JHQUFBUUFnRmovUUFBQVAvL0FFZi8rd0pOQTBFUUlnQW5BQUFSQXdKN0FHb0F1QUFJc1FJQnNMaXdMeXNBQUFBREFDZi8rZ0lUQXI4QUVnQVlBQ1VBVEVCSkVBRURBaDBCQUFNQkFRUUFBd0lDQVFRRVJoZ1hGQklSQUFZQ1JBQURBZ0FDQXdCc0FBQUVBZ0FFYWdBQ0FoRkhCUUVFQkFGVkFBRUJFZ0ZJR1JrWkpSa2tIeFlTRkFZSEZ5c0JBdzhCTnlNR0J5TW1OVFErQVRjekZ6OEJGd2NuUHdFWEFENEJQd0VuSWc0QkZSUVdNd0diVVFjeklRZFZZUTQvTm1wS0JEa1dCSWNjQkJ3bEEvNXRRVllwQ0Q0NFV5d1hEQUsvL2ExckJlK1lXU2xyVDR0Y0NBMmRYczRFQlo0REJmMnBTSVJYUUE1SmVVYzJNdi8vQUVmLyt3Sk5BeVFRSWdBbkFBQVJBd0J4QUc0QXVBQUlzUUlCc0xpd0x5c0FBQUFDQUNmLytnSGhBcjhBSEFBcEFKbEFIUnNCQXdRUUFRY0NJUUVBQndFQkNBQURBZ0lCQ0FWR0dCY1dBd1JFUzdBS1VGaEFLZ0FIQWdBREIyUUFBQWdDQUFocUJRRUVDUVlDQXdJRUExMEFBZ0lSUndvQkNBZ0JWUUFCQVJJQlNCdEFLd0FIQWdBQ0J3QnNBQUFJQWdBSWFnVUJCQWtHQWdNQ0JBTmRBQUlDRVVjS0FRZ0lBVlVBQVFFU0FVaFpRQmNkSFFBQUhTa2RLQ01pQUJ3QUhCUVNFaFlTRkFzSEdTc0JBdzhCTnlNR0J5TW1OVFErQVRjekZ6Y2pKemN6UHdJSE14Y0hBRDRCUHdFbklnNEJGUlFXTXdHSFBRY3pJUWRWWVE0L05tcEtCRGtRZVFRRGZnSUVNdzlRQlFQK29rRldLUWcrT0ZNc0Z3d0NMLzQ5YXdYdm1Ga3BhMCtMWEFnTmNBUWRERjRGYndVYy9nTkloRmRBRGtsNVJ6WXlBUC8vQUVjQUFBSGJBeVFRSWdBb0FBQVJBd0J4QUZnQXVBQUlzUUVCc0xpd0x5c0FBUC8vQUNuLytnR09BbXdRSWdCSUFBQVFBZ0J4Q3dBQUFQLy9BRWNBQUFIWEF6c1FJZ0FvQUFBUkF3SjZBRlFBdUFBSXNRRUJzTGl3THlzQUFQLy9BQ24vK2dGc0FvOFFJZ0JJQUFBUUFnRmxCZ0FBQVAvL0FFY0FBQUhYQXo0UUlnQW9BQUFSQXdGbUFGZ0F1QUFJc1FFQnNMaXdMeXNBQVAvL0FDbi8rZ0ZSQW9ZUUlnQklBQUFRQWdGbUN3QUFBQUFCQUVmL093SFhBbjhBSndCUFFFd0RBUUVBQ3dFREFoY0JCQVVEUmdBRkF3UURCUVJzQUFBQUFRSUFBVjBBQ1FrSVZRQUlDQTVIQUFJQ0ExVUhBUU1ERDBjQUJBUUdWd0FHQmhzR1NDY2xFaFVpRVNVU0lpSWdDZ2NjS3hNWE54Y0hKdzhDRnpjWEJ5TUhCaFVVRmpNeU56TVhCaU1pSmpVMFB3RWpOeE1oRndjbkI2TjJaUVFLYW5FT0UzeVRBd3BCTEJNWEZDY2tBd3N1TVNFbkZ5alpHelVCUGdJSmpYOEJYZ0VDQmlVQkFXK2JBUU1HSmtJZkZSTVlMaHMzSnlBaElqdkNBYjBHSmdJQkFBQUNBQ24vT3dGUkFjNEFMQUEwQUxsTHNDNVFXRUFUTHlNQ0J3Z3NBUUFIRkFFRUFBd0JBUUlFUmh0QUV5OGpBZ2NJTEFFR0J4UUJCQUFNQVFFQ0JFWlpTN0F1VUZoQU1RQUhDQUFJQndCc0FBSUVBUVFDQVd3SkFRZ0lCVmNBQlFVUlJ3WUJBQUFFVlFBRUJCSkhBQUVCQTFnQUF3TWJBMGdiUURnQUJ3Z0dDQWNHYkFBQUJnUUdBQVJzQUFJRUFRUUNBV3dKQVFnSUJWY0FCUVVSUndBR0JnUlZBQVFFRWtjQUFRRURXQUFEQXhzRFNGbEFFUzB0TFRRdE14SW9GaGNpRVNVUkNnY2JLeVFITXdjR0ZSUVdNekkzTXhjR0l5SW1OVFEvQVFZSEl5NEJOVFErQVRjWEZoVVVCeFVVRmpNeU5qY3pGd0lHQno0Qk5UUWpBUllrQlVFVEZ4UW5KQU1MTGpFaEp4Y3FFUkVMT0RNMlh6d0hVUG9qSkNOQ0dBb1JmMU1LWW1rME94dGlIeFVUR0M0Yk55Y2dJU0krQmdNR1RFbFlqVklDQVFsR2RsZ09RVHcwTFJnQk9uUmVJbFV0TGdELy93QkhBQUFCMXdOQkVDSUFLQUFBRVFNQ2V3QlVBTGdBQ0xFQkFiQzRzQzhyQUFELy93QXAvL29CZEFLZ0VDSUFTQUFBRUFJQll3UUFBQUQvL3dBeS8vc0NKd05KRUNJQUtnQUFFUU1DZkFDQUFMZ0FDTEVCQWJDNHNDOHJBQUQvLy8vSC96c0Jmd0tiRUNJQVNnQUFFQUlCWWg0QUFBRC8vd0F5Ly9zQ0p3TTdFQ0lBS2dBQUVRTUNlZ0I1QUxnQUNMRUJBYkM0c0M4ckFBRC8vLy9IL3pzQmVBS1BFQ0lBU2dBQUVBSUJaUklBQUFELy93QXkvL3NDSndNK0VDSUFLZ0FBRVFNQlpnQjlBTGdBQ0xFQkFiQzRzQzhyQUFELy8vL0gvenNCZFFLR0VDSUFTZ0FBRUFJQlpoZ0FBQUQvL3dBeS94NENKd0tFRUNJQUtnQUFFUU1CYlFDWEFBSUFDTEVCQWJBQ3NDOHJBQUFBQlAvSC96c0JkUUsyQUF3QUlRQXdBRDRBWEVCWkh3RURBUzh1QWdRREZ4WVVBd1VDQTBZZ0RBb0pCUU1HQVVRR0FRTUJCQUVEQkd3QUJBSUJCQUpxQUFJRkFRSUZhZ0FCQVJGSEJ3RUZCUUJZQUFBQUd3QklNVEVpSWpFK01UMDFOQ0l3SWpBcUtCNGRFaEFJQnhNckFEVTBOeDhCQmhVVUZ4VUdCeE1IRGdFaklpWW5Qd0UxSmpVMFBnRTNNeGMzRnc0Q0ZSUWVBVE15UGdFL0FpY0NOajhCSXdZUEFRWVZIZ0l6QVFBOUZBRXFKUUlZRlFvUGVsZzhUUTBEa1NZellrUUZPeUFIb1V3b0N4QUdDRHBRS1FJRE9WOWNEQjBJWFVwN0NBRVpMeUFDRmk4elBnOEZMU1FpQ3dZREZmNTFWbkY1UURvSWFBZ2tVVXlDVkFnT0VBUW1RbTlDSXk0VVEzdFBFeXNOL2IxZldkNmJRR0VIQmhBa0dmLy9BRWNBQUFKWUEwa1FJZ0FyQUFBUkF3SjhBSndBdUFBSXNRRUJzTGl3THlzQUFQLy9BRFgvL0FHUkE0WVFJZ0JMQUFBUkF3SjgvOG9BOVFBSXNRRUJzUFd3THlzQUFBQUNBRkFBQUFLVEFuOEFHZ0FmQUVkQVJCa09BZ01FQVVZSUJnSUVEUXNNQ1FRRENnUURYZ0FLQUFFQUNnRmRCd0VGQlE1SEFnRUFBQThBU0JzYkFBQWJIeHNmSGh3QUdnQWFFUkVSRVJJU0VpSVNEZ2NjS3dFREJ5TS9BU2NQQWlNM0V5TW5Oek0zTXdjaE56TUhNeGNISVFjWFB3RUNUaVVYTUJzTnVhb09GekFhSXp3REEwQVBNQkFCWWc0d0VEMEVBLzR1RXErMEVBSGgvdVRGd213Q0FtbkZ3Z0VmQkNGNWVYbDVCQ0dIQWdLSEFBQUJBRnovL0FHNkFyOEFKQUJBUUQwY0ZBSUJBZ2dDQWdVQUFrWVpHQmNEQWtRUkVBNEdCQVZEQUFVQUJXOERBUUlFQVFFR0FnRmRBQUFBQmxVQUJnWVJBRWdURVJJVUVoWXFCd2NhS3dBV0R3RUREd0VUTnpRbUl5SUdCeFVQQVJNakp6Y3pQd0lITXhjSEl3TXpQZ0UzTXdHWEpBRUJLZ2t6T1FFUURCeDFSd2MwVGt3RUExRUNCRFFQZkFVRGd5OEhPRnN1Q3dISUxpRU4vdnhuQlFGaERoUWFuNDBCYXdVQ013UWRERjRGYndVYy9xUmllU0gvL3dBOUFBQUJRd005RUNJQUxBQUFFUU1DZ3YvUEFMZ0FDTEVCQWJDNHNDOHJBQUQvL3dBVC8vd0JHUUtGRUNJQTh3QUFFQUlDZ3FVQUFBRC8vd0JIQUFBQkxRTWtFQ0lBTEFBQUVRTUNnZi9RQUxnQUNMRUJBYkM0c0M4ckFBRC8vd0FvLy93QkF3SnNFQ0lBOHdBQUVBSUNnYVlBQUFELy93QkhBQUFCTUFNN0VDSUFMQUFBRVFNQ2V2L01BTGdBQ0xFQkFiQzRzQzhyQUFELy93QWsvL3dCQmdLUEVDSUE4d0FBRUFJQlphQUFBQUFBQWYvdy96c0F4d0ovQUJZQUxrQXJDd0VCQWdGR0FBSUFBUUFDQVd3QUJBUU9Sd0FBQUE5SEFBRUJBMWNBQXdNYkEwZ1hJaEVrRVFVSEdDczNCeU1PQVJVVU16STNNeGNHSXlJbU5UUTJQd0VUTTQ0WERURW1HeDRYQXd3aUtSa2VKRE1iTlRERnhUdzVFUnNuR3pBZ0dCYzZQNzhCdlFBQUF2L2ovenNBdHdLR0FBa0FJQUEvUUR3Z0h3d0xDZ1VEQUJZQkFnTUNSZ0FEQUFJQUF3SnNBQUFBQVZjRkFRRUJGa2NBQWdJRVZ3QUVCQnNFU0FBQUdSY1ZGQk1SQUFrQUNDTUdCeFFyRWhVVUJpTWlOVFEyTXhjRER3RU9BUlVVTXpJM014Y0dJeUltTlRRMk54TTN0eEVQSUJJUEJTOEdDekVtR3g0WEF3d2lLUmtlSWk4eUJRS0dJQThTSUE4U3UvNmhhd0U4T1JFYkp4c3dJQmdXT0RzQmJGNEFBQUQvL3dCSEFBQUE0UU0rRUNJQUxBQUFFUU1CWnYvUUFMZ0FDTEVCQWJDNHNDOHJBQUFBQVFBMC8vd0FuZ0hMQUFVQUJyTUVBUUVzS3pjSEV6OEJBMmcwTXdVeU1BRUZBV3hlQmY2aC8vOEFSLytjQWRvQ2Z4QWlBQ3dBQUJBREFDMEE5d0FBQUFRQU5QOC9BWXNDaGdBSkFCTUFHUUFyQUd0QUZpc3FHQmNFQlFBbkFRUUZBa1lnSGhrV0ZSUUdCRU5Mc0MxUVdFQVpBZ0VBQUFGWEJ3TUdBd0VCRmtjQUJBUUZWUUFGQlJFRVNCdEFGZ0FGQUFRRkJGa0NBUUFBQVZjSEF3WURBUUVXQUVoWlFCWUtDZ0FBS1NnbUpRb1RDaElQRFFBSkFBZ2pDQWNVS3hJVkZBWWpJalUwTmpNeUZSUUdJeUkxTkRZekFRY1RQd0VERndjT0FRY25OejRCTnhNM0l5YzNNemNYdHhFUElCSVA4eEVQSUJJUC92dzBNZ1V5TDk0S0NqdEJFd0UwTGdneEJFOEZCVTh3QWdLR0lBOFNJQThTSUE4U0lBOFMvWHNGQVd4ZUJmNmhCMU5QV3lrWEJ5TkxRQUZmTkFVZUJ3TC8vLy9qLzV3QkhnTkpFQ0lBTFFBQUVRTUNmUCs4QUxnQUNMRUJBYkM0c0M4ckFBRC8vLy9XL3o4QkRnS2JFQ0lCWVFBQUVBSUJZcTBBQUFELy93QkgveDRDRndKL0VDSUFMZ0FBRVFJQmJXd0NBQWl4QWdHd0FyQXZLLy8vQURiL0hnR2dBcjhRSWdCT0FBQVJBZ0Z0TFFJQUNMRUJBYkFDc0M4ckFBRUFOUC8xQWFJQnpRQWVBQzVBS3hZVkFnQUNGQUVCQUFKR0V4SVJCZ1VFQVFjQlF3QUJBQUZ2QUFBQUFsVUFBZ0lSQUVnVEdDMERCeFlyQUFjV0Z3OEJKeVluTnpZMU5DWWpJZ1lQQWhNL0FRY3pQZ0UvQVJZVkFhS2VQMEFCS0FZdFVnS2RGUTBpZEU0R05ESUZNaUVKUWxjdUQwY0JFVnBnVkFRS0FqNStDMXBURnhlWm1HY0ZBV3hlQmZOcWNSa0JEa2tBQUFELy93QkdBQUFCYVFOUkVDSUFMd0FBRVFNQ2VmL2NBTGdBQ0xFQkFiQzRzQzhyQUFELy93QTIvL3dCS1FPT0VDSUFUd0FBRVFNQ2VmL1RBUFVBQ0xFQkFiRDFzQzhyQUFELy93QkcveDRCYVFKL0VDSUFMd0FBRVFJQmJTVUNBQWl4QVFHd0FyQXZLLy8vQUEvL0hnREJBcjhRSWdCUEFBQVJBZ0Z0ckFJQUNMRUJBYkFDc0M4ckFBSUFSZ0FBQVpNQ2Z3QUlBQTRBSkVBaERRb0NBZ0VBQVFBQ0FrWUFBUUVPUndBQ0FnQldBQUFBRHdCSUVoSVJBd2NXS3lVSElUY1RNd01ITXhNSEp6OEJGd0ZwQ2Y3bUd6VXhPUlByQ1J3RUhDVURKU1hDQWIzK1Jwc0Jkd1FGbndNR0FBQUNBRGIvL0FFckFyOEFCUUFMQUFpMUNnY0VBUUlzS3pjSEV6OEJBeE1ISno4QkYya3pWQVF6VVpjY0JCd2tCQUVGQW1CZUJmMnRBWGdFQlo0REJRRC8vd0JHQUFBQmFRSi9FQ0lBTHdBQUVRTUFFUURnQVZjQUNiRUJBYmdCVjdBdkt3QUFBZ0EyLy93QkF3Sy9BQVVBRUFBclFDZ0VBd0lEQVVRRkFRQURBRU1DQVFFQUFBRlRBZ0VCQVFCWEFBQUJBRXNHQmdZUUJnOHFBd2NVS3pjSEV6OEJBellXRlJRR0l5STFORFl6YVROVUJETlJnaEVSRHlBU0R3RUZBbUJlQmYydHlCSU9EeElnRGhNQUFBQUFBUUFaQUFBQmNnSi9BQklBSmtBakNnWUVBd1FDQVJJQkFBSUNSZ0FCQVE1SEFBSUNBRllBQUFBUEFFZ1hGeEFEQnhZcktRRS9BUWN2QVRjVE13TTNId0VQQWpNWEFXais1aHNPVWdZR1l5SXhJWkVHQjZRU0Urc0V3bllyQkI4MEFSdisvMHdESGxlTm13VUFBUUFOLy93QS9RSy9BQThBQnJNS0FnRXNLemNQQVJNSEx3RS9Bd00zSHdFSGN3YzBNVkVFQjJJZEJEUW5WQVFJWm14ckJRRmlLQU1oTXRCZUJmN2lLZ0loTlAvL0FFY0FBQUpZQTFFUUlnQXhBQUFSQXdKNUFLTUF1QUFJc1FFQnNMaXdMeXNBQVAvL0FEVC8vQUdRQXFvUUlnQlJBQUFRQWdCMkp3QUFBUC8vQUVmL0hnSllBb0FRSWdBeEFBQVJBd0Z0QUlVQUFnQUlzUUVCc0FLd0x5c0FBUC8vQURUL0hnR1FBYzhRSWdCUkFBQVJBZ0Z0S0FJQUNMRUJBYkFDc0M4ci8vOEFSd0FBQWxnRFFSQWlBREVBQUJFREFuc0FsQUM0QUFpeEFRR3d1TEF2S3dBQS8vOEFOUC84QVpBQ29CQWlBRkVBQUJBQ0FXTWVBQUFBQUFFQVIvOW9BbHNDZ0FBVkFDcEFKeFFCQWtRREFRRkRBQU1BQVFBREFXd0FBQUFDVlFBQ0FnNUhBQUVCRHdGSUVSSVNHUVFIRnlzbERnRUhKemMrQVRjQkl3TUhJemNUTXdFekV6Y0RBZzhJVEZRUkFUYzhEZjdtQlNzWEx4bzJNZ0VhQlVRdlBDOUNXaXNiQ0I4M0lnSXAvcUhOdmdIQi9kUUNLUVQrTmdBQUFRQTIvejhCa2dIUEFDQUFNa0F2R2hrQ0FBSVlEd0lEQVFBQ1JoY1dGUW9KQ0FZQlF3QUJBQUZ2QUFBQUFsVUFBZ0lSQUVnZ0h4d2JFeEVEQnhNckFCWVBBUU1IRGdFSEp6YytBVGNUTnpZbUl5SUdEd0lUUHdFSE16NEJOek1CYnlRQkFTd01ERGxBRVFFeUxRazJBUUVRQ3h4MVNBY3pNZ1l5SWdjNldpNExBY2d1SVEzKytWTlFXaWtYQnlSS1FBRlBEaFlib0pCb0JRRnNYZ1g0WkhjaEFQLy9BRFAvK2dKREF5UVFJZ0F5QUFBUkF3QnhBSU1BdUFBSXNRSUJzTGl3THlzQUFQLy9BQ3IvK1FHUkFtd1FJZ0JTQUFBUUFnQnhEZ0FBQVAvL0FEUC8rZ0pEQXpzUUlnQXlBQUFSQXdKNkFIOEF1QUFJc1FJQnNMaXdMeXNBQVAvL0FDci8rUUZ2QW84UUlnQlNBQUFRQWdGbENRQUFBUC8vQURQLytnSkRBMVFRSWdBeUFBQVJBd0orQUlNQXVBQUlzUUlDc0xpd0x5c0FBUC8vQUNyLytRRzJBcWtRSWdCU0FBQVFBZ0ZxTFFBQUFBQUNBRFAvOUFNNUFvc0FJUUF6QUZ4QVdRVUJDUUFNQVFNQ0ZBRUlCQU5HQUFJQUF3UUNBMTBMQVFrSkIxY0tBUWNIRmtjQUFRRUFWd0FBQUE1SEFBUUVCVmNBQlFVUFJ3QUlDQVpYQUFZR0dnWklJaUlBQUNJeklqSW9KZ0FoQUNBaUlpSWlJU0lpREFjYUt3QVhGak1oRndjbkl3Y1hOeGNISnc4Q0Z6Y1hCeUVpQndZaklpWTFORDRCTXc0QkZSUVdNekkzUGdFM0V6WTFOQ2NtSXdHbE1qQWFBUlFFQ29TSEgyNXRBd3B2YkE0U2U1TUVDdjdySERvNEdYYUJVcHhxa1pacWFEWXFFQTBDT2dFSkxUZ0Npd1lHQmlZQzl3RUNCaVVCQVhXVkFRTUdKZ1lHa0lCM3NWOHF0Nkp4ZVFvRUN3NEI3UWdMRFFNTUFBQURBQy8vK1FKa0FjNEFKQUFzQURvQVNrQkhKeHdVQXdVR0JnQUNCQVVDUmdBRkJnUUdCUVJzQndrQ0JnWUNWd01CQWdJUlJ3b0lBZ1FFQUZjQkFRQUFGd0JJTFMwbEpTMDZMVGswTWlVc0pTc1NLQlVtSkJJTEJ4a3JKUVlISXk0Qkp3WUhJeTRCTlRRK0FUY3pIZ0VYUGdFM0Z4WVZGQWNWRkJZek1qWTNNd0lHQno0Qk5UUWpBRDRCTlRRbUl5SU9BUlVVRmpNQ1NFSlZDakF3Qmpsb0J6Y3pOR0JCQnkwdkJodFNNZ2RSL0NNa0pFSVlDbTVVQ21OcE5QN1NTQ2NpSlRGSkp5SW1ibVVQQlRZeVp3Y0hSMGRha0ZRQ0JqTXlNVGdDQVFsR2RsZ05RancwTFFFaWRWMGlWaXd1L25sSGdGRTVORWQrVVRvMUFQLy9BRWYvK0FIV0EySVFJZ0ExQUFBUkF3QjJBRllBdUFBSXNRSUJzTGl3THlzQUFQLy9BRFgvL0FGU0Fxb1FJZ0JWQUFBUUFnQjJBZ0FBQVAvL0FFZi9IZ0hXQW9BUUlnQTFBQUFSQWdGdFFBSUFDTEVDQWJBQ3NDOHIvLzhBRVA4ZUFWSUJ5eEFpQUZVQUFCRUNBVzJ0QWdBSXNRRUJzQUt3THl2Ly93QkgvL2dCMWdOWUVDSUFOUUFBRVFNQll3Qk5BTGdBQ0xFQ0FiQzRzQzhyQUFELy93QTEvL3dCYVFLZ0VDSUFWUUFBRUFJQlkva0FBQUQvL3dBWC8vc0Jvd05pRUNJQU5nQUFFUU1BZGdBeUFMZ0FDTEVCQWJDNHNDOHJBQUQvL3dBRC8va0JMZ0txRUNJQVZnQUFFQUlBZHVNQUFBRC8vd0FYLy9zQm93TlRFQ0lBTmdBQUVRTUJZZ0EyQUxnQUNMRUJBYkM0c0M4ckFBRC8vd0FELy9rQlNRS2JFQ0lBVmdBQUVBSUJZdWdBQUFBQUFRQVgvMGNCb3dLREFENEFuVUFTQVFFQUJTb0RBZ1FBSnlBZUZnUUNBd05HUzdBTVVGaEFJQUFBQUFWWEJnRUZCUlpIQUFRRUExY0FBd01YUndBQ0FnRlhBQUVCRXdGSUcwdXdEbEJZUUNBQUFBQUZWd1lCQlFVV1J3QUVCQU5YQUFNREQwY0FBZ0lCVndBQkFSTUJTQnRBSUFBQUFBVlhCZ0VGQlJaSEFBUUVBMWNBQXdNWFJ3QUNBZ0ZYQUFFQkV3RklXVmxBRWdBQUFENEFQUzh0S1NnaklSMGJKQWNIRkNzQUZ3OEJKaU1pRGdFVkZCNEJGeDRDRlJRT0FROEJGeFlWRkFZaklpYy9BUll6TWpVMEx3RTNKaWMvQVJZek1qNEJOVFF1QVNjdUFqVTBQZ0V6QVdjOERnb3hQaXRDSlI0cUp5dzJKVEZXTlE4Z0pDZ2VLQm9IQlJnY0pCWXVFbFUzQ3dnNFV5eEhLQjhzSnlzMEpUVmNPQUtESGkwREpTUTZIeDB0SVJnYktUOHFMazR4QkRFVUZoOGFJU0FjQVI4ZUR3NGRQZ1VvTVFNNEpEc2lIekFpR0JvcFBTb3ZUeTBBQUFFQUEvOUhBU1FCekFBNEFFbEFSZ0VCQUFVcEF3SUVBQ2NCQXdRakhCb1NCQUlEQkVZQUJBQURBQVFEYkFBQUFBVlhBQVVGRVVjQUF3TVNSd0FDQWdGWUFBRUJFd0ZJT0Rjc0tpVWtIeDBaRnlRR0J4UXJBQmNQQVNZaklnWVZGQllYSGdFVkZBWVBBUmNXRlJRR0l5SW5Qd0VXTXpJMU5DOEJOeU1tSno4QkZqTXlOalUwSmljdUFUVTBQZ0V6QVFJaUR3a2xKU1kySVNNcUxVRTJFQ0FrS0I0b0dnY0ZHQndrRmk0U0NESXJDd2txTXlvMkpDUXBLaXBJS3dIRkVDd0NJRFFnR1NRYUhqVXBNRWdMTWhRV0h4b2hJQndCSHg0UERoMDhCeHN0QlM4MEl4MHBHaDB5SmlVOElRQUEvLzhBRi8vN0FhTURXQkFpQURZQUFCRURBV01BS1FDNEFBaXhBUUd3dUxBdkt3QUEvLzhBQS8vNUFVb0NvQkFpQUZZQUFCQUNBV1BhQUFBQUFBRUFSLzlLQWVVQ2Z3QWlBRGRBTkNJZkFnQUdHQkFPQmdRREFRSkdCUUVBQUFaVkFBWUdEa2NFQVFFQkQwY0FBd01DVndBQ0FoTUNTQklpRlNVbUVpQUhCeG9yQVNjakF3Y2pCeGNXRlJRR0l5SW5Qd0VlQVRNeU5UUXZBVGNqTnhNakJ5YzNJUmNCMjJOTE5CY0tEeDBoSlJzaEhBY0VDeFVRSVJRcUV3a2JNRXRuQkFvQmtRTUNWQUwrYjhVMUV4Y2RHaUFnR2dFUUR4NFNEQnhDd2dHVUFnVW1CZ0FBQUFFQVBmOUhBVUlDVGdBdUFIQkFHaXNqQWdNRUhnWUFBd0FER3hvVEVRa0ZBZ0FEUmlnbkFnUkVTN0F0VUZoQUh3QUFBd0lEQUFKc0JnRURBd1JWQlFFRUJCRkhBQUlDQVZnQUFRRVRBVWdiUUIwQUFBTUNBd0FDYkFVQkJBWUJBd0FFQTEwQUFnSUJXQUFCQVJNQlNGbEFDaElVRWhza0t5RUhCeG9yTnhRek1qY2ZBUVlQQVJjV0ZSUUdJeUluUHdFV016STFOQzhCTnk0Qk5UY1ROeU1uTnpNL0FSY0hNeGNISXdOOElpazNDZzgyTkJFZ0pDZ2VLQm9IQlJnY0pCWXVFaHdmQWkwSFF3VUVTQkF2QmhlR0JRV0xORlFwV2dFV1VCMDJGQllmR2lFZ0hBRWZIZzhPSFQ0SEtCNFRBUTQxQlI1NEZRU0pCUjcreVFBQUFQLy9BRWNBQUFIbUExZ1FJZ0EzQUFBUkF3RmpBRE1BdUFBSXNRRUJzTGl3THlzQUFQLy9BRDMvK1FGSkFwc1FJZ0JYQUFBUkFnSi9PUHdBQ2JFQkFiai8vTEF2S3dBQUFBQUJBRWNBQUFIbEFuOEFGd0EwUURFWEZBSUFCd1VCQWdFQ1JnVUJBUVFCQWdNQkFsMEdBUUFBQjFVQUJ3Y09Sd0FEQXc4RFNCSWhFaElTRWhFZ0NBY2JLd0VuSXdjekZ3Y2pEd0VqUHdFakp6Y3pOeU1ISnpjaEZ3SGJZMHNnWFFVRFpBOFhNQnNPWEFRRFlSNUxad1FLQVpFREFsUUMrZ1FlZGNYQ2VBUWUrZ0lGSmdZQUFBQUFBUUFsLy9rQlJnSk9BQ1lBZFVBWEpCd0NCZ2NXQWdJQkFCSU1CZ01DQVFOR0lTQUNCMFJMc0MxUVdFQWhCUUVBQkFFQkFnQUJYUWtCQmdZSFZRZ0JCd2NSUndBQ0FnTlZBQU1ERWdOSUcwQWZDQUVIQ1FFR0FBY0dYUVVCQUFRQkFRSUFBVjBBQWdJRFZRQURBeElEU0ZsQURpWWxGQklTRWhVVkl4SVFDZ2NjS3hNekZ3Y2pEd0VVTXpJM0h3RUdCeU11QVRVL0FTTW5Oek0vQVNNbk56TS9BUmNITXhjSEk2RnhCUVIzR1FJaUtUY0pFRDg5Q3g0akFodElCQVJPREFkRUJRVklFQzhGRm9VRkJJd0JId1FlbGhNcFdnRVdYQmtHS1NBVG9nUWVTalVGSG5nVkJJa0ZIdi8vQUV2Lyt3STBBMEFRSWdBNEFBQVJBd0ZwQUh3QXVBQUlzUUVCc0xpd0x5c0FBUC8vQUQ3LytBR3BBb2dRSWdCWUFBQVFBZ0ZwSlFBQUFQLy9BRXYvK3dJMEF5UVFJZ0E0QUFBUkF3QnhBSHdBdUFBSXNRRUJzTGl3THlzQUFQLy9BRDcvK0FHb0Ftd1FJZ0JZQUFBUUFnQnhKUUFBQVAvL0FFdi8rd0kwQTBjUUlnQTRBQUFSQXdGbEFIWUF1QUFJc1FFQnNMaXdMeXNBQVAvL0FENy8rQUdZQW84UUlnQllBQUFRQWdGbElBQUFBUC8vQUV2Lyt3STBBMklRSWdBNEFBQVJBd0ZuQUh3QXVBQUlzUUVDc0xpd0x5c0FBUC8vQUQ3LytBR1lBcW9RSWdCWUFBQVFBZ0ZuSlFBQUFQLy9BRXYvK3dJMEExUVFJZ0E0QUFBUkF3SitBSHdBdUFBSXNRRUNzTGl3THlzQUFQLy9BRDcvK0FITUFxa1FJZ0JZQUFBUUFnRnFRd0FBQUFBQkFFdi9Pd0kwQW44QUt3QTZRRGNXQVFNRkRnRUFBUUpHQUFFREFBTUJBR3dHQVFRRURrY0FCUVVEVndBREF4ZEhBQUFBQWxjQUFnSWJBa2dUSlJZbUloSW9Cd2NhS3dFSEJnOEJCaFVVRmpNeU5qY3pGd1lqSWlZMU5EOEJCaU1pSmpVMFB3RVRNd01HRlJRV016STJOeE16QWdvSkQyWTZFaFFTRWljUEJBc3RMeDhrRlNzbUsxeG1CQTBuTHpVRFRFbFVaUXd3TUFFNVRwWTdYeDRYRWhZWkZoczNKeUVnSDBRTFgxZ2RHVm9CUGY1dEdCZEtUV05mQVpjQUFBQUJBRDcvT3dHWkFjd0FMQUJGUUVJakhRQURCUU1CQVFRRkRBRUFBUU5HTENzcUlRUURSQUFEQlFOdUFBRUVBQVFCQUd3QUJRVUVWUUFFQkJKSEFBQUFBbGNBQWdJYkFrZ3JFeFlpRVNjR0J4a3JKUThCRGdFVkZCWXpNamN6RndZaklpWTFORFkvQVNNT0FRY2pMZ0UvQVJNL0FRTUhCaFl6TWpZL0F3RnBCeEk1SlJRUElSMENEQ1lzR3lVbk9pRUhPRnN1Q3gwa0FRRXFDakUzQWdFUkRCdDFTQUlGTTJ4ckFqb3lFaEVSTFJ3MUloMFhPRHZ2WW5naENDNGdEUUVFWndiK29oSVVHWitPREY0RkFBRC8vd0JKQUFBRGN3TkpFQ0lBT2dBQUVRTUNmQURvQUxnQUNMRUJBYkM0c0M4ckFBRC8vd0JSQUFBQ2tnS2JFQ0lBV2dBQUVBTUJZZ0NVQUFELy93QkhBQUFDQkFOSkVDSUFQQUFBRVFNQ2ZBQkxBTGdBQ0xFQkFiQzRzQzhyQUFELy8vK08vejRCZkFLYkVDSUFYQUFBRUFJQll2MEFBQUQvL3dCSEFBQUNCQU14RUNJQVBBQUFFUU1BYWdCSUFMZ0FDTEVCQXJDNHNDOHJBQUQvL3dBRS8vNEI5d05SRUNJQVBRQUFFUU1DZVFBMkFMZ0FDTEVCQWJDNHNDOHJBQUQvLy8vMy8vWUJjd0txRUNJQVhRQUFFQUlBZGdnQUFBRC8vd0FFLy80Qjl3TStFQ0lBUFFBQUVRTUJaZ0FzQUxnQUNMRUJBYkM0c0M4ckFBRC8vLy8zLy9ZQmN3S0dFQ0lBWFFBQUVBSUJaZ1lBQUFELy93QUUvLzRCOXdOQkVDSUFQUUFBRVFNQ2V3QW9BTGdBQ0xFQkFiQzRzQzhyQUFELy8vLzMvL1lCY3dLZ0VDSUFYUUFBRUFJQlkvOEFBQUFBQWYvMS8yc0JYZ0psQUNBQVFVQStBUUVBQlFNQkFRQWFBUUlCQTBZVEVoRURBa01HQVFVQUFBRUZBRjhFQVFFQ0FnRlJCQUVCQVFKVkF3RUNBUUpKQUFBQUlBQWZFaHdTRWlRSEJ4Z3JBQmNQQVNZaklnOEJNeGNISXc4QkRnRUhKemMrQVQ4Q0l5YzNNemMrQVRNQk5Db0lCUndkWGcwT2NRTURkQlFSQnkwNUZRRXVKQWNSRTBBRUEwUU5CMUJCQW1VSUl3SUxhV2tGR3BtTlFrOHdFd1lyUkRlTW5BVWFaVVZLQUFJQU0vLzZBb01DOXdBZEFDb0FRMEJBR3hvQ0FnUUJSZ2NCQkFJRWJnQURBQUFGQXdCZkNBRUdCZ0pYQUFJQ0ZrY0FCUVVCVndBQkFSY0JTQjRlQUFBZUtoNHBKQ0lBSFFBY0lpUWxGQWtIRnlzQUZoVVVCaU1XRlJRT0FTTWlFVFErQVRNeUZ4WXpNalkxTkNjM05qTUVCaFVVRmpNeVBnRTFOQ1lqQW13WFJqWTdTWXBmM1VtS1lEYzFJeFVnTUJjQ0VBcitpWVJYV2s5eU8xaFpBdmNwSFRJNlFvWnlyMklCRUhDc1h4VU5KQ0VoSFFZTG5MV1lkM05VbUdSMmNRQUFBQUFDQUMvLytRSFlBa0FBSVFBdkFEdEFPQm9CQWdRQlJnQUVBZ1J1QUFNQUFBWURBRjhBQlFVQ1Z3QUNBaEZIQndFR0JnRlhBQUVCRndGSUlpSWlMeUl1S1NZakppVVJDQWNaS3dBR0p4WVZGQTRCQnlNdUFUVTBQZ0UzTXhZWEZqTXlOalUwSnpjMk16SWVBUlVBUGdFMU5DWWpJZzRCRlJRV013SFlSREFPTTE5QkJ6Z3hNMkZBQnhvY0doSWRKU0FERHdzSUZnLysvRWtuSWlVeFNTY2hKZ0hGT1FNaE5GbVBWUVFIU0VsWGoxVUNBdzhOSUJzaUlnWU1GU1FWL2k5SGZrODdOa2Q5VHp3MkFBQUJBRXYvK3dKL0F3QUFKZ0FuUUNRZkFRRUVBVVlBQkFFRWJnTUJBUUVPUndBQ0FnQlhBQUFBRndCSUppTWxGaVlGQnhnckFBWUhBd2NPQVNNaUpqVTBQd0VUTXdNR0ZSUVdNekkyTnhNek1qWTFOQ2MzTmpNeUhnRVZBbjhxSlNZSkRINXFYR1lFRFNjdk5RTk1TVlJsRERBVUhpSWZBdzBMQ0JVT0FwVXRCdjdYVG5OOVgxZ2RHVm9CUGY1dEdCZEtUV05mQVpjYkdSd2dCd29VSXhRQUFRQSsvL2dCOUFKZUFDY0FNMEF3SUJzYUVRUUFBeE1OQWdNQ0FBUURBZ0VDQTBZQUF3QURiZ0FBQWdCdUFBSUNBVlVBQVFFU0FVZ3JLeE1WQkFjWEt3QUhBdzhCTnlNT0FRY2pMZ0UvQVJNL0FRTUhCaFl6TWpZL0F6WTFOQ2MzTmpNeUhnRVZBZlJmTEFjeklnWTdXUzRMSFNRQkFTb0tNamdCQVJBTUhIVklBUVlYVENBQ0VRb0pGUThCekJyK3Vtc0YrR1IzSVFndUlBMEJCR2NHL3FJT0ZodWdqd3BlQkE0eEl5QUhDeFVqRlFELy8vLzFBQUFCNVFOQkVDSUFKQUFBRVFNQ2V3QmlBTGdBQ0xFQ0FiQzRzQzhyQUFELy93QW8vL29CaEFLZ0VDSUFSQUFBRUFJQll4UUFBQUQvL3dCSEFBQUJOQU5CRUNJQUxBQUFFUU1DZS8vTUFMZ0FDTEVCQWJDNHNDOHJBQUQvL3dBZC8vd0JEd0tnRUNJQTh3QUFFQUlCWTU4QUFBRC8vd0F6Ly9vQ1F3TkJFQ0lBTWdBQUVRTUNld0IvQUxnQUNMRUNBYkM0c0M4ckFBRC8vd0FxLy9rQmVBS2dFQ0lBVWdBQUVBSUJZd2dBQUFELy93QkwvL3NDTkFOWUVDSUFPQUFBRVFNQll3QjFBTGdBQ0xFQkFiQzRzQzhyQUFELy93QSsvL2dCbUFLZ0VDSUFXQUFBRUFJQll4NEFBQUQvL3dCTC8vc0NOQU9HRUNJQU9BQUFFUU1Da0FCOEFMZ0FDTEVCQTdDNHNDOHJBQUQvL3dBKy8vZ0JxUUxPRUNJQVdBQUFFQUlDa0NVQUFBRC8vd0JMLy9zQ05BT3pFQ0lBT0FBQUVRTUNDd0I4QUxnQUNMRUJBN0M0c0M4ckFBRC8vd0ErLy9nQm1BTDdFQ0lBV0FBQUVBSUNDeVVBQUFELy93QkwvL3NDTkFPaEVDSUFPQUFBRVFNQ2p3QjhBTGdBQ0xFQkE3QzRzQzhyQUFELy93QSsvL2dCbUFMcEVDSUFXQUFBRUFJQ2p5VUFBQUQvL3dCTC8vc0NOQU96RUNJQU9BQUFFUU1DREFCNEFMZ0FDTEVCQTdDNHNDOHJBQUQvL3dBKy8vZ0JtQUw3RUNJQVdBQUFFQUlDRENFQUFBQUFBZ0F6L3pzQ1F3S0ZBQ0FBTEFBK1FEc1FBUU1GQ0FFQUFRSkdBQUVEQUFNQkFHd0FCZ1lFVndBRUJCWkhBQVVGQTFjQUF3TVhSd0FBQUFKWEFBSUNHd0pJSkNnbEppSVJJd2NIR2lzRUZSUVdNekkzTXhjR0l5SW1OVFEvQVFZaklpWTFORDRCTXpJV0ZSUUdEd0VtRmpNeU5qVTBKaU1pQmhVQlF4Y1VKeVFEQ3k0eElTY1hLaVF1YVhOSGltRnJjMTFYT2ZGWlZYdURXVmQ3Z1dFVkV4Z3VHemNuSUNFaVB3cUlmSG13WG9WNWk4QW9WdGh5dDZWcmNMV2tBQUFBQWdBcS96b0JhZ0hPQUNJQU1BQStRRHNJQVFFRkFBRURCQUpHQUFRQkF3RUVBMndBQmdZQ1Z3QUNBaEZIQUFVRkFWY0FBUUVhUndBREF3QlhBQUFBR3dCSUpTSVJLeVltSVFjSEdpc0ZCaU1pSmpVMFB3RUdCeU11QVRVMFBnRTNNeDRCRlJRR0R3RUdGUlFXTXpJM015WVdNekkrQVRVMEppTWlEZ0VWQVRJdk1TQW9GeXdaR3djMU16TmdRQWMwTWpRdlJ4TVhGQ2NrQk5BaUpUQklKaUVsTVVnbWp6Y25JQ0VpUUFvQkIwZEhXNDlVQWdkR1JGeVNLV2tmRlJNWUxzbzFTSDlST0RSSGZsRUFCUC8yQUFBQjVnTnFBQWtBSGdBcUFDOEFUVUJLRWdFR0JBRkdDQVFBQXdKRUFBWUVCd1FHQjJ3QUFna0JCUVFDQlY4QUJ3QUFBUWNBWGdBRUJBNUhDQU1DQVFFUEFVZ2ZId29LTHkwc0t4OHFIeWtsSXdvZUNoNGxFaXdLQnhZckV6WTNId0VIQmc4Qkp4TXZBZzhDSXdFbU5UUTJNeklXRlJRR0J4TUNCaFVVRmpNeU5qVTBKaU1ISXdNWE4vNWRhQWNJQXg1M01BYXdCeDJPZ0VVVk1nRXdKaWtqSkNrY0ZuK3hHUnNWRlJzWkZ3b0VxSFo3QXlnYkp3TWVCZ29pRGdYODhqU09BUUdNTmdKcEV6QWhLaXNnR3lVSC9ac0MyaGtWRmhrWUZoVWFsLzZxQVFFQS8vOEFLUC82QVl3REJ4QWlBRVFBQUJBQ0Fwc2JBQUFBLy8vLzFnQUFBc2tEVVJBaUFJZ0FBQkVEQW5rQk5BQzRBQWl4QWdHd3VMQXZLd0FBLy84QUx2LzZBanNDcWhBaUFLZ0FBQkFEQUhZQWdnQUEvLzhBTS8raUFrTURVUkFpQUpvQUFCRURBbmtBalFDNEFBaXhBd0d3dUxBdkt3QUEvLzhBSS8rUkFXb0NxaEFpQUxvQUFCQUNBSFliQUFBQS8vOEFGLzhlQWFNQ2d4QWlBRFlBQUJFQ0FXMGNBZ0FJc1FFQnNBS3dMeXYvL3dBRC94NEJKQUhNRUNJQVZnQUFFUUlCYmVFQ0FBaXhBUUd3QXJBdksvLy9BRWYvSGdIbUFuOFFJZ0EzQUFBUkFnRnRKd0lBQ0xFQkFiQUNzQzhyLy84QVBmOGVBVUVDVGhBaUFGY0FBQkVDQVcwREFnQUlzUUVCc0FLd0x5c0FBZi9XL3o4QXFBSElBQkVBUDBBUURRRUFBUUZHRVJBQ0FVUUdCQUlBUTB1d0xWQllRQXNBQUFBQlZRQUJBUkVBU0J0QUVBQUJBQUFCVVFBQkFRQlZBQUFCQUVsWnRCSWJBZ2NWS3pjSERnRUhKemMrQVRjVE55TW5Oek0zRjNrS0NqdEJFd0UwTGdneEJFOEZCVTh3QW1WVFQxc3BGd2NqUzBBQlh6UUZIZ2NDQUFBQUFRQndBZ1FCWVFLYkFBd0FIVUFhREFnRUF3RUFBVVlDQVFFQUFXOEFBQUFRQUVnVUV4RURCeFlyRWpjekZoY0hJeVluQmdjako2TkxGQzR4RVFjcktrSXZCd3dDU1ZKR1BCVXlQVVVxRlFBQkFINENDUUZ3QXFBQURBQWRRQm9NQ0FRREFBRUJSZ0FBQVFCdkFnRUJBUkFCU0JRVEVRTUhGaXNBQnlNbUp6Y3pGaGMyTnpNWEFVQk1GVEF4RWdjd0pTMURCdzBDWFZSSU9oVTVOakUrRlFBQUFBQUJBRjBDU0FHQ0Ftd0FCUUEwdFFJQkFBRUJSa3V3R1ZCWVFBc0FBQUFCVlFBQkFRNEFTQnRBRUFBQkFBQUJVUUFCQVFCVkFBQUJBRWxadEJJUUFnY1ZLd0VoSnpjaEZ3Ri8vdU1GQkFFZEJBSklCUjhFQUFBQUFRQ0VBZ3dCWmdLUEFBd0FRTFlNQkFJQ0FRRkdTN0FnVUZoQURnQUNBQUFDQUZzREFRRUJEZ0ZJRzBBV0F3RUJBZ0Z1QUFJQUFBSlRBQUlDQUZjQUFBSUFTMW0yRVNFVElBUUhGeXNBSXlJbUp6Y3pGak15TnpNWEFVTlpNVEFGRkFnRVNFZ2FDUThDRERjM0ZWMWRGUUFBQUFBQkFORUNSUUVSQW9ZQUNRQVpRQllBQUFBQlZ3SUJBUUVXQUVnQUFBQUpBQWdqQXdjVUt3QVZGQVlqSWpVME5qTUJFUkVQSUJJUEFvWWdEeElnRHhJQUFnQ2tBaElCUFFLcUFBc0FGd0FwUUNZQUFnQUFBZ0JiQlFFREF3RlhCQUVCQVJBRFNBd01BQUFNRnd3V0VoQUFDd0FLSkFZSEZDc0FGaFVVQmlNaUpqVTBOak1PQVJVVUZqTXlOalUwSmlNQkZTZ3VJQjhzS2lNWEdoc1ZGUndaR0FLcUt5QWpLaWtqSVNzZEdSVVhHUmdXRlJzQUFBQUFBUUJEL3pzQTZnQWdBQklBSlVBaUNBRUFBUUZHQUFNQkEyNEFBUUFCYmdBQUFBSllBQUlDR3dKSUZTSVJJd1FIRnlzV0ZSUVdNekkzTXhjR0l5SW1OVFEvQVRNSFpoY1VKeVFEQ3k0eElTY1hQU05CWVJVVEdDNGJOeWNnSVNKYllnQUFBQUVBWEFJdUFZUUNpQUFZQURGQUxoZ1BBQU1DQXcwTUFnTUJBQUpHQUFJREFBTUNBR3dBQUFFREFBRnFBQUVCYlFBREF3NERTQkluRXlVRUJ4Y3JBUThCSmljbUl5SUhCakVqSnpVL0FSWVhGak15UHdFekZ3R0VPQWdUUEVBTkN4Z1NCaEU1QnhZN1BBOEtHaElHRUFKeE9nTUNFaElhRWhJR09RTUNFaEVhRVJJQUFBSUFXQUlHQVlrQ3FRQUlBQkVBSWtBZkVRME1DQVFEQmdFQUFVWURBUUVBQVc4Q0FRQUFFQUJJRkJNVUVRUUhGeXNTTnpNWEZRWUhJeWMyTnpNWEJ3WUhJeWVjU0FjV1FrNEhFdFUvQmhjQlFrNEhFZ0piVGhJR1EwZ1NURVVTQmtOSUVnQUJBRndDTGdHRUFvZ0FHQUF4UUM0WUR3QURBZ01OREFJREFRQUNSZ0FDQXdBREFnQnNBQUFCQXdBQmFnQUJBVzBBQXdNT0EwZ1NKeE1sQkFjWEt3RVBBU1luSmlNaUJ3WXhJeWMxUHdFV0Z4WXpNajhCTXhjQmhEa0lGVDArQ3dzWUVnWVJPZ2NLUno0TUNob1NCaEFDY1RzQ0FoSVNHaElTQmpvREFSTVNHaEVTQUFBQkFIbi9id0M1LzdBQUNnQWZRQndDQVFFQUFBRlRBZ0VCQVFCWEFBQUJBRXNBQUFBS0FBa2tBd2NVS3g0QkZSUUdJeUltTlRRenFCRVNEdzRSSVZBUkRnOFRFZzRoQUFBQkFHUC9IQURBLzc4QURBQUdzd3dEQVN3ckZoVVVCeWMzTmpVMEp6VTJOOEJNRVFFMEhRNFJWeUUxTnhBRktDZ1ZFZ1VMQndBQUFBTC85UUFBQWVVQ2Z3QURBQWNBQ0xVR0JBRUFBaXdySXdFekV5VWhBeU1MQVRjMmcvNVNBWGRzQlFKLy9ZRXFBaHdBQUFBQkFCSC8vZ0o4QW9VQUxRQUdzd29BQVN3ckFCWVZGQVlIRlRNM0Z3Y25Jd2NuTno0Qk5UUW1JeUlPQVJVVUZoY1BBU2NqQnljM0Z6TTNMZ0UxTkQ0Qk13SUNkbDlYYkVvRURGWjNKZ01GWG1sY1drMXZPajQ1QkFRbGdrMEVERTVrQVRJMVJvZGRBb1dFYjJxK1B3TUVCU2tDQVFJblBMNXNZRzFLaFZkU2p5d25BZ0VDQlNnREF5MktVR09hVmdBQkFCNy9QZ0dlQWNzQUdnQUdzeEFOQVN3ckpROEJOeU1PQVFjakppY1BBaE0vQVFNR0ZqTXlOajhEQVc0SE1TSUhPbHd2Q3hFT0RBY3hTd1V3TUFNU0RSeDRTUUVGTVd4ckJmcGtlU0VFQzFoc0JRSXFYZ1gra3hjYW9wRUlYZ1VBQUFBQUFRQWkvNkFDU0FIdkFDSUFCck1lRVFFc0t5UVZGRE15TnhjSEJpTWlOVFEzRXlNSEF5TWJBU01pQmdjakp6OENKUmNISXdNQm5oc1VGUVVLR3hrM0FpNjhJQ1F1SlNBd0N5RW5DQXdCVHc4Qnd3UUtieTlLQlNNTkF5QVFRQVlVQVcvLy90b0JJd0VDR1NFVEIwVUVBUVlrL3BVQUFBRC8vd0JKQUFBRGN3TlNFQ0lBT2dBQUVRTUNmUURrQUxnQUNMRUJBYkM0c0M4ckFBRC8vd0JSQUFBQ2tnS3FFQ0lBV2dBQUVBTUFRd0NFQUFELy93QkpBQUFEY3dOUkVDSUFPZ0FBRVFNQ2VRRHZBTGdBQ0xFQkFiQzRzQzhyQUFELy93QlJBQUFDa2dLcUVDSUFXZ0FBRUFNQWRnQ1BBQUQvL3dCSkFBQURjd014RUNJQU9nQUFFUU1BYWdEa0FMZ0FDTEVCQXJDNHNDOHJBQUQvL3dCUkFBQUNrZ0o1RUNJQVdnQUFFQU1BYWdDTkFBQUFBUUExLy9zQ0pnS0RBQ2tBV2tBTEd4b1pEdzBEQmdFQ0FVWkxzQzVRV0VBWEFBSUNCRmNGQVFRRUZrY0FBUUVBVndNQkFBQVhBRWdiUUJzQUFnSUVWd1VCQkFRV1J3QURBdzlIQUFFQkFGY0FBQUFYQUVoWlFBMEFBQUFwQUNnVUtTWXBCZ2NYS3dBZkFRY2VBUlVVRGdFaklpWW5Qd0VlQVRNeVBnRTFOQ1l2QVRjbUl5SUdEd0lqUHdFK0FqTUJ2V2NDdzE1Y05sczJKbEFlREFnYlNTTW9RaVppWndIRlJrbE9ad29lRnpBYUhRZENhVUlDZ3pvTjJ4WlFRamRYTUJjV01RTWJIU1ZBSnpwR0VoSGVLRjFQNThhKzcwQmhOUUFBLy8vLzlmOXZBZVVDZnhBaUFDUUFBQkFDQVd4SEFBQUEvLzhBS1A5dkFYY0J6aEFpQUVRQUFCQUNBV3dtQUFBQS8vLy85UUFBQWVVRGJoQWlBQ1FBQUJFREFwWUFTZ0M0QUFpeEFnR3d1TEF2S3dBQS8vOEFLUC82QVhjQ3RoQWlBRVFBQUJBQ0FwWUFBQUFBLy8vLzlRQUFBZWdEbUJBaUFDUUFBQkVEQW9zQVpnQzRBQWl4QWdLd3VMQXZLd0FBLy84QUtQLzZBWjBDNEJBaUFFUUFBQkFDQW9zYkFBQUEvLy8vOVFBQUFlVURtQkFpQUNRQUFCRURBb3dBWmdDNEFBaXhBZ0t3dUxBdkt3QUEvLzhBS1AvNkFYOEM0QkFpQUVRQUFCQUNBb3diQUFBQS8vLy85UUFBQWVVRHVSQWlBQ1FBQUJFREFvMEFaZ0M0QUFpeEFnS3d1TEF2S3dBQS8vOEFLUC82QVpJREFSQWlBRVFBQUJBQ0FvMGJBQUFBLy8vLzlRQUFBZjBEcUJBaUFDUUFBQkVEQW80QWJ3QzRBQWl4QWdLd3VMQXZLd0FBLy84QUtQLzZBYklDOEJBaUFFUUFBQkFDQW80a0FBQUFBQVQvOWY5dkFlVURTUUFNQUJjQUhBQW5BRlpBVXdrRkFBTUJBQUZHQUFBQkFHNENBUUVGQVc0QUJ3VUlCUWNJYkFBSUFBTUVDQU5lREFFS0FBa0tDVnNBQlFVT1J3c0dBZ1FFRHdSSUhSME5EUjBuSFNZaklSd2FHUmdORncwWEVSSWpGQk1TRFFjWkt4TTJOek1XRndjakppY0dCeU1UTHdJUEFpTUJNeE1ESXdNWE53SVdGUlFHSXlJbU5UUXo0VGc4RXlzNERnY3VMREE3QjhrR0hZNkJSQll5QVRjM2dxUUVwM1o3bUJFU0R3NFJJUUwySXpBb0t4Y2dKQ0VqL1NFMWpnRUJqRGNDZi8yQkFrYitxQUlDL3NJUkRnOFRFZzRoQUFBRUFDai9id0dMQXBzQURBQWZBQzBBT0FCdFFHb0pCUUVEQUFJZkFRVUFIZ0VHQlNVa0FnTUdEZ0VIQXhBUEFnUUhCa1lCQVFBQ0JRSUFCV3dBQmdVREJRWURiQXNCQ1FBSUNRaGJBQVVGRVVjQUF3TUNWUUFDQWhCSENnRUhCd1JWQUFRRUVnUklMaTRnSUM0NExqYzBNaUF0SUN3WkZ4SVZFeFFTREFjYUt3QVhCeU1tSndZSEl5YzJOek1YQXc4Qk55TUdCeU11QVRVMFBnRTNNeGMzQWo0QlB3SW5JZzRCRlJRV014NEJGUlFHSXlJbU5UUXpBVm94RVFjcktrSXZCd3d6U3hSTEx3Y3pJUWRVWHcwaEh6Vm9TUVUrSCs5QVZDZ0RBenMzVVN3WERGY1JFZzhPRVNFQ1ZUd1ZNajFGS2hVd1V0SCtvbXNGNzVoWkZrVTZUNHRjQ0E4US9tUkloRllVTGc1SmVVYzJNNElSRGc4VEVnNGgvLy8vOVFBQUFlVURtUkFpQUNRQUFCRURBb1VBWmdDNEFBaXhBZ0t3dUxBdkt3QUEvLzhBS1AvNkFYd0M0UkFpQUVRQUFCQUNBb1ViQUFBQS8vLy85UUFBQWVVRG1SQWlBQ1FBQUJFREFvWUFaZ0M0QUFpeEFnS3d1TEF2S3dBQS8vOEFLUC82QVgwQzRSQWlBRVFBQUJBQ0FvWWJBQUFBLy8vLzlRQUFBZVVEeEJBaUFDUUFBQkVEQW9jQVpnQzRBQWl4QWdLd3VMQXZLd0FBLy84QUtQLzZBWHdEREJBaUFFUUFBQkFDQW9jYkFBQUEvLy8vOVFBQUFmSURxQkFpQUNRQUFCRURBb2dBWmdDNEFBaXhBZ0t3dUxBdkt3QUEvLzhBS1AvNkFhY0M4QkFpQUVRQUFCQUNBb2diQUFBQUFBVC85Zjl2QWVVRE93QU1BQmNBSEFBbkFHSkFYd29DQWdFQUFVWUFDQVlKQmdnSmJBQUJEQUVEQmdFRFh3QUpBQVFGQ1FSZURnRUxBQW9MQ2xzQUJnWU9Sd0lCQUFBRlZRMEhBZ1VGRHdWSUhSME5EUUFBSFNjZEppTWhIQm9aR0EwWERSY1dGUlFURVE4QURBQUxFU0VURHdjV0t3QW1KemN6RmpNeU56TVhCaU1UTHdJUEFpTUJNeE1ESXdNWE53SVdGUlFHSXlJbU5UUXpBU1E0QnhNSkMwUkRIQWdQSkZOa0JoMk9nVVFXTWdFM040S2tCS2QyZTVnUkVnOE9FU0VDMXlvbkV6OC9FMUg5S1RXT0FRR01Od0ovL1lFQ1J2Nm9BZ0wrd2hFT0R4TVNEaUVBQUFBRUFDai9id0dFQW84QURBQWZBQzBBT0FEOFFCMEtBZ0lCQUI4QkJnTWVBUWNHSlNRQ0JBY09BUWdFRUE4Q0JRZ0dSa3V3REZCWVFEWUFCd1lFQXdka0FBUUlCZ1FJYWdBQkN3RURCZ0VEWHcwQkNnQUpDZ2xjQWdFQUFBNUhBQVlHRVVjTUFRZ0lCVlVBQlFVU0JVZ2JTN0FnVUZoQU53QUhCZ1FHQndSc0FBUUlCZ1FJYWdBQkN3RURCZ0VEWHcwQkNnQUpDZ2xjQWdFQUFBNUhBQVlHRVVjTUFRZ0lCVlVBQlFVU0JVZ2JRRGNDQVFBQkFHNEFCd1lFQmdjRWJBQUVDQVlFQ0dvQUFRc0JBd1lCQTE4TkFRb0FDUW9KWEFBR0JoRkhEQUVJQ0FWVkFBVUZFZ1ZJV1ZsQUlpNHVJQ0FBQUM0NExqYzBNaUF0SUN3bkpoMGNGUlFTRVFBTUFBc1JJUk1PQnhZckVpWW5Oek1XTXpJM014Y0dJeGNERHdFM0l3WUhJeTRCTlRRK0FUY3pGemNDUGdFL0FpY2lEZ0VWRkJZekhnRVZGQVlqSWlZMU5EUFhNQVVVQ0FSSVNCb0pEeU5aYnk4SE15RUhWRjhOSVI4MWFFa0ZQaC92UUZRb0F3TTdOMUVzRnd4WEVSSVBEaEVoQWd3M054VmRYUlZ1UXY2aWF3WHZtRmtXUlRwUGkxd0lEeEQrWkVpRVZoUXVEa2w1UnpZemdoRU9EeE1TRGlILy93QkgvMjhCMXdKL0VDSUFLQUFBRUFJQmJGMEFBQUQvL3dBcC8yOEJVUUhPRUNJQVNBQUFFQUlCYlB3QUFBRC8vd0JIQUFBQjF3TnVFQ0lBS0FBQUVRTUNsZ0E4QUxnQUNMRUJBYkM0c0M4ckFBRC8vd0FwLy9vQlVRSzJFQ0lBU0FBQUVBSUNsdkFBQUFELy93QkhBQUFCM0FOQUVDSUFLQUFBRVFNQmFRQllBTGdBQ0xFQkFiQzRzQzhyQUFELy93QXAvL29CandLSUVDSUFTQUFBRUFJQmFRc0FBQUQvL3dCSEFBQUIyZ09ZRUNJQUtBQUFFUU1DaXdCWUFMZ0FDTEVCQXJDNHNDOHJBQUQvL3dBcC8vb0JqUUxnRUNJQVNBQUFFQUlDaXdzQUFBRC8vd0JIQUFBQjF3T1lFQ0lBS0FBQUVRTUNqQUJZQUxnQUNMRUJBckM0c0M4ckFBRC8vd0FwLy9vQmJ3TGdFQ0lBU0FBQUVBSUNqQXNBQUFELy93QkhBQUFCMXdPNUVDSUFLQUFBRVFNQ2pRQllBTGdBQ0xFQkFyQzRzQzhyQUFELy93QXAvL29CZ2dNQkVDSUFTQUFBRUFJQ2pRc0FBQUQvL3dCSEFBQUIxd09ZRUNJQUtBQUFFUU1DakFCWUFMZ0FDTEVCQXJDNHNDOHJBQUQvL3dBcC8vb0JvZ0x3RUNJQVNBQUFFQUlDamhRQUFBRC8vd0JILzI4QjF3TkpFQ0lBS0FBQUVDSUJiRjBBRVFNQ2ZBQmNBTGdBQ0xFQ0FiQzRzQzhyLy84QUtmOXZBWE1DbXhBaUFFZ0FBQkFpQVd6OEFCQUNBV0lTQVAvL0FFY0FBQURyQTI0UUlnQXNBQUFSQXdLVy83UUF1QUFJc1FFQnNMaXdMeXNBQVAvL0FEVC8vQURCQXJZUUlnRHpBQUFRQWdLV2lnQUFBUC8vQURuL2J3RElBbjhRSWdBc0FBQVFBZ0Zzd0FBQUFBQURBQ1gvYndDM0FvWUFDUUFQQUJvQU5FQXhEdzROREFzS0JnTUFBVVlGQVFNQUFnTUNXd0FBQUFGWEJBRUJBUllBU0JBUUFBQVFHaEFaRmhRQUNRQUlJd1lIRkNzU0ZSUUdJeUkxTkRZekF3Y1RQd0VEQmhZVkZBWWpJaVkxTkRPM0VROGdFZzh3TkRJRk1pOGFFUklQRGhFaEFvWWdEeElnRHhMOWV3VUJiRjRGL3FHOEVRNFBFeElPSVFBQUFQLy9BRFAvYndKREFvVVFJZ0F5QUFBUUF3RnNBSWtBQVAvL0FDci9id0ZxQWM0UUlnQlNBQUFRQWdGc0FRQUFBUC8vQURQLytnSkRBMjRRSWdBeUFBQVJBd0tXQUdjQXVBQUlzUUlCc0xpd0x5c0FBUC8vQUNyLytRRnFBcllRSWdCU0FBQVFBZ0tXOHdBQUFQLy9BRFAvK2dKREE1Z1FJZ0F5QUFBUkF3S0xBSU1BdUFBSXNRSUNzTGl3THlzQUFQLy9BQ3IvK1FHUkF1QVFJZ0JTQUFBUUFnS0xEd0FBQVAvL0FEUC8rZ0pEQTVnUUlnQXlBQUFSQXdLTUFJTUF1QUFJc1FJQ3NMaXdMeXNBQVAvL0FDci8rUUZ6QXVBUUlnQlNBQUFRQWdLTUR3QUFBUC8vQURQLytnSkRBN2tRSWdBeUFBQVJBd0tOQUlNQXVBQUlzUUlDc0xpd0x5c0FBUC8vQUNyLytRR0dBd0VRSWdCU0FBQVFBZ0tORHdBQUFQLy9BRFAvK2dKREE2Z1FJZ0F5QUFBUkF3S09BSXdBdUFBSXNRSUNzTGl3THlzQUFQLy9BQ3IvK1FHbUF2QVFJZ0JTQUFBUUFnS09HQUFBQUFBRUFEUC9id0pEQTBrQURBQWFBQ1lBTVFCU1FFOE1DQVFEQVFBQlJnQUFBUUJ1QWdFQkJBRnVDd0VJQUFjSUIxc0tBUVlHQkZjSkFRUUVGa2NBQlFVRFZ3QURBeGNEU0Njbkd4c05EU2N4SnpBdEt4c21HeVVoSHcwYURSa25GQk1SREFjWEt3QTNNeFlYQnlNbUp3WUhJeWNlQVJVVURnRWpJaVkxTkQ0Qk13NEJGUlFXTXpJMk5UUW1Jd0lXRlJRR0l5SW1OVFF6QVRjOEV5czREZ2N1TERBN0J3blJjMGlMWVdselI0cGhmNEZaVlh1RFdWY3dFUklQRGhFaEF4a3dLQ3NYSUNRaEl4ZHhoWGw2czJDSWZIbXdYaXExcEd4eXQ2VnNiLzFWRVE0UEV4SU9JUUFBQkFBcS8yOEJmUUtiQUF3QUhBQXFBRFVBVGtCTERBZ0VBd0VBQVVZQ0FRRUFCQUFCQkd3S0FRZ0FCd2dIV3dBQUFCQkhDUUVHQmdSWEFBUUVFVWNBQlFVRFZ3QURBeGNEU0NzckhSMHJOU3MwTVM4ZEtoMHBKaVluRkJNUkN3Y1pLeEkzTXhZWEJ5TW1Kd1lISXljZUFSVVVEZ0VISXk0Qk5UUStBVGN6RGdJVkZCWXpNajRCTlRRbUl3SVdGUlFHSXlJbU5UUXp2MHNVTGpFUkJ5c3FRaThIREt3eU1sOUFCelV6TTJCQUJ6OUlKaUlsTUVnbUlTVk5FUklQRGhFaEFrbFNSandWTWoxRktoVlNSa1JjajFVRUIwZEhXNDlVQWlsSGZsRTVOVWgvVVRnMC9nc1JEZzhURWc0aEFBRC8vd0F6Ly9vQ2d3TlJFQ0lCUVFBQUVRTUNlUUNOQUxnQUNMRUNBYkM0c0M4ckFBRC8vd0F2Ly9rQjJBS3FFQ0lCUWdBQUVBSUFkaDBBQUFELy93QXovL29DZ3dOU0VDSUJRUUFBRVFNQ2ZRQ0RBTGdBQ0xFQ0FiQzRzQzhyQUFBQUF3QXYvL2tCMXdLcUFBZ0FLZ0E0QUVOQVFDUWpDQVlFQWdRQlJnUUNBZ1JFQUFRQ0JHNEFBd0FBQmdNQVh3QUZCUUpYQUFJQ0VVY0hBUVlHQVZjQUFRRVhBVWdyS3lzNEt6Y3BKaU1tSlJvSUJ4a3JFaThCUHdFV0Z3OEJGZ1luRmhVVURnRUhJeTRCTlRRK0FUY3pGaGNXTXpJMk5UUW5Oell6TWg0QkZRQStBVFUwSmlNaURnRVZGQll6NGpvQkV3ZEpVUkFIazBJeERqSmdRUVk0TWpSZ1FRWWFIQm9TSFNVZ0FoRUtDQlVQL3YxSkp5RW1NVWtuSVNjQ1ZqUUdHUUZKUkJZQlFUZ0NJVFJaajFVRUIwaEpWNDlWQWdNUERTQWJJaUlHREJVa0ZmNHZSMzVQUERWSGZVODhOZ0QvL3dBei8vb0Nnd051RUNJQlFRQUFFUU1DbGdCbkFMZ0FDTEVDQWJDNHNDOHJBQUQvL3dBdi8va0IyQUsyRUNJQlFnQUFFQUlDbHY4QUFBRC8vd0F6Ly9vQ2d3TkFFQ0lCUVFBQUVRTUJhUUNEQUxnQUNMRUNBYkM0c0M4ckFBRC8vd0F2Ly9rQjJBS0ZFQ0lCUWdBQUVBSUNnaG9BQUFELy93QXovMjhDZ3dMM0VDSUJRUUFBRUFNQmJBQ0pBQUQvL3dBdi8yOEIyQUpBRUNJQlFnQUFFQUlCYkFFQUFBRC8vd0JMLzI4Q05BSi9FQ0lBT0FBQUVBSUJiSFlBQUFELy93QSsvMjhCbUFITUVDSUFXQUFBRUFJQmJDd0FBQUQvL3dCTC8vc0NOQU51RUNJQU9BQUFFUU1DbGdCZ0FMZ0FDTEVCQWJDNHNDOHJBQUQvL3dBKy8vZ0JtQUsyRUNJQVdBQUFFQUlDbGdrQUFBRC8vd0JMLy9zQ2Z3TlJFQ0lCUXdBQUVRTUNlUUNBQUxnQUNMRUJBYkM0c0M4ckFBRC8vd0ErLy9nQjlBS3FFQ0lCUkFBQUVBSUFkakVBQUFELy93QkwvL3NDZndOU0VDSUJRd0FBRVFNQ2ZRQjFBTGdBQ0xFQkFiQzRzQzhyQUFELy93QSsvL2dCOUFLcUVDSUJSQUFBRUFJQVF5VUFBQUQvL3dCTC8vc0Nmd051RUNJQlF3QUFFUU1DbGdCYUFMZ0FDTEVCQWJDNHNDOHJBQUQvL3dBKy8vZ0I5QUsyRUNJQlJBQUFFQUlDbGhNQUFBRC8vd0JMLy9zQ2Z3TkFFQ0lCUXdBQUVRTUJhUUIyQUxnQUNMRUJBYkM0c0M4ckFBRC8vd0ErLy9nQjlBS0ZFQ0lCUkFBQUVBSUNnaTRBQUFELy93QkwvMjRDZndNQUVDSUJRd0FBRVFJQmJHdi9BQW14QVFHNC8vK3dMeXNBQUFELy93QSsvMjhCOUFKZUVDSUJSQUFBRUFJQmJDd0FBQUQvL3dCSEFBQUNCQU5TRUNJQVBBQUFFUU1DZlFCSEFMZ0FDTEVCQWJDNHNDOHJBQUQvLy8rTy96NEJmQUtxRUNJQVhBQUFFQUlBUSt3QUFBRC8vd0JILzI4Q0JBSi9FQ0lBUEFBQUVBSUJiQ3NBQUFBQUF2K08vejRCZkFITEFCc0FKZ0EvUUR3UEFRUUNDd29DQXdRSkFRQUJBMFliR1JFUUJBSkVBQUlFQW00RkFRUUFBd0VFQTE4QUFRRUFWd0FBQUJzQVNCd2NIQ1ljSlNzVkpDWUdCeGNyQUJVVUR3RU9BU01pTHdFM0ZqTXlOd00zRnhNek56WTFOQ2MvQVFJVkZBWWpJaVkxTkRZekFYd3NnVVIwUFNVbEFnWW9IbDFlVkRBTU5RbHZKQm9DTEU4UkR3NFJFZzhCb3lrMVQ5NTFaUThxQkErV0FjTUdUZjdFeGtFcklDVUhDLzNtSHc4U0VnNE9FZ0FBQVAvL0FFY0FBQUlFQTI0UUlnQThBQUFSQXdLV0FDd0F1QUFJc1FFQnNMaXdMeXNBQVAvLy80Ny9QZ0Y4QXJZUUlnQmNBQUFRQWdLVzJnQUFBUC8vQUVjQUFBSUVBMEFRSWdBOEFBQVJBd0ZwQUVnQXVBQUlzUUVCc0xpd0x5c0FBUC8vLzQ3L1BnRjhBb2dRSWdCY0FBQVFBZ0ZwOVFBQUFBQUIvL01BN0FINUFSRUFCUUFZUUJVQUFRQUFBVkVBQVFFQVZRQUFBUUJKRWhBQ0J4VXJKU0VuTnlFWEFmUCtBd01IQWZ3RDdBVWdCQUFBQUFBQi8vTUE3QVBOQVJFQUJRQVlRQlVBQVFBQUFWRUFBUUVBVlFBQUFRQkpFaEFDQnhVckpTRW5OeUVYQThiOE1BTUhBODhFN0FVZ0JBQUFBUC8vQUVBQnlRQ1VBbjhSQ3dIV0FOVUVSOEFBQUFteEFBRzRCRWV3THlzQUFBRUFRUUhJQUpVQ2ZnQU1BQWF6REFNQkxDc1NGUlFITHdFMk5UUW5OVFkzbFQ0VkFTc21CaFlDYmpFMFFSQUZMaVlpRFFVSEVnRC8vd0FkLzVZQWZnQS9FQUlBRC93QS8vOEFPUUhLQVAwQ2dCQXJBZFlCUGdSSXdBQVJDd0hXQU00RVNNQUFBQkt4QUFHNEJFaXdMeXV4QVFHNEJFaXdMeXNBQVAvL0FENEJ5QUVBQW40UUlnSFdhd0FRQWdIVy9RQUFBUC8vQUIzL2xnRHRBRDhRSWdBUGF3QVFBZ0FQL0FBQUFBQUJBRDMvb2dIQkFrMEFFUUExUURJUUNBSUJBZ0ZHRFF3Q0FrUUFBQUVBYndNQkFnRUJBbEVEQVFJQ0FWVUZCQUlCQWdGSkFBQUFFUUFSRkJJVEVnWUhGeXNCQndNSEp4TTNJeWMzTXo4QkZ3Y3pGd2NCRGdrdUlRUXVDcW9EQjZvWEl3SVhxZ1FJQVdwTS9vVUJCUUYxVGdRZ3ZBTUR2QVFnQUFBQUFRQWIvNklCd1FKTkFCc0FRa0EvR0JBQ0JRWUtBZ0lCQUFKR0ZSUUNCa1FBQWdFQ2J3Y0JCZ2dCQlFBR0JWMEVBUUFCQVFCUkJBRUFBQUZWQXdFQkFBRkpFaFFTRWhJU0VSSVFDUWNjS3pjekZ3Y2pEd0VuTnlNbk56TS9BU01uTnpNL0FSY0hNeGNISXdmeXFRVUhyQmNnQkJhb0JRaXFFd3FwQkFlcUZ5TUNGNm9FQjZzS2dRUWh1UUVGdFFVZ20xQUZJTGtEQTdrRUlVNy8vd0JiQU5VQW53RWJFUXNBRVFBZUFObER3Z0FJc1FBQnNObXdMeXNBQVAvL0FEci8vUUI2QUQ0UUFnQVJBQUQvL3dBMi8vMEJHQUErRUNNQUVRQ2VBQUFRQWdBUi9BRC8vd0FlLy8wQm9nQStFQ01BRVFDR0FBQVFJd0FSQVNnQUFCQUNBQkhrQUFBSEFFbi9wZ1J3QXFFQUJRQVJBQndBS0FBMEFEOEFTZ0JrUUdFUEJ3NERCUkVMRUFNSkFBVUpYd0FDQUFBSUFnQmZEUUVEQXdGWERBRUJBUTVIQ2dFSUNBUlhCZ0VFQkJjRVNFQkFOVFVwS1IwZEVoSUdCa0JLUUVsRlF6VS9OVDQ3T1NrMEtUTXZMUjBvSFNjaklSSWNFaHNYRlFZUkJoQXFFZ2NVS3drQkx3RUJGd1FXRlJRR0l5SW1OVFEyTXc0QkZSUXpNalkxTkNZakFCWVZGQVlqSWlZMU5EWXpJQllWRkFZaklpWTFORFl6QkFZVkZCWXpNalkxTkNNZ0JoVVVNekkyTlRRbUl3S3ovY1lUQkFJNkZQNTlQVmhST2o1YVVFUkNXejFDTHkwQjBqNVlVVG8rV1ZBQnNEMVlVVG8rV2xEK1JrRXVMRDFDWEFFNlFsczlRaTh0QW9yOUhBc0xBdVVNRkVkQlkzQkhRbUp3STFoUGJsaFBOVG4rK1VaQ1kzQkhRbUp3UjBGamNFZENZbkFqV0U4MU9WaFBibGhQYmxoUE5Ua0EvLzhBVUFIUkFKWUNmUkFDQUFvQUFQLy9BRkFCMFFEekFuMFFJZ0FLWFFBUUFnQUtBQUFBQVAvL0FDRUFNQURsQVpFUkN3SGxBT2tCd2NBQUFBbXhBQUc0QWNHd0x5c0FBQUVBQkFBd0FNZ0JrUUFJQUFhekJ3RUJMQ3MzQnljL0FTYy9BUmZHcXhjQm1uVUNHb0xYcHc4SW1wa0lENndBQUFIKzYvK21BVHdDb1FBRkFBYXpCQUVCTENzSkFTOEJBUmNCUFAzRkV3TUNPaFFDaXYwY0N3c0M1UXovL3dCUEFVUUJjQUsvRVFNQ1pBQXBBVWdBQ2JFQUFyZ0JTTEF2S3dBQUFQLy9BRGNCUlFGUUFyd1JBd0pvQUNrQlJ3QUpzUUFDdUFGSHNDOHJBQUFBLy84QU1BRkRBVGtDdmhFREFta0FLQUZIQUFteEFBRzRBVWV3THlzQUFBRC8vd0JFQVVNQlFBTEJFUU1DYWdBb0FVY0FDYkVBQXJnQlI3QXZLd0FBQVAvL0FGQUJRUUZDQXIwUkF3SnJBQ2dCUndBSnNRQUJ1QUZIc0M4ckFBQUEvLzhBUUFGREFVQUN2eEVEQW13QUtBRkhBQW14QUFPNEFVZXdMeXNBQUFELy93QlNBVU1CVHdMQkVRTUNiUUFvQVVjQUNiRUFBcmdCUjdBdkt3QUFBQUFCQUE0QUFBR1RBZTRBR0FBNlFEY0RBUUVBRUFrQ0F3SUNSZ0FIQUFnQUJ3aGRBQUFBQVFJQUFWMEdBUUlGQVFNRUFnTmRBQVFFRHdSSUVoSVNFUkVTRWhJZ0NRY2NLeE16TnhjSEl3OEJNeGNISXdjak55TW5Oek0zRXlFWEJ5ZVBZMWNDQjdrS0FuWURCWGNNS2c1REF3VkVBaW9CRFFNSTR3RUlBUVllVEJBREdteHNCQmtOQVZnRkh3RUFBQUFCQUE3Lyt3SGtBZkVBS2dCVVFGRURBUUlCQUNVQkFnRWZBUVFERndFRkJBUkdEQUVMQUFBQkN3QmZDZ0VCQ1FFQ0F3RUNYUWdCQXdjQkJBVURCRjBBQlFVR1Z3QUdCaGNHU0FBQUFDb0FLU2NtSkNNU0VpUWlFaElTRVNRTkJ4d3JBQmNQQVNZaklnY3pGd2NqQmhVekZ3Y2pIZ0V6TWpjWEJ3WWpJaVluSXljM016WTNJeWMzTXo0Qk13R3ROdzBITUVhUkxNb0RCdEFKemdJR3lBZElRRXhEQndoSlMxUmRCVThEQjBzQ0Iwb0NCazRiZVZvQjhTZ2lBU2VUQkIwcUxBUWNRRU10QXlJdFYxRUVIQ3dxQkIxWlhnQUFBUC8vQURiLy9BREJBcjhRQWdCUEFBQUFBZ0JOQVpVQ0lRSitBQTBBSVFBSXRSb09EQVVDTENzQkJ5Y2pEd0VqUHdFakJ5YzNNd1VqUHdFakJ5TW5JdzhCSXpjekh3RXpQd0V6QVFFRkxCc1NCeDhLRVJ3dEFnV3RBUjRiQVFFRFdob3dBaHNRR3pjbENTWUNTeEFrQW5zWEFvaEpSb3NDQXhmcFIzR2RuVzVLNlNPQ2d5SUFBQUQvL3dBUi8vNENmQUtGRUFJQmJ3QUFBQUlBTlAvMkF4SUNpUUFjQUMwQUNMVWpIUk1BQWl3ckFCNEJIUUVoSWgwQkZCY2VBVE15TmpjekRnRWpJaTRCTlRRK0FUTU9BUWNHSFFFVU15RXlQUUUwSnk0Qkl3SUhxR1A5ckFZSkszZEJTSUV1S0RLWVZtT3BZMk9wWTBGMUt3b0dBY29IQ2l0MVFRS0pXWmRhQmdhMUN3c3NNamd4T2tOWW1GbGFsMWtVTVN3S0RxMEhCN0VOQ2lzdkFBQUEvLzhBRlFBZUFlSUJxeEdEQWZjQUZ3SGlBQURBQUVBQUFBQUFDYkVBQWJnQjRyQXZLd0FBQVAvL0FEVUFBQUhDQWMwUkN3SDNBZmtCeThBQUFBbXhBQUc0QWN1d0x5c0EvLzhBRmdBaEFlTUJyaEdEQWZjQjRmL3FBQUJBQU1BQUFBQUFDYkVBQWJqLzZyQXZLd0FBQUFBQkFEZi8vZ0hFQWNzQURBQUdzd2NBQVN3ckJTTW5Oek1YQXpjWEF6Y3pGd0VCQjhNS0NhSUNCQ0lDb3drS0FzQWNuZ0dMQkFQK2RKNGNBUC8vQUdVQU53RzhBWTBSZ3dIM0FSOENPdExCMHNFdFA5TEJBQW14QUFHNEFqcXdMeXNBQUFELy93QStBRGtCbEFHUUVZTUI5d0pCQU5iU3dTMC8wc0hTd1FBSXNRQUJzTmF3THl2Ly93QTlBRHdCbEFHU0VZTUI5d0RhLzQ4dFB5MC8wc0V0UHdBSnNRQUJ1UCtQc0M4ckFBQUEvLzhBWmdBOEFid0JreEdEQWZmL3VRRDJMVC9Td1MwL0xUOEFDTEVBQWJEMnNDOHJBQUlBSlAvNUFkQUN5d0FYQUNZQUNMVWRHQllHQWl3ckFCWVZGQWNPQVNNaUpqVTBOejRCTXhZWE55WWxQd0V6RWpZM05qY21JeUlHQndZVkZCWXpBVGVaQkJDQVpsZGJBdzEzWUUxQ0JoaisrUUVlQjRkakRRSUNTVkZOWEFvQ1JrTUNrTW1KSWh4K2lWcFJFeFZrY0FVMUJPQmpDQmI5VlhKc0VTSkdXRk1ORjBKRy8vLy85UUFBQWVVQ2Z4QUNBVzRBQUFBQkFGSUFBQUovQW44QUVRQUdzdzRDQVN3ckFRTUhJemNUSVFNSEl6Y1RJeWMzSVJjSEFrYzBGekViTVA2M05CY3dHekF4QXdvQ0NRTUpBbFgrY01YQ0FaVCtiOFhDQVpNR0pBWWtBQUFBQUFFQUJnQUFBZnNDZ0FBUkFBYXpFQWtCTENzQkp5RVRCd01oTnhjSElUY1RBemNoTnhjQjhrMys2YXdCOHdFTVZ3VUovbUVFK3JBRkFVNVFCQUpUQXY3MEMvN3JBd1ltSkFFZ0FSVW1BUWNBQVFBbkFQa0J3UUVlQUFVQUJyTURBQUVzS3lVaEp6Y2hGd0crL200RkJBR1JCZmtGSUFRQS8vOEFDUCtSQVRJQ3BCQUNBQklBQVAvL0FIWUExZ0M3QVJ3UkN3QVJBRGtBMmtQQ0FBaXhBQUd3MnJBdkt3QUFBQUVBQWdBQUFrNEN4Z0FNQUFhekNnQUJMQ3N6QXlNbk56TVhFek1CTnpNQnRGWlpBd2QyQkZBRUFVc0dKdjZaQWFJRElnVCtjUUtPQlAwNkFBTUFBQUNIQWVrQmpRQVZBQ0VBTFFBS3R5WWlHaFlFQUFNc0t3QVdGUlFHSXlJbUp3NEJJeUltTlRRMk16SVhOak1FQmhVVUZqTXlOamN1QVNNV0JnY2VBVE15TmpVMEppTUJzelpLT3kwekVoeEJMVEE0U3p4UEl6ZFMvdFkySnlNbk54c05LaWpOTlJnUktTZ3FOaWNrQVkwL00wUlFNekF2TkQ0elExSmJXeUk3TWljc05TOHNNQUUwTFM4eE96SW1MZ0FCLy9qL2NnRnNBc29BRkFBR3N3c0FBU3dyQUJjUEFTWWpJZ2NERGdFSEp6VStBVGNUUGdFekFVNGVDQVFkSGxvUFFBZ3VPUlV1SlFjL0IxQkJBc29KSkFNTFovMzJRMUF2RkFjcVF6Y0NDRVpMQVAvL0FFZ0FrZ0hFQVlnUUlnQmhIVkFSQWdCaENyWUFFYkVBQWJCUXNDOHJzUUVCdVArMnNDOHJBQUFBQUFFQUhRQVVBY29CK2dBWkFBYXpFZ1VCTENzM014Y0hJd2NqSnpjakp6Y3pOeU1uTnpNM014Y0hNeGNISSt6R0JRUFZOeUlETlpZRkJLUXJ1d1VFeVRRaEJES2hCUU93MEFRaGx3U1RCU0IyQlNDUEJZb0VJZi8vQUFQL3N3SFBBY3NRSWdBZkJBQVJBd0lBLzl6K3VnQUpzUUVCdVA2NnNDOHJBUC8vQUFQL3N3SGZBY3NRSWdBaEJBQVJBd0lBLzl6K3VnQUpzUUVCdVA2NnNDOHJBQUFDQUVEL3NRR3NBb0lBQ1FBUEFBaTFEZ3NJQXdJc0t3RUhBd2NuQXpjVE54Y0RFek1UQXlNQnJBUEtKQVIzQThvbEJORnFCYk5xQlFFa0ZQNmlBUU1CWEJNQlhRSUQvcG4reWdFNEFUY0FBQU1BaFFJbUFXTUMrd0FJQUJRQUlBQUt0eGtWRFFrSEF3TXNLd0VIQmdjdkFUWTNGd1lXRlJRR0l5SW1OVFEyTXpJV0ZSUUdJeUltTlRRMk13RmpCRk55QmdaZ1pnYXBFQkVPRFJBUkRxRVFFUTRORUJFT0F0a0hHaDBFR3hvbkJKUVFEZzRSRUE0T0VSQU9EaEVRRGc0UkFBQUFBd0NDQWlZQmFnTDdBQWdBRWdBY0FBcTNGaE1NQ1FnREF5d3JBQmNQQVNZdkFUOEJGaFVVQmlNaU5UUTJNeklWRkFZaklqVTBOak1CQjJNSkIzSkxCQTBHRXhRUEdoTVFyaE1RR2hNUUF0WWNHd1FmR0FjZUJKZ2FFQk1hRUJNYUVCTWFFQk1BQUFBQkFELy9mUUdvQXNFQUlBQnpRQmtWQVFVRElCOENBZ1FOQVFBQ0EwWUpDQWNEQWdFQUJ3QkRTN0F0VUZoQUhRQUVCUUlGQkFKc0FBTUFCUVFEQlY4QkFRQUFBbFVHQVFJQ0VRQklHMEFqQUFRRkFnVUVBbXdBQXdBRkJBTUZYd1lCQWdBQUFsRUdBUUlDQUZVQkFRQUNBRWxaUUFvVElSTVRFaFlVQndjYUt5VVBBUk0zSXc4REV6Y2pKemN6Tno0Qk14OEJCeU1tSXlJR0R3RXpOeGNCZVFVME1nUEJIUjBHTkN3ZFJRVUdTUXNOV0VwY0Fnd0pMaWd2UGdrTnd5a0ViR3NGQVd3MjI5WnFCZ0ZCNEFVZVZWTllGZ1FwSFVBN1h3b0VBQUFBQUFFQVAvOTlBYzBDeEFBY0FHTkFHaHdiQWdBRkJBTUNBUUFWREFJQ0FRTkdFUkFQQWdFQUJnSkRTN0F0VUZoQUZRQUZBQUFCQlFCZkF3RUNBZ0ZWQkFFQkFSRUNTQnRBR3dBRkFBQUJCUUJmQkFFQkFnSUJVUVFCQVFFQ1ZRTUJBZ0VDU1ZsQUNSSVNGUklUSlFZSEdTc2xEd0VUTnlZaklnWVBBVE1YQnlNRER3RVROeU1uTnpNM05qTVhOd0Y4QnpOVEF5OHBNa0FKRFhBRkJuTTVCek1ySGtjRUJVb01GNXBZS214ckJRSmdOUTAvUEdJRkh2NVBhZ1lCUWVBRkhsbXFDUVFBQUFELy93QkgvNXdDRUFOUkVDSUFMQUFBRUNNQ2VmL2FBTGdRSXdBdEFQY0FBQkVEQW5rQXVnQzRBQkN4QVFHd3VMQXZLN0VEQWJDNHNDOHJBQUFBQWdBei8wWUNRd0tGQUJVQUlRQUl0UjBYRGdVQ0xDc0VGeFVHRHdFbUp3Y2lKalUwUGdFek1oWVZGQVlISmhZek1qWTFOQ1lqSWdZVkFacVJEZ3NGbTA4VWFYTklpbUZxYzMxMDdWbFZlNE5aVjN1QldEa0lHQWdCUm04QmlIeDVzRjZGZWFQTkY1Wnl0NlZyY0xXa0FBSC9oQUFBQWpZQjdnQWhBQWF6SHhVQkxDc0JGaGNQQVNZaklnWVZGQll6TWpZM0Z3Y0dCek1ISVRjekpqVTBOamNqTnlFSEFaRUxEQThITGtSYlpVWkNJa2tlQndrYkJhd0QvWXdEOWt0RlFma0RBblFEQWRRR0NDa0NMSUozVUZZYUZnTXBEd0liR3k5K1k0a2dHaG9BQUFBQUF2K0VBQUFDbEFIdUFCQUFHd0FJdFJjU0RnY0NMQ3NCRmhVVUJnY3pCeUUzTXpjVEl6Y2hCd1ltSXdjREJ4WXpNalkxQVpOVFIwUDlBLzB1QThJUUtNSURBdElEMlV4S2VTVU5ORDlpYkFIVUxYdGpqU0ViRzN3QlBSb2FZVkVEL3Rwd0JZVjVBQUFCLzRRQUFBRnFBZTRBRFFBR3N3a0NBU3dyTnpNSElUY3pOeE1qTnlFSEl3Tnh2Z1ArV0FPOUVTYThBd0dvQTc0cEd4c2JmQUU5R2hyK3hnQUIvNFFBQUFIbUFlNEFFUUFHc3cwR0FTd3JOek0vQVFjekJ5RTNNemNUSXpjaEJ5RURjS1lPSXc1eUJQM2RBN3dTSmJzREFpUUQvc1FuS0ZnQ1p4c2JpUUV3R2hyKzB3QUQvNFFBQUFNREFlNEFDd0FSQUJzQUNyY2FFdzRNQ0FJRExDc2xNd2NoTnpNVEl6Y2hCeU1oRnhNekV6Y2JBU01ESXdNakR3RWhBaG12QS95L0E2dG4yZ01EUVFQYy9ySU1VQVNjR0E0RkJia25ZZ004SGdHWkd4c2JBYmthR2pMKzZRRWNMZjdNQVFIK3NBRlEvb2dBQXYrRUFBQUNUd0h1QUFzQUVRQUl0UTRNQ0FJQ0xDczNJUWNoTnlFREl6Y2hCeU1oRnhNekV6ZnRBU2NEL1hNREFTSmlpQU1DalFOLy9xWURWd1BJQ1JzYkd3RzVHaG9XL25jQmh4Z0FBQUFELzRRQUFBSmtBZTRBRFFBU0FCY0FDcmNYRkJJUENRSURMQ3NsTXdjaE56TTNKeU0zSVFjakJ6OEJJeDhCRHdFaEx3RUJqSjBEL1Y0RGw3aDVuZ01Db2dPb3JIRUwrQVpnb1FrQkRBaGxHeHNiNHRjYUd0VEVFQTZwOVEwUXRQLy9BRFQvL0FDM0FvWVFJZ0R6QUFBUUFnRm1wZ0FBQVAvL0FEWC8rd0ltQW9NUUFnRjRBQUFBQVFBLy8zMEJxUUtzQUJvQUJyTU1CQUVzS3hNUEF4TTNJeWMzTXpjMk14OEJEd0VtSXlJR0R3RXpGd2UwSFIwR015c2VSZ1VHU1FrV2tGTUNEUWtvSXkwNkNBcnRCQVVCbnR2V2FnWUJRZUFGSGtDckRnUW1BUk0vUEVvRkhnRC8vd0EwL3o4QnhnS3FFQ0lBOHdBQUVDSUFkcWdBRUNNQllRRFRBQUFRQWdCMmV3QUFBUUEvLzMwQnR3TEVBQm9BQnJNWER3RXNLd0VISmlNaUJnOEJNeGNISXc4REV6Y2pKemN6TnpZekh3RUJyQWcyTGpNL0NRMXdCUVp6SFIwR015c2VSZ1VHU1F3WG1ta0RBbzhDRVQ4OFlnVWUyOVpxQmdGQjRBVWVXYW9MQkFBQUFnQkRBVlFCTEFLSEFCRUFIZ0FJdFJnU0VBSUNMQ3NCRHdFM0l3WUhJeTRCTlRRMk56TVhOeGNDUGdFL0FpY09BUlVVRmpNQkRnVXFFd1UyT2drYkZsQklBeThhQmFVbk14a0RBeWt5UEJBSUFaNUdCSmhrTkEwc0tGQjFDZ1lKQlA3NUxWQTBGQjRHQVY1REl5UUFBQUlBU2dGVUFUUURLUUFRQUJ3QUNMVVZFUXNGQWl3ckFCWVZGQVlISXk4QkV6OEJBek0yTnpNQ05qVTBKaU1pRGdFUEFSY0JIaFpTU0FNbEtETUZLeXNGTnpzS01qMFFCd1luTmhvRktRSjFLaVpSZHdrSEJ3R0VQZ1grd1dJMy92QmZReUlrTEZBMExRc0FBQUVBUkFGVUFSRUNoUUFZQUFhekZoQUJMQ3NCRHdFbUl5SUdGUlF6TWpjekZ3NEJCeU11QVRVME5qTVhBUkVMQ2hnU01UWXRLU0lHRHhZdUh3Y21KRTlQS3dKeEhRSVNWa3hNT3hJa0lnVUZMVGRaYnc0QUFBQUNBRUlCVkFGQ0F5a0FFZ0FlQUFpMUdCTVNBZ0lzS3dFUEFUY2pCZ2NqTGdFMU5EWTNNeGMvQWdJK0FUOEJKeUlHRlJRV013RU9CU3NVQkRRK0NSc1dVVWtFSlE0RUs3NG5OUm9IS1RNOUR3Z0Jua1lFbUdBNERDc25VWGNKQkdjK0JmNVRMRTR6TmdWZ1JDSWlBQUFBQWdCRUFWUUJFQUtHQUJVQUhBQUl0UmdXQ2dJQ0xDc0JCZ2NqTGdFMU5ENEJOek1XRlJRSEZSUXpNamNYSmdZSE5qVTBJd0QvS1QwSEtpUWxRQ2tHT0tVdkxpSUhTelFGZmlBQm5VQUpCRFF4T1ZvMEFnZ3ZUamNFVXp3QnVrZzdMemNkQUFFQVRRRDBBU3NES0FBYUFBYXpGdzRCTENzQkJ5WWpJZzhCTXhjSEl3OERQd0VqSnpjek56NEJNeDhCQVNJSEdCY3pDUWhHQXdSSkV4TUZMQjBSS2dRRkxBY0hPUzAzQWdML0FnMU5Qd1VXakpsR0JOK1FCQmMzTnp3SUF3QUFBQU1BQndEWEFTa0Nod0FUQUNBQUxnQUt0eVFoR0JRU0F3TXNLd0VIRGdFaklpWW5Qd0UxSmpVME5qY3pGemNYRGdFVkZCWXpNajRCUHdJbkFqWS9BU01HRHdFR0ZSUVhGak1CRFFZSlVUNHFOZ2dEWVJ0TFF3TXNGd1YrT1E4SEJpUXhHQUlDSkRzNUJ4TUZManhOQlFjUkxBR3RQRXhPTGlnR1BBUVlOMHR1Q1FVSUJCNVhRUjhmS1VveEV4d0QvcEU1TjVKVk96VURCUWdPSHdBQUFBQUJBRWdCVkFFM0F5a0FHUUFHc3hRR0FTd3JBQllQQkQ4Qk5DWWpJZ1lQQXhNL0FRTXpOamN6QVI0YUFRRWNCaXNqQVFzSUQwWXNBZ1VxTlFRckt3WkZOQWdDZ2lFV0NhWkVCTjBKRGhKYlVSQkdCQUdTUGdYK3dYWW1BQUlBUlFGVUFLY0RDQUFLQUJBQUNMVVBEQU1BQWl3ckVoVVVCaU1pSmpVME5qTURCejhDQjZjUkRRb05FQTBlTENBRUtoNERDQlVPRVFzS0RoSCtVQVR0UHdQbEFBQUFBQUlBRFFEWkFLZ0RDQUFIQUJrQUNMVVlEQUlBQWl3ckVoVVVJeUkxTkRNREJ3NEJCeWMzUGdFL0FpTW5Oek0zRjZnYkdod1RCd2NuS3c4Qkhod0dIZ0l1QkFVeEpnSURDQmtiR2hyK2tESTFQUnNUQlJZd0tPTWhCQmNFQWdBQUFBRUFTUUZRQVQ4REtRQWVBQWF6RmdVQkxDc0FCeFlYRHdFbkppYzNOalUwSmlNaUR3TVRQd0VETXo0QlB3RVdGUUUvWXlNc0FpRUZNUjBCWHc0SUoxNENCU28xQkNzckJ5UTRIUWswQWdvOE9Ub0VCd0pJTVFrME5ROFByQkZHQkFHU1BnWCt3ejVLRHdFSk1BQUFBQUFCQUVVQlZBQ3BBeWtBQlFBR3N3UUJBU3dyRXdjVFB3RURjQ3MyQXlzMEFWZ0VBWkkrQmY1MUFBQUFBQUVBU1FGVUFlTUNoZ0F0QUFhekl3WUJMQ3NBRmc4RVB3RTBKaU1pQmc4RFB3RTBKaU1pQmc4RFB3SUhNelkzTXg0QkR3SXpOamN6QWNrYkFRRWNCU3dqQWd3SEVVa3RBZ2NzSlFFTkJ3OUhMQUlGS3g4RUt4UUdSeklJRmh3QkFROEhSek1IQW9JaEZnbW1SQVRkQ1E0U1lGUUtSQVRkQ1E0U1hGQVFSZ1R0UHdPWmVDUUZJQllKV0hjbEFBQUFBQUVBU0FGVUFUY0NoZ0FhQUFhekdRWUJMQ3NBRmc4RVB3RTBKaU1pQmc4RFB3SUhNejRCTnpNQkhCd0JBUndHS3lNQkN3Z1BSaXNDQlNzZkJDc1VCU1UzSFFnQ2dTRVZDYVpFQk4wSkRoSmFUeE5HQk8wL0E1aytTaFFBQWdCQ0FWTUJIZ0tHQUFzQUZnQUl0UThNQ2dRQ0xDc0FGUlFHQnlNbU5UUTJOek1PQVJVVU16STJOVFFtSXdFZVRVSUZTRTVDQlRrMUxDNDBGQmNDZlZoY2NnUUdYbHB5QXlCaFRVWmdUeVFoQUFBQUFnQTRBTmtCTHdLREFCSUFIZ0FJdFJjVERRb0NMQ3NBRmhVVUJnY2pKdzhDRXo4QkJ6TTJOek1DTmpVMEppTWlEZ0VQQVJjQkdSWlFSZ1FtQndVckx3TXJGQVl5UFFreE93NElCaVUxR2dVcEFuVXFKbEYzQ1FjNFJ3TUJhRDhEbVY4Ni92QmZSQ01pTEZBMExRc0FBQUlBUVFEWkFTY0Nod0FSQUI0QUNMVVlFaEFDQWl3ckV3OEJFeU1HQnlNdUFUVTBOamN6RnpjWEFqNEJQd0luSWdZVkZCWXorUVVxSXdVeVBBa2FGbEZIQXlzYkJhUWxOQmtEQXlZeU93NEhBU05IQXdFVFh6a01MQ1pRZUFrRkNRVCsrU3hQTkJZZUJXQkZJU0lBQUFBQkFFY0JWQUVLQW9NQUVBQUdzd29IQVN3ckFRY25JZzhEUHdJSE16NEJOeGNCQXdRTExFNENCaXNmQkNvVENCNCtHUXdDVWdJQ29CUkdCTzAvQTVsRFVBUUNBQUVBTHdGVEFPOENoQUFqQUFhekloRUJMQ3NTRnc4QkppTWlCaFVVRmhjZUFSVVVCZ2NtSno4QkZqTXlOalUwSmljdUFUVTBOaGZWR2dvSEdSb1pIeFlYSGg0OE1DY2FDUVljSXhraUZ4a2NIajB0QW9FTUh3SVRIeFFQRnhBVkl4c2xNZ0VFRHlJRkhoNFZFaGtTRXlJWkp6RUJBQUFBQUFFQVRBRlVBUVFDMlFBY0FBYXpGUWdCTENzVEZqTXlOek1YQmdjakxnRTFQd0lqSnpjelB3RVhCek1YQnlNSGdBRVhJUmNJQ3gwdUNCMGFBUndGTEFNRE1Bc25CQTVhQXdOZklBR09HRGNQUHdzQ0Z4Z1NxeUVFRjA4TUExZ0ZGc2dBQUFBQkFFd0JVUUU1QW9NQUdnQUdzeG9IQVN3ckFROEJOeU1PQVFjakxnRS9CQThCRkJZek1qWS9Bd0VjQmlzVkJTUTNIQWNYR3dFQkhBVXNJd0VMQ0E5RExBUURLd0dlUmdTWVBVb1VCU0VXQ2FWRUE5d0pEaE5ZVHg0L0F3QUFBQUFCQUZrQlZ3RW5Bb1FBRUFBR3N4QUVBU3dyQUJVVUR3RWpBemNmQVRNM05qVTBKemNCSnh4a0xTRXFBeEVFVGhZUEpnSm9HQ0V5cGdFb0JETE5oaWdjRmhVTEFBRUFXUUZYQWQ0Q2hBQWFBQWF6R2dRQkxDc0FGUlFQQVNNbkl3Y2pBemNmQVRNL0FUTWZBVE0zTmpVMEp6Y0IzaHBmTEJzRWJpOGtLZ0lXQkdJUExBSVhCVWNXRUNZQ2FSc2dNYWJ5OGdFb0JDVFkxU1FoMklNcEdoWVdDd0FBQUFFQUtBRlVBVUFDaFFBUEFBYXpDQUFCTENzVEx3RVBBU00zSnpjZkFUOEJNd2NYN3dveVRCQXZkVVlyQ2pCSUR5MXdUUUZVSDJKa0dwcU5CeHBlV3hpU2xBQUFBZi9lQU5nQkpnS0VBQm9BQnJNYUJnRXNLd0FWRkE4QkRnRWpJaThCTnhZek1qY0ROeDhCTXpjMk5UUW5Od0VtSGxBdVRTb1dIZ0VGR1JZOE9qd3FCeUlJUXhZUUpRSnJIU2N6aWs5RENpTUVDVllCS1FReXhYc29IUlFaQ3dBQUFRQWVBVkVCSHdLS0FCMEFCck1jQ2dFc0t4TTNNaGNXTXpJL0FSY0dJeUluSmlNaUJ5TW5FdzhCSno4Qkh3RTNGMkFSQ3hvYUN6a0dDUkVIVXhJaUlBNFVFd1VPd213aUF3Y0VLSUFPRHdHREF3Z0lYQUlKZWd3S0V3d0Evd0VEQkNJREFnSUtEQUFCQUQvL2ZRR3ZBc0VBR2dBR3N3d0VBU3dyRXc4REV6Y2pKemN6TnpZekh3RVBBU1lqSWdZUEFUTVhCN1FkSFFZekt4MUZCUVpKQ3hlUVV3SU9DQ2dqTGpvSERmSUZCZ0dlMjlacUJnRkI0QVVlVmFzT0JDWUJFejg4WHdVZUFBQUJBRC8vUHdHb0FzRUFKd0FHc3hrRUFTd3JKUWNPQVFjbk56NEJOeE0zSXc4REV6Y2pKemN6Tno0Qk14OEJCeU1tSXlJR0R3RXpOeGNCZVFvS09UOFJBVEVzQ0RBRHdSMGRCalFzSFVVRkJra0xEVmhLV3dNTkNTd3BMejRKRGNNcEJHVlRVRm9wRndja1NrQUJYVGJiMW1vR0FVSGdCUjVWVTFnV0JDa2RRRHRmQ2dRQUFBQUFBZ0JELy9zQjZ3Sk5BQXdBR0FBSXRSRU5CUUFDTENzQUZoVVVEZ0VqSWlZMU5EWXpEZ0VWRkJZek1qWTFOQ1lqQVk5Y09tNU9WMXVDZG1kcFNFVmZhMGhGQWsxNmIyK2lXSGx3cU1FdW81QmZaNldQWUdVQUFBRUFMd0FBQVA0Q1VRQUpBQWF6Q0FFQkxDczNCeU0zRXdjblB3RVh6UmN4R3ltVkJRWERCODdPeHdGUktRUW1PQVlBQUFBQkFCdi8vZ0cwQWs0QUhRQUdzd3NBQVN3ckFCWVZGQVlQQVJjek54Y0hKeU1ISno4QlBnRTFOQ1lqSWdjakp6WXpBVk5LUlZ5YkF2SmNBd3hsK2lzREJMVlVSQzRzVjA4SEExZGZBazVDTkM5b1o2NERBd1lvQWdFQ0ljcGZZU2tpTFZvb1hBQUFBQUVBRmYvOEFXa0NVQUFwQUFhekN3QUJMQ3NBRmhVVUJnOEJGaFVVRGdFaklpYy9BUll6TWpZMU5DWW5JeWMzTXpJK0FUVTBKaU1pQnlNbk5qTUJJa2RDT1FGeVBteERNQzBCQlNveVVtZEhRalFFQmlzZlNEQXdLVUJIQndKTlNnSlFQVEl1V0JzREhHVTNWeklLS2dVUVVVTXdPQU1FSXlWQkppUXJQU2RBQUFBQUFBSUFIdi84QWJZQ1NnQVFBQlFBQ0xVVEVRd0ZBaXdySlNjakR3SW5OeU1ISnpjQk13TXpGd01qQXpNQnJsRVRGUVFsQXhqS05nTURBU3N2TFdRRWF3WDExYlVCc2dRRUJMWUJCU0lCYnY2VUJnRXcvdFlBQUFBQkFCYi8rUUdTQWt3QUh3QUdzeDRLQVN3ckFRY25Jd2NYRmhVVURnRWpJaWMxTnhZek1qNEJOVFF2QWo4QkZ6TTNGd0dKQlRpdEdEK2ZRWE5ISnkwR01DZzVXVEdEVXdRZURET0lUUU1DSVFRRXR3NGtjVHBlTmdnckJBOHBTUzVXSGhFRzlna0JBZ01BQVAvL0FERC8rUUd4QWxFUUFnQVpBQUFBQVFBOC8vUUJxQUpNQUF3QUJyTUxCQUVzS3dFM0J3RUhMd0VCSXdjbk54Y0JnU2NEL3ZZMUtBSUJOK3BEQkFsTUFrb0JKZjR6WlEwSUFoY0VCeWtDLy84QUxQLzdBWndDVGhBQ0FCc0FBQUFDQURmLytRRzRBbEVBRlFBaEFBaTFHaFlHQUFJc0t3QVdGUlFPQVFjakp6VWtOeWNHSXlJbU5UUStBVE1TTnpZMU5DTWlCaFVVRmpNQlkxVkNtMzhGSUFFQ1B3UkdTVVJTSkZkSktra0ZlMUJFT3pZQ1VXQldTcDZPTEJjR1ZiZ0ZNMUJETEZ4Qi9zcEFHU09VWUQ0M093QUEvLzhBR1ArREFUa0EvaEVDQW1UeWh3QUpzUUFDdVArSHNDOHJBUC8vQUJqL2h3Q3FBUUVSQWdKbC80Y0FDYkVBQWJqL2g3QXZLd0QvLy8vbC80WUEvUUVBRVFJQ1p0aUlBQW14QUFHNC80aXdMeXNBLy8vLzdmK0VBTllCQUJFQ0FtZmpod0FKc1FBQnVQK0hzQzhyQVAvLy8vUC9oUUVNQVB3UkFnSm81WWNBQ2JFQUFyai9oN0F2S3dELy8vLzIvNFFBL3dEL0VRSUNhZTZJQUFteEFBRzQvNGl3THlzQS8vOEFBUCtFQVB3QkFoRUNBbXJraUFBSnNRQUN1UCtJc0M4ckFQLy9BQ2IvZ2dFWUFQNFJBZ0pyL29nQUNiRUFBYmovaUxBdkt3RC8vLy8vLzRRQS93RUFFUUlDYk9lSUFBbXhBQU80LzRpd0x5c0EvLzhBSHYrREFSc0JBUkVDQW0zMGh3QUpzUUFDdVArSHNDOHJBQUFDQURULyt3RzhBazBBRFFBWkFBaTFFZzRGQUFJc0t3QVdGUlFPQVNNaUpqVTBQZ0V6RGdFVkZCWXpNalkxTkNZakFXbFRObWRJVDFRM2FFcGZZVUE5V0dGQVBRSk5kMjV2cFZsM2JuQ2tXUzZta1Y1a3A1RmVZd0FBQUFFQVRnQUFBVUVDVVFBSkFBYXpDQUVCTENzbEJ5TTNFd2NuUHdFWEFSQVlNQnNwdUFZRjVnak96c2NCVVNrRUpqZ0dBQUFCQUJ2Ly9nR3RBazRBSFFBR3N3c0FBU3dyQUJZVkZBWVBBUmN6TnhjSEp5TUhKejhCUGdFMU5DWWpJZ2NqSnpZekFVNUpSVnFZQXUxYUJBeGo5eW9DQkxKVFF5NHFWVThHQkZkZEFrNUNOQzlxWmE0REF3WW9BZ0VDSWNwZVlpa2lMVm9vWEFBQUFBRUFMZi84QVljQ1VBQXBBQWF6Q3dBQkxDc0FGaFVVQmdjVkZoVVVEZ0VqSWljL0FSWXpNalkxTkNZbkl5YzNNekkrQVRVMEppTWlCeU1uTmpNQlBrbEVPblUvYmtVd0x3RUZMREpVYWtoRk5RUUdMQ0JKTVRJcFFVb0dBazFOQWxBOU1pNVlHd01jWlRkWE1nb3FCUkJSUWpFNEF3UWpKVUVtSkNzOUowQUFBZ0FiLy93QnJnSktBQkFBRkFBSXRSTVJEQVVDTENzbEp5TVBBaWMzSXdjbk53RXpBek1YQXlNRE13R21VQk1VQkNVREdNZzFBd01CS0M4dVl3UnFCZkhTdFFHeUJBUUV0Z0VGSWdGdS9wUUdBVEQrMWdBQUFBRUFNdi81QWJrQ1RBQWZBQWF6SGdvQkxDc0JCeWNqQnhjV0ZSUU9BU01pSnpVM0ZqTXlQZ0UxTkM4Q1B3RVhNemNYQWJBR09iVVlRcVZEZGtvbU1BWXlLRHhjTTRsV0JCNE5OSTFRQXdJaEJBUzNEaVJ5T2wwMkNDc0VEeWxKTGxZZUVRYjJDUUVDQXdBQUFBSUFOdi81QWJjQ1VRQVZBQ0VBQ0xVYUZoSUtBaXdyRWdjWE5qTXlGaFVVRGdFaklpWTFORDRCTnpNWEJ3QUhCaFVVTXpJMk5UUW1JN1pCQlVaSVJWSWtXRWhSVkVLYmZ3UWhBZjc2U1FWN1VFVTdOZ0hmdUFVelVFTXNYRUZnVmtxZWppd1hCdjc3UVJraWxHQStOenNBQUFBQUFRQlcvL1FCMHdKTUFBd0FCck1MQkFFc0t3RTNCd0VITHdFQkl3Y25OeGNCcVNvRC91WTJLUUVCUi94R0JBbFFBa29CSmY0elpRMElBaGNFQnlrQ0FBTUFNUC83QWFVQ1RnQWFBQ1lBTkFBS3R6UXNJQnNNQUFNc0t3QVdGUlFIRlI0Q0ZSUU9BU01pSmpVME5qOEJMZ0UxTkRZekRnRVZGQllYUGdFMU5DWWpBZzRCRlJRV016STJOVFF1QVNjQldFMkJKakFmTUZrNVRWcFNSQUV1TDJGTU8wa3pNenRJTlRGVFBTdENPME5VSVRJdEFrNUNQR1kyQkJFaE5DY3dUU3RMUUQ5T0dnUVdPVEZHVnlWQU5Dd3dGaFJBTml3dy91UWhPQ2t5T2trM0lpMGNFd0FBQUFJQU92LzVBYnNDVVFBVkFDRUFDTFVhRmdZQUFpd3JBQllWRkE0QkJ5TW5OU1EzSndZaklpWTFORDRCTXhJM05qVTBJeUlHRlJRV013Rm1WVUtiZndVZ0FRSS9CRVpKUkZJa1Ywa3FTUVY3VUVRN05nSlJZRlpLbm80c0Z3WlZ1QVV6VUVNc1hFSCt5a0FaSTVSZ1BqYzdBQUFBQWdBbi8vc0J2QUh6QUFzQUZ3QUl0UkFNQkFBQ0xDc0FGaFVVQmlNaUpqVTBOak1PQVJVVUZqTXlOalUwSmlNQlpWZDdiMUpaZkhCallVWkZXV0ZIUXdIemFtS09ubWhnajZFdGczZFJWWUYxVTFjQUFRQkdBQUFCTlFIeEFBa0FCck1JQVFFc0t5VUhJejhCQnljL0FSY0JFUmt1R1I2MUJnVGtCODdPeC9FcEJDWTRCZ0FBQUFFQUkvLytBWmdCOFFBZEFBYXpDd0FCTENzQUZoVVVCZzhCRnpNM0Z3Y25Jd2NuUHdFK0FUVTBKaU1pQnlNbk5qTUJQMEZDVlg0QzFWSUVERnpqSmdRRm9FczhLaVpOU1FjRFUxa0I4VFlyS1YxYWhRTURCU2dDQVFJZ3AweFBJaHdsU1NaT0FBQUFBUUFlLzU0QmhBSHlBQ29BQnJNTEFBRXNLd0FXRlJRR0J4VVdGUlFPQVNNaUp6OEJGak15UGdFMU5DWW5JeWMvQVRJK0FUVTBKaU1pQnlNbk5qTUJOMDFHUFh0QmNrY3dOQUVGTWpFNVdqTk5TRGdFQmk4aFREUTFMRUpQQmdOVFRnSHlQekl2VnhrRUcyWTNWekVKS2dVUUpVTXJNamNEQlNJQkpVQW1KU3MrSjBFQUFnQVMvNTRCcXdIdUFCQUFGQUFJdFJNUkRBVUNMQ3NsSnlNUEFpYzNJd2NuTndFekF6TVhBeU1ETXdHaVVCUVZBeVVFR2N3MEJBUUJLeTh1WkFWckJ2WFdWd0t5QlFRRnRnSUdJZ0Z2L3BJRkFUSCsxQUFBQUFFQUl2K2RBYThCOFFBZkFBYXpIZ29CTENzQkJ5Y2pCeGNXRlJRT0FTTWlKelUzRmpNeVBnRTFOQzhDUHdFWE16Y1hBYVVGT3JrWVJLaEVlRXNxTGdVd0xUMWVOSTFYQkI0Tk5vOVJBd0hHQkFPMkR5SjBPbDAyQ1NvRkR5bElMbGNkRWdiMUNnSURCQUFBQUFJQU4vLzVBYm9DVVFBVkFDRUFDTFVhRmhJS0Fpd3JFZ2NYTmpNeUZoVVVEZ0VqSWlZMU5ENEJOek1YRlFBSEJoVVVNekkyTlRRbUk3ZEFCVVpKUlZNa1dFbFJWa0tkZ0FRZy92aEpCWHhRUmp3MkFkKzRCVE5RUXl4Y1FXRlZTNTJPTEJjRy92dEFHU0tWWUQ0M093QUJBRXYvbUFISUFmQUFEQUFHc3dRQkFTd3JBVGNIQVFjdkFRRWpCeWMzRndHZUtnUCs1emNwQVFGSS9FVUVDVThCN2dJbC9qTm1EUWdDR0FRR0tRSUFBd0F3Ly9zQm9nSk9BQm9BSmdBMEFBcTNOQ3dnR3d3QUF5d3JBQllWRkE4QkhnSVZGQTRCSXlJbU5UUTJQd0V1QVRVME5qTU9BUlVVRmhjK0FUVTBKaU1DRGdFVkZCWXpNalkxTkM0Qkp3RldUSDhCSmk4Zk1GYzVURnBTUXdFdEwyQk1PMGt6TXpwSE5EQlRQQ3RDT2tKVElESXRBazVDUEdjMUJCRWhOQ2N3VFN0TFFEOU9HZ1FXT1RGR1Z5VkFOQ3d3RmhSQU5pd3cvdVFoT0NreU9razNJaTBjRXdBQUFnQW8vNTRCcXdIMkFCVUFJUUFJdFJvV0JnQUNMQ3NBRmhVVURnRUhJeWMxSkRjbkJpTWlKalUwUGdFekVqYzJOVFFqSWdZVkZCWXpBVlZXUXAyQUJDQUJBMEFGUmtsRlV5UllTU3hKQlh4UVJqdzJBZlpoVlV1ZGppd1hCbFc0QlROUVF5eGNRZjdLUUJraWxXQStOenNBQUFBQ0FDYi8vQUZIQVhjQUN3QVdBQWkxRHd3RUFBSXNLd0FXRlJRR0l5SW1OVFEyTXc0QkZSUXpNalkxTkNZakFRbzlXRkU2UGxsUlJFSmJQVUl2TFFGM1RVaHNlazVJYTNvbllGWjRZVlk2UFFBQUFBQUJBQmtBQUFDckFYb0FDUUFHc3dnQkFTd3JOd2NqUHdFSEp6OEJGNHdQS2hBWlh3UUVpUVdFaEg3TEdBTWdKZ1VBQUFBQUFRQU4vLzRCSlFGNEFCMEFCck1MQUFFc0t4SVdGUlFHRHdFWE16Y1hCeWNqQnljL0FUNEJOVFFtSXlJSEl5YzJNK0kwTUQxZkFway9BUWxJcUJ3REJIWTJMUjRiT1RRR0F6NUJBWGdwSVI5RVFXVUNBZ1VpQWdFQ0czczVQQmtWR2pZaE9RQUFBQUFCQUFyLy9RRHpBWGtBSndBR3N3b0FBU3dyRWhZVkZBWUhGUllWRkFZaklpYy9BUll6TWpZMU5DY2pKemN6UGdJMU5DWWpJZ2NqSnpZenZUWXJKVXBkUnlNY0FRTXNGRFZCVmlVREJSNFVMQjRnR2lnd0JRTTNNQUY1S2lFZE53OENFa0ExUlFjZkFnWXZKajBEQXgwQkZpVVdGaG9rSHlnQUFBQUFBZ0FPLy80Qkp3RjFBQkFBRkFBSXRSSVJEQVVDTENzbEp5TVBBaWMzSXdjblB3RXpCek1YSnpjakJ3RWdPZ2NMQXlJQ0RvSW9Bd1BJSngxQUJHZ1hCSmh0QW13REFnSnZBZ1VjNStVRUJMR3hBQUFBQVFBSS8vd0JFUUYzQUI0QUJyTWRDUUVzS3dFSEp5TUhGeFlWRkFZaklpYzFOeFl6TWpZMU5DWXZBajhCRnpNM0Z3RUpCQ2R3RUNwcFlrMFVKZ1FnR3psSEtTdzJBeFlKSWw4MkFnRlRBd05xQ2hoRVBFc0dId01HTkNvWklBb0xCYUFIQVFJREFBQUNBQnovL0FFWUFYb0FGQUFnQUFpMUdoVVJDZ0lzS3hJSEZ6WXpNaFlWQnc0Qkl5SW1OVFEyTnpNWEJ3WVBBUVlWRkRNeU5qVTBJM29vQXk0d0x6TUJCa2MrTlRoM2FnUVhBYUV2QXdGSkxqTkhBUzFzQkI4eEtnNDNRRG8zV28wbUV3V2xJUllJRDFZME1FQUFBQUFBQVFBby8vb0JHZ0YyQUF3QUJyTUVBUUVzS3dFM0J3TUhMd0VUSXdjbk54Y0EveHNEcGlZaUFjT1JMd01JTndGMUFTRCs2a1lKQndGSUF3WWhBUUFBQUFNQUdQLzhBUmdCZUFBWEFDTUFNQUFLdHpBb0hSZ0xBQU1zS3hJV0ZSUUdEd0VlQVJVVUJpTWlKalUwTnpVbU5UUTJNdzRCRlJRV0Z6NEJOVFFtSXc0QkZSUVdNekkyTlRRdUFTZm1NaTRwQVNVb1RENHlPV1E5UlRjcExpRWVKaXNoSFVneEtDTXNOUllkSGdGNEtTVW1MeEFDRUNVZ05ENHZLRWNqQXh3ek1Ea2VKeUVZSFEwT0pTRVpIYmduSkJzaEt5SVVHZzROQUFBQUFBSUFLdi84QVNjQmVnQVRBQ0FBQ0xVWkZBVUFBaXdyRWhZVkZBWUhJeWMzTmpjbkJpTWlKalUwTmpNV1B3RTJOVFFqSWdZVkZCWXo3amw0YXdNWEFad29BeTB3TGpOS1FoRXZBd0pKTGpNbElRRjZPalphamlZVEJUWnJBeDR3S2oxSndTRVdFZ2RVTkRBZklRQUFBUC8vQUVjQkJnRm9Bb0VSQXdKa0FDRUJDZ0FKc1FBQ3VBRUtzQzhyQUFBQS8vOEFPZ0VLQU13Q2hCRURBbVVBSVFFS0FBbXhBQUc0QVFxd0x5c0FBQUQvL3dBdUFRZ0JSZ0tDRVFNQ1pnQWhBUW9BQ2JFQUFiZ0JDckF2S3dBQUFQLy9BQ3NCQndFVUFvTVJBd0puQUNFQkNnQUpzUUFCdUFFS3NDOHJBQUFBLy84QUx3RUlBVWdDZnhFREFtZ0FJUUVLQUFteEFBSzRBUXF3THlzQUFBRC8vd0FwQVFZQk1nS0JFUU1DYVFBaEFRb0FDYkVBQWJnQkNyQXZLd0FBQVAvL0FEMEJCZ0U1QW9RUkF3SnFBQ0VCQ2dBSnNRQUN1QUVLc0M4ckFBQUEvLzhBU0FFRUFUb0NnQkVEQW1zQUlBRUtBQW14QUFHNEFRcXdMeXNBQUFELy93QTVBUVlCT1FLQ0VRTUNiQUFoQVFvQUNiRUFBN2dCQ3JBdkt3QUFBUC8vQUVvQkJnRkhBb1FSQXdKdEFDQUJDZ0FKc1FBQ3VBRUtzQzhyQUFBQUFBSUFPUC8yQXpVQ3h3QTNBRU1BQ0xVOE9CZ0hBaXdyQUFZSElpY1VEZ0VqSWk0Qk5UUStBVE15RmhVVUJ6NEJOek1XRnc0Q0J4NEJNekkrQVNjbUl5SVBBU2MrQVRjeUZ4WXpNajhCRnlRT0FSVVhOamMyTlRRbUl3TWlNU2NlVmttQ1ZrMXlQakZVTWpBNkNXR1dLUVVPQml1cDIzSVBiRlZLY2owQ0xSYzdIUWNPRXpJbkUxZFNJajRhQnc3OWtrQWtBVk5STFNZZ0FTVW5BeEpUZmtaQ2VWQkhiejB3SmhRWVI3QmVFQlJmdTVVb1VWNCtjVWtLUmdFYUtTY0RFUk5HQWhxQU1sczhGQjh4SWk4ZEh3QUJBSW9DR3dGV0Fwa0FDQUFHc3djREFTd3JBUWNHQnk4Qk5qY1hBVllDVUdnSEMxVmpCd0o3Qnlrd0F4a29PZ0lBQUFBQUFRQ0RBaDhCWkFLREFBd0FCck1GQUFFc0t3QWpJaVluTnpNV016STNNeGNCUUZNck9BY1RDUXRFUXh3SUR3SWZLaWNUUHo4VEFBQUJBSDhDSHdGb0Fva0FEQUFHc3dVQkFTd3JBQWNqSmljM014WVhOamN6RndFMFB4TTBMdzRHTGl3d093Y0pBbEl6THlRWElDUWhJeGNBQUFBQkFIZ0NKd0ZpQXBFQURBQUdzd1VCQVN3ckVqY3pGaGNISXlZbkJnY2pKN0E4RXlzNERnY3VMREE3QndrQ1lUQW9LeGNnSkNFakZ3QUFBQUFCQUlvQ0hBRldBcG9BQ2dBR3N3b0RBU3dyRWhjUEFTWVhKaThCUHdIbmJ3b0hIZ2RyTmdNT0JnSnZOeGtERHdReUhBY2NBZ0FBQUFJQVpnSVlBWHNDbkFBSUFCSUFDTFVRQ2dZQkFpd3JFamNmQVFjR0J5TW5OamNmQVFjR0R3RWpKN0lrQnhZQk1FTUdFOVFrQmhjQkd6b2VCaE1DZENnQkVRY3ZQQkpLS0FFUkJ4czBIQklBQVFETkFma0JFUUtmQUFVQUJyTUVBUUVzS3hNSEp6OEJGKzBjQkJ3a0JBSDhBd1NmQXdVQUFBSUFtUUk1QVVnQ2VBQUpBQlFBQ0xVTkNnUUFBaXdyRWhZVkZBWWpJalUwTXpJVkZBWWpJaVkxTkRZenh4QVNEaDRnanhFT0RoRVNEZ0o0RUE0UEVoOGdIZzhTRVE0UEVRQUFBQUFCQUlJQ1NBRmRBbXdBQlFBR3N3TUFBU3dyQVNNbk56TVhBVnJUQlFUVEJBSklCUjhFQUFBQUFRQnVBaXdCZEFLRkFCZ0FCck1XQ2dFc0t3RVBBU1luSmlNaURnRUhJeWMxUHdFV0Z4WXpNajhCTXhjQmRETUhFell4RFFjT0ZBY0ZFRElJRXpNMURBa1pEZ1VRQW00NkFnSVNFUTBYQnhJR09RTUNFaEViRHhJQUFQLy9BREwvK3dJbkF6RVFJZ0FxQUFBUkF3QnFBSDBBdUFBSXNRRUNzTGl3THlzQUFQLy9BREwvK3dJbkEwQVFJZ0FxQUFBUkF3RnBBSDBBdUFBSXNRRUJzTGl3THlzQUFBQUNBSUFDQ3dGaEF1RUFDUUFXQUFpMUR3b0hBd0lzS3dFR0R3RWpKelkzTXhjVUl5SW1KemN6RmpNeU56TVhBVDBQTnhJSEV6Y2VCaGRUS3pnSEV3a0xSRU1jQ0E4Q3loSTVFaEUvSkJIRktpY1RQejhUQUFBQUFnQ0FBZ3NCWWdMaEFBa0FGZ0FJdFE4S0JRQUNMQ3NUSnlZdkFUY3pGaGNIRmlNaUppYzNNeFl6TWpjekYvVVNOdzhCRndjd0pSTkNVeXM1QnhRSUMwUkVHd2tQQW0wU09SSUdFVG9wRVdJcUp4TS9QeE1BQUFJQWdBSUxBV0VEREFBUUFCMEFDTFVXRVFZQUFpd3JBQllWRkFjWEJ5YzJOVFFqSWdjbk5qTVNJeUltSnpjekZqTXlOek1YQVFrZU1SRVpHaklhSEJ3TUppUkxVeXM0QnhNSkMwUkRIQWdQQXd3YkZCOG5IdzB3SWhzVUZ4UWovdjhxS0JJK1BoSUFBZ0IwQWdzQmpBTHdBQmNBSkFBSXRSMFlGUWtDTENzQkR3RW1KeVlqSWc4Qkl5YzFQd0VXRnhZek1qOEJNeGNHSXlJbUp6Y3pGak15TnpNWEFZdzJCaFU3TncwSUdoQUdFRFlIRlRkQUJ3b1hFZ1VRV0ZBck5nZ1RDQXRFUXhvSkR3TFpPUUlDRWhFYUVSRUdPQU1DRWhFWkVoSFVLaVlUUGo0VEFBSC84di8wQWMwQjBBQVBBQWF6QmdBQkxDc0FIZ0VWRkE0Qkl5SXVBVFUwUGdFekFSOXVRRUJ1UUVCdFFFQnRRQUhRUUc1QVFHNUFRRzVBUUc1QUFBQUIvL0gvOGdLSkFva0FEd0FHc3dZQUFTd3JBQjRCRlJRT0FTTWlMZ0UxTkQ0Qk13R1htVmxabVZwYW1WbFptVm9DaVZtWldscVlXVm1ZV2xxWldRQUFBZ0J6QWhRQmdnTGdBQVlBRXdBSXRSSUpCUUlDTENzQkR3RW5Qd0VYQmhjSEl5WW5CZ2NqSnpZM013R0NKQ29SR0NzVlVqTU9CaTRzTURzSENUZzhFd0xPTGl3S05DNEpoU2NYSUNRaEl4Y2pNQUFBQWdCM0FoUUJaQUxnQUFZQUV3QUl0UklKQlFFQ0xDc0JCeThCUHdFWEJoY0hJeVluQmdjakp6WTNNd0ZrRUNza0J4VXJKRGdPQnk0c01Ec0hDRGc3RXdKK0Npc3ZDQW92V3lzWElDUWhJeGNrTHdBQUFnQjFBaFFCZHdNQkFCQUFIUUFJdFJ3VEJnQUNMQ3NBRmhVVUJ4Y0hKelkxTkNNaUJ5YzJNd1lYQnlNbUp3WUhJeWMyTnpNQldoMHZFQmdaTUJrYUd3d2xJaHcyRGdjdExTcEJCd2cwUHhNREFSb1RIU1lkREMwaEdSTVZFaUtzS1JnaEl4d29HQ0V4QUFBQUFnQndBaFlCamdMd0FCY0FKQUFJdFNNYUZRa0NMQ3NCRHdFbUp5WWpJZzhCSXljMVB3RVdGeFl6TWo4Qk14Y0dGd2NqSmljR0J5TW5OamN6QVk0MUJ4VTVOdzRLRmhNRkVEVUhGVGRDQmdnYUVBWVBYU2dPQmlBNlJpVUhDUzVHRXdMWk9RSUNFaEVZRXhFR09BTUNFaEVhRVJHVUhoY1dMaTRXRnh3M0FBQURBSVFDSmdGdEF1a0FEQUFZQUNRQUNyY2RHUkVOQlFFRExDc0FCeU1tSnpjekZoYzJOek1YQmhZVkZBWWpJaVkxTkRZek1oWVZGQVlqSWlZMU5EWXpBVFU3RXlzNERnY3NMakE3QndpOEVCRU9EUkFSRHFFUUVRME5FUkVPQXE0dktDc1hIeVVpSWhkdkVBNE9FUkFPRGhFUURnNFJFUTBPRVFBQUF3Q0ZBaVlCaEFMT0FBVUFFUUFkQUFxM0ZoSUtCZ01BQXl3ckFTTW5Oek1YQmhZVkZBWWpJaVkxTkRZek1oWVZGQVlqSWlZMU5EWXpBWUgzQlFQNEJNWVFFUTBORVJFT29SQVFEZzBSRVE0Q3FnVWZCV1lRRGc0UkVRME9FUkFPRGhFUkRRNFJBQUFCQUVFQVN3RldBV0FBQWdBR3N3SUFBU3dyRXlFRFFRRVZpd0ZnL3VzQS8vOEFYd0pJQVlNQ2JCQUNBSEVBQUFBREFHVC94UUtyQWd3QUN3QWZBRGtBQ3JjNEp4NE1Bd0FETENzQUZSRVVJeUVpTlJFME15RUJNelUwTXpJZEFUTTFOQ1lqQndZaklqMEJJeGNWTXpJZEFSUVdNemMxQmlNaUpqMEJORHNCTlNNaVBRRWpBcXRRL2xsUVVBR24vbVJLR0N0S0xDSXdCZ01HU3ZRYUNpd2lQd3dPRmhNS09qb0tGUUlNVVA1WlVGQUJwMUQrVWJRTU9JaXlJQ2tjQkFsMGRSSUtoQ0FwSlJrRUd4NWFDaVFLSEFBQS8vLy94Lzg3QVhVQ2VSQWlBRW9BQUJBQ0FHb1lBQUFBLy8vL3gvODdBWndDaUJBaUFFb0FBQkFDQVdrWUFBQUFBQUVBdHdJVkFUY0N0Z0FRQUFhekJnQUJMQ3NBRmhVVUJ4Y0hKelkxTkNNaUJ5YzJNd0VZSHpJU0dSc3lHaHNkRENZbEFyWWJGQjhuSHcwd0pCa1ZHQlFqQUFBQUFRQWdBRlVCTlFGcUFBSUFCck1DQVFFc0t6Y2xFU0FCRmQrTC91c0FBQUFCQUI4QkZ3QmxBaFVBQlFBR3N3UUJBU3dyRXdjblB3RVhQeDBESENZRUFSd0ZDUElFQ0FBQUFRQmlBRlVCZHdGcUFBSUFCck1CQUFFc0t6Y1JCV0lCRlZVQkZZc0FBQUFEQUp3Qi9RRnhBd2NBQ3dBWEFDTUFDcmNjR0JBTUNnWURMQ3NCQndZSERnRUhMd0UyTnhjR0ZoVVVCaU1pSmpVME5qTU9BUlVVRmpNeU5qVTBKaU1CY1FReFhBd2JFQWNHYkZrSFdpa3VJQ0FyS2lNWEdoc1ZGUndhRndMbUJoQWFBd2tFQlJvZkl3TndLeUFqS1Nraklpa2RHUlVYR1JrV0ZCc0FBUUFBQUFBQnZnRytBQU1BQnJNQkFBRXNLekVSSVJFQnZnRysva0lBQUFBQkFBQUFBQUo2QW5vQUF3QUdzd0VBQVN3ck1SRWhFUUo2QW5yOWhnQUFBQUVBUVFCcEFWWUJmZ0FDQUFhekFRQUJMQ3MzR3dGQmlvdHBBUlgrNndBQUFnRFBBbUVCcHdLZ0FBb0FGQUFJdFE0TEJBQUNMQ3NTRmhVVUJpTWlOVFEyTXpJV0ZSUWpJalUwTmpQOUVCRU9IeEVQcUJBZkhoRVBBcUFSRGc0U0h3NFNFUTRnSHc0U0FBQUFBQUVBcHdKV0FjOENzQUFZQUFhekZnb0JMQ3NCRHdFbUp5WWpJZ2N3QnlNbk5UOEJGaGNXTXpJL0FUTVhBYzg1QnhVOU93OElHaE1IRURnSUZ6MDdEUWtaRkFVUkFwZzVBd0lTRVJnVEVnVTZBZ0lTRVJrVEVnQUJBQ3dCWlFCeUFtSUFCUUFHc3dRQkFTd3JFd2NuUHdFWFRCd0VIQ2NEQVdvRkIvRUZDQUFBQUFBY0FWWUFBUUFBQUFBQUFBQkZBQUFBQVFBQUFBQUFBUUFOQUVVQUFRQUFBQUFBQWdBTUFGSUFBUUFBQUFBQUF3QWpBRjRBQVFBQUFBQUFCQUFhQUlFQUFRQUFBQUFBQlFDRkFKc0FBUUFBQUFBQUJnQVlBU0FBQVFBQUFBQUFDQUFTQVRnQUFRQUFBQUFBQ1FBVUFVb0FBUUFBQUFBQUN3QWpBVjRBQVFBQUFBQUFEQUFqQVY0QUFRQUFBQUFBRFFDUUFZRUFBUUFBQUFBQURnQWFBaEVBQXdBQkJBa0FBQUNLQWlzQUF3QUJCQWtBQVFBbUFyVUFBd0FCQkFrQUFnQU1BdHNBQXdBQkJBa0FBd0JHQXVjQUF3QUJCQWtBQkFBMEF5MEFBd0FCQkFrQUJRRUtBMkVBQXdBQkJBa0FCZ0F3QkdzQUF3QUJCQWtBQ0FBa0JKc0FBd0FCQkFrQUNRQW9CTDhBQXdBQkJBa0FDd0JHQk9jQUF3QUJCQWtBREFCR0JPY0FBd0FCQkFrQURRRWdCUzBBQXdBQkJBa0FEZ0EwQmswQUF3QUJCQWtBRUFBYUJvRUFBd0FCQkFrQUVRQVlCcHREYjNCNWNtbG5hSFFnS0dNcElESXdNVE1nWW5rZ1NuVmhiaUJRWVdKc2J5QmtaV3dnVUdWeVlXd2dLR2gxWlhKMFlYUnBjRzluY21GbWFXTmhMbU52YlM1aGNpbEJiR1ZuY21WNVlTQlRZVzV6VEdsbmFIUWdTWFJoYkdsak1TNHdNREU3VlV0WFRqdEJiR1ZuY21WNVlWTmhibk10VEdsbmFIUkpkR0ZzYVdOQmJHVm5jbVY1WVNCVFlXNXpJRXhwWjJoMElFbDBZV3hwWTFabGNuTnBiMjRnTVM0d01ERTdVRk1nTURBeExqQXdNVHRvYjNSamIyNTJJREV1TUM0M01EdHRZV3RsYjNSbUxteHBZakl1TlM0MU9ETXlPU0JFUlZaRlRFOVFUVVZPVkRzZ2RIUm1ZWFYwYjJocGJuUWdLSFl3TGprM0tTQXRiQ0E0SUMxeUlEVXdJQzFISURJd01DQXRlQ0F4TnlBdFppQmtabXgwSUMxM0lFY2dMVmRCYkdWbmNtVjVZVk5oYm5NdFRHbG5hSFJKZEdGc2FXTklkV1Z5ZEdFZ1ZHbHdiMmR5WVdacFkyRktkV0Z1SUZCaFlteHZJR1JsYkNCUVpYSmhiR2gwZEhBNkx5OTNkM2N1YUhWbGNuUmhkR2x3YjJkeVlXWnBZMkV1WTI5dExtRnlWR2hwY3lCR2IyNTBJRk52Wm5SM1lYSmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCVFNVd2dUM0JsYmlCR2IyNTBJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNUzR4TGlCVWFHbHpJR3hwWTJWdWMyVWdhWE1nWVhaaGFXeGhZbXhsSUhkcGRHZ2dZU0JHUVZFZ1lYUTZJR2gwZEhBNkx5OXpZM0pwY0hSekxuTnBiQzV2Y21jdlQwWk1hSFIwY0RvdkwzTmpjbWx3ZEhNdWMybHNMbTl5Wnk5UFJrd0FRd0J2QUhBQWVRQnlBR2tBWndCb0FIUUFJQUFvQUdNQUtRQWdBRElBTUFBeEFETUFJQUJpQUhrQUlBQktBSFVBWVFCdUFDQUFVQUJoQUdJQWJBQnZBQ0FBWkFCbEFHd0FJQUJRQUdVQWNnQmhBR3dBSUFBb0FHZ0FkUUJsQUhJQWRBQmhBSFFBYVFCd0FHOEFad0J5QUdFQVpnQnBBR01BWVFBdUFHTUFid0J0QUM0QVlRQnlBQ2tBUVFCc0FHVUFad0J5QUdVQWVRQmhBQ0FBVXdCaEFHNEFjd0FnQUV3QWFRQm5BR2dBZEFCSkFIUUFZUUJzQUdrQVl3QXhBQzRBTUFBd0FERUFPd0JWQUVzQVZ3Qk9BRHNBUVFCc0FHVUFad0J5QUdVQWVRQmhBRk1BWVFCdUFITUFMUUJNQUdrQVp3Qm9BSFFBU1FCMEFHRUFiQUJwQUdNQVFRQnNBR1VBWndCeUFHVUFlUUJoQUNBQVV3QmhBRzRBY3dBZ0FFd0FhUUJuQUdnQWRBQWdBRWtBZEFCaEFHd0FhUUJqQUZZQVpRQnlBSE1BYVFCdkFHNEFJQUF4QUM0QU1BQXdBREVBT3dCUUFGTUFJQUF3QURBQU1RQXVBREFBTUFBeEFEc0FhQUJ2QUhRQVl3QnZBRzRBZGdBZ0FERUFMZ0F3QUM0QU53QXdBRHNBYlFCaEFHc0FaUUJ2QUhRQVpnQXVBR3dBYVFCaUFESUFMZ0ExQUM0QU5RQTRBRE1BTWdBNUFDQUFSQUJGQUZZQVJRQk1BRThBVUFCTkFFVUFUZ0JVQURzQUlBQjBBSFFBWmdCaEFIVUFkQUJ2QUdnQWFRQnVBSFFBSUFBb0FIWUFNQUF1QURrQU53QXBBQ0FBTFFCc0FDQUFPQUFnQUMwQWNnQWdBRFVBTUFBZ0FDMEFSd0FnQURJQU1BQXdBQ0FBTFFCNEFDQUFNUUEzQUNBQUxRQm1BQ0FBWkFCbUFHd0FkQUFnQUMwQWR3QWdBRWNBSUFBdEFGY0FRUUJzQUdVQVp3QnlBR1VBZVFCaEFGTUFZUUJ1QUhNQUxRQk1BR2tBWndCb0FIUUFTUUIwQUdFQWJBQnBBR01BU0FCMUFHVUFjZ0IwQUdFQUlBQlVBR2tBY0FCdkFHY0FjZ0JoQUdZQWFRQmpBR0VBU2dCMUFHRUFiZ0FnQUZBQVlRQmlBR3dBYndBZ0FHUUFaUUJzQUNBQVVBQmxBSElBWVFCc0FHZ0FkQUIwQUhBQU9nQXZBQzhBZHdCM0FIY0FMZ0JvQUhVQVpRQnlBSFFBWVFCMEFHa0FjQUJ2QUdjQWNnQmhBR1lBYVFCakFHRUFMZ0JqQUc4QWJRQXVBR0VBY2dCVUFHZ0FhUUJ6QUNBQVJnQnZBRzRBZEFBZ0FGTUFid0JtQUhRQWR3QmhBSElBWlFBZ0FHa0Fjd0FnQUd3QWFRQmpBR1VBYmdCekFHVUFaQUFnQUhVQWJnQmtBR1VBY2dBZ0FIUUFhQUJsQUNBQVV3QkpBRXdBSUFCUEFIQUFaUUJ1QUNBQVJnQnZBRzRBZEFBZ0FFd0FhUUJqQUdVQWJnQnpBR1VBTEFBZ0FGWUFaUUJ5QUhNQWFRQnZBRzRBSUFBeEFDNEFNUUF1QUNBQVZBQm9BR2tBY3dBZ0FHd0FhUUJqQUdVQWJnQnpBR1VBSUFCcEFITUFJQUJoQUhZQVlRQnBBR3dBWVFCaUFHd0FaUUFnQUhjQWFRQjBBR2dBSUFCaEFDQUFSZ0JCQUZFQUlBQmhBSFFBT2dBZ0FHZ0FkQUIwQUhBQU9nQXZBQzhBY3dCakFISUFhUUJ3QUhRQWN3QXVBSE1BYVFCc0FDNEFid0J5QUdjQUx3QlBBRVlBVEFCb0FIUUFkQUJ3QURvQUx3QXZBSE1BWXdCeUFHa0FjQUIwQUhNQUxnQnpBR2tBYkFBdUFHOEFjZ0JuQUM4QVR3QkdBRXdBUVFCc0FHVUFad0J5QUdVQWVRQmhBQ0FBVXdCaEFHNEFjd0JNQUdrQVp3Qm9BSFFBSUFCSkFIUUFZUUJzQUdrQVl3QUFBQUFDQUFELytBUG9BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFxSUFBQUFCQUFJQUF3QUVBQVVBQmdBSEFBZ0FDUUFLQUFzQURBQU5BQTRBRHdBUUFCRUFFZ0FUQUJRQUZRQVdBQmNBR0FBWkFCb0FHd0FjQUIwQUhnQWZBQ0FBSVFBaUFDTUFKQUFsQUNZQUp3QW9BQ2tBS2dBckFDd0FMUUF1QUM4QU1BQXhBRElBTXdBMEFEVUFOZ0EzQURnQU9RQTZBRHNBUEFBOUFENEFQd0JBQUVFQVFnQkRBRVFBUlFCR0FFY0FTQUJKQUVvQVN3Qk1BRTBBVGdCUEFGQUFVUUJTQUZNQVZBQlZBRllBVndCWUFGa0FXZ0JiQUZ3QVhRQmVBRjhBWUFCaEFLd0Fvd0NFQUlVQXZRQ1dBT2dBaGdDT0FJc0FuUUNwQUtRQkFnQ0tBTm9BZ3dDVEFQSUE4d0NOQUpjQWlBRERBTjRBOFFDZUFLb0E5UUQwQVBZQW9nQ3RBTWtBeHdDdUFHSUFZd0NRQUdRQXl3QmxBTWdBeWdEUEFNd0F6UURPQU9rQVpnRFRBTkFBMFFDdkFHY0E4QUNSQU5ZQTFBRFZBR2dBNndEdEFJa0FhZ0JwQUdzQWJRQnNBRzRBb0FCdkFIRUFjQUJ5QUhNQWRRQjBBSFlBZHdEcUFIZ0FlZ0I1QUhzQWZRQjhBTGdBb1FCL0FINEFnQUNCQU93QTdnQzZBUU1CQkFFRkFRWUJCd0VJQVAwQS9nRUpBUW9CQ3dFTUFQOEJBQUVOQVE0QkR3RUJBUkFCRVFFU0FSTUJGQUVWQVJZQkZ3RVlBUmtCR2dFYkFQZ0ErUUVjQVIwQkhnRWZBU0FCSVFFaUFTTUJKQUVsQVNZQkp3RW9BU2tCS2dFckFQb0Exd0VzQVMwQkxnRXZBVEFCTVFFeUFUTUJOQUUxQVRZQk53RTRBVGtCT2dEaUFPTUJPd0U4QVQwQlBnRS9BVUFCUVFGQ0FVTUJSQUZGQVVZQlJ3RklBTEFBc1FGSkFVb0JTd0ZNQVUwQlRnRlBBVkFCVVFGU0FQc0EvQURrQU9VQlV3RlVBVlVCVmdGWEFWZ0JXUUZhQVZzQlhBRmRBVjRCWHdGZ0FXRUJZZ0ZqQVdRQlpRRm1BV2NCYUFDN0FXa0JhZ0ZyQVd3QTVnRG5BS1lCYlFGdUFXOEJjQUZ4QVhJQmN3RjBBWFVCZGdGM0FYZ0JlUUY2QVhzQmZBRjlBWDRCZndHQUFZRUJnZ0dEQVlRQmhRR0dBWWNCaUFHSkFZb0Jpd0dNQVkwQTJBRGhBWTRBMndEY0FOMEE0QURaQU44Qmp3R1FBWkVBcUFDZkFKY0Ftd0dTQVpNQmxBR1ZBWllCbHdHWUFaa0JtZ0diQVp3Qm5RR2VBWjhCb0FHaEFhSUJvd0drQWFVQnBnR25BYWdCcVFHcUFhc0JyQUd0QWE0QnJ3R3dBYkVCc2dHekFiUUJ0UUcyQWJjQnVBRzVBYm9CdXdHOEFiMEJ2Z0cvQWNBQndRSENBY01CeEFIRkFjWUJ4d0hJQWNrQnlnSExBY3dCelFIT0FjOEIwQUhSQWRJQjB3SFVBZFVCMWdIWEFkZ0IyUUhhQWRzQjNBSGRBZDRCM3dIZ0FlRUI0Z0hqQWVRQjVRSG1BZWNCNkFIcEFlb0I2d0hzQWUwQjdnSHZBZkFCOFFIeUFMSUFzd0MyQUxjQXhBQzBBTFVBeFFDQ0FNSUFod0h6QWZRQXF3REdBZlVCOWdDK0FMOEF2QUgzQWZnQitRSDZBZnNCL0FIOUFQY0IvZ0gvQUl3Q0FBSUJBZ0lDQXdJRUFnVUNCZ0lIQWdnQ0NRQ1lBZ29BbWdDWkFPOENDd0lNQUtVQWtnQ2NBS2NBandDVUFKVUF1UUlOQWc0QXdBREJBZzhDRUFJUkFoSUNFd0lVQWhVQ0ZnSVhBaGdDR1FJYUFoc0NIQUlkQWg0Q0h3SWdBaUVDSWdJakFpUUNKUUltQWljQ0tBSXBBaW9DS3dJc0FpMENMZ0l2QWpBQ01RSXlBak1DTkFJMUFqWUNOd0k0QWprQ09nSTdBandDUFFJK0FqOENRQUpCQWtJQ1F3SkVBa1VDUmdKSEFrZ0NTUUpLQWtzQ1RBSk5BazRDVHdKUUFsRUNVZ0pUQWxRQ1ZRSldBbGNDV0FKWkFsb0NXd0pjQWwwQ1hnSmZBbUFDWVFKaUFtTUNaQUpsQW1ZQ1p3Sm9BbWtDYWdKckFtd0NiUUp1QW04Q2NBSnhBbklDY3dKMEFuVUNkZ0ozQW5nQ2VRSjZBbnNDZkFKOUFuNENmd0tBQW9FQ2dnS0RBb1FDaFFLR0FvY0NpQUtKQW9vQ2l3S01BbzBDamdLUEFwQUNrUUtTQXBNQ2xBS1ZBcFlDbHdLYkFwc0Ntd0tiQXB3Q25RS2VBcDhDb0FLaENuTnZablJvZVhCb1pXNEhRVzFoWTNKdmJnZGhiV0ZqY205dUJrRmljbVYyWlFaaFluSmxkbVVIUVc5bmIyNWxhd2RoYjJkdmJtVnJDME5qYVhKamRXMW1iR1Y0QzJOamFYSmpkVzFtYkdWNENrTmtiM1JoWTJObGJuUUtZMlJ2ZEdGalkyVnVkQVpFWTJGeWIyNEdaR05oY205dUJrUmpjbTloZEFkRmJXRmpjbTl1QjJWdFlXTnliMjRHUldKeVpYWmxCbVZpY21WMlpRcEZaRzkwWVdOalpXNTBDbVZrYjNSaFkyTmxiblFIUlc5bmIyNWxhd2RsYjJkdmJtVnJCa1ZqWVhKdmJnWmxZMkZ5YjI0TFIyTnBjbU4xYldac1pYZ0xaMk5wY21OMWJXWnNaWGdLUjJSdmRHRmpZMlZ1ZEFwblpHOTBZV05qWlc1MERFZGpiMjF0WVdGalkyVnVkQXhuWTI5dGJXRmhZMk5sYm5RTFNHTnBjbU4xYldac1pYZ0xhR05wY21OMWJXWnNaWGdFU0dKaGNnUm9ZbUZ5QmtsMGFXeGtaUVpwZEdsc1pHVUhTVzFoWTNKdmJnZHBiV0ZqY205dUJrbGljbVYyWlFacFluSmxkbVVIU1c5bmIyNWxhd2RwYjJkdmJtVnJBa2xLQW1scUMwcGphWEpqZFcxbWJHVjRDMnBqYVhKamRXMW1iR1Y0REV0amIyMXRZV0ZqWTJWdWRBeHJZMjl0YldGaFkyTmxiblFNYTJkeVpXVnViR0Z1WkdsakJreGhZM1YwWlFac1lXTjFkR1VNVEdOdmJXMWhZV05qWlc1MERHeGpiMjF0WVdGalkyVnVkQVpNWTJGeWIyNEdiR05oY205dUJFeGtiM1FFYkdSdmRBWk9ZV04xZEdVR2JtRmpkWFJsREU1amIyMXRZV0ZqWTJWdWRBeHVZMjl0YldGaFkyTmxiblFHVG1OaGNtOXVCbTVqWVhKdmJnTkZibWNEWlc1bkIwOXRZV055YjI0SGIyMWhZM0p2YmdaUFluSmxkbVVHYjJKeVpYWmxEVTlvZFc1bllYSjFiV3hoZFhRTmIyaDFibWRoY25WdGJHRjFkQVpTWVdOMWRHVUdjbUZqZFhSbERGSmpiMjF0WVdGalkyVnVkQXh5WTI5dGJXRmhZMk5sYm5RR1VtTmhjbTl1Qm5KallYSnZiZ1pUWVdOMWRHVUdjMkZqZFhSbEMxTmphWEpqZFcxbWJHVjRDM05qYVhKamRXMW1iR1Y0Q0ZSalpXUnBiR3hoQ0hSalpXUnBiR3hoQmxSallYSnZiZ1owWTJGeWIyNEVWR0poY2dSMFltRnlCbFYwYVd4a1pRWjFkR2xzWkdVSFZXMWhZM0p2YmdkMWJXRmpjbTl1QmxWaWNtVjJaUVoxWW5KbGRtVUZWWEpwYm1jRmRYSnBibWNOVldoMWJtZGhjblZ0YkdGMWRBMTFhSFZ1WjJGeWRXMXNZWFYwQjFWdloyOXVaV3NIZFc5bmIyNWxhd3RYWTJseVkzVnRabXhsZUF0M1kybHlZM1Z0Wm14bGVBdFpZMmx5WTNWdFpteGxlQXQ1WTJseVkzVnRabXhsZUFaYVlXTjFkR1VHZW1GamRYUmxDbHBrYjNSaFkyTmxiblFLZW1SdmRHRmpZMlZ1ZEFWUGFHOXliZ1Z2YUc5eWJnVlZhRzl5YmdWMWFHOXliZ1pCWTJGeWIyNEdZV05oY205dUJrbGpZWEp2YmdacFkyRnliMjRHVDJOaGNtOXVCbTlqWVhKdmJnWlZZMkZ5YjI0R2RXTmhjbTl1RDFWa2FXVnlaWE5wYzIxaFkzSnZiZzkxWkdsbGNtVnphWE50WVdOeWIyNE9WV1JwWlhKbGMybHpZV04xZEdVT2RXUnBaWEpsYzJsellXTjFkR1VPVldScFpYSmxjMmx6WTJGeWIyNE9kV1JwWlhKbGMybHpZMkZ5YjI0T1ZXUnBaWEpsYzJselozSmhkbVVPZFdScFpYSmxjMmx6WjNKaGRtVUhUMjluYjI1bGF3ZHZiMmR2Ym1WckNrRnlhVzVuWVdOMWRHVUtZWEpwYm1kaFkzVjBaUWRCUldGamRYUmxCMkZsWVdOMWRHVUxUM05zWVhOb1lXTjFkR1VMYjNOc1lYTm9ZV04xZEdVTVUyTnZiVzFoWVdOalpXNTBESE5qYjIxdFlXRmpZMlZ1ZEFkMWJta3dNakZCQjNWdWFUQXlNVUlJWkc5MGJHVnpjMm9RWm1seWMzUjBiMjVsWTJocGJtVnpaUWwwYVd4a1pXTnZiV0lNWkc5MFltVnNiM2RqYjIxaUQyTnZiVzFoWVdOalpXNTBZMjl0WWdaWFozSmhkbVVHZDJkeVlYWmxCbGRoWTNWMFpRWjNZV04xZEdVSlYyUnBaWEpsYzJsekNYZGthV1Z5WlhOcGN3ZDFibWt4UlRsRkNVRmtiM1JpWld4dmR3bGhaRzkwWW1Wc2IzY0tRV2h2YjJ0aFltOTJaUXBoYUc5dmEyRmliM1psRUVGamFYSmpkVzFtYkdWNFlXTjFkR1VRWVdOcGNtTjFiV1pzWlhoaFkzVjBaUkJCWTJseVkzVnRabXhsZUdkeVlYWmxFR0ZqYVhKamRXMW1iR1Y0WjNKaGRtVVVRV05wY21OMWJXWnNaWGhvYjI5cllXSnZkbVVVWVdOcGNtTjFiV1pzWlhob2IyOXJZV0p2ZG1VUVFXTnBjbU4xYldac1pYaDBhV3hrWlJCaFkybHlZM1Z0Wm14bGVIUnBiR1JsRTBGamFYSmpkVzFtYkdWNFpHOTBZbVZzYjNjVFlXTnBjbU4xYldac1pYaGtiM1JpWld4dmR3dEJZbkpsZG1WaFkzVjBaUXRoWW5KbGRtVmhZM1YwWlF0QlluSmxkbVZuY21GMlpRdGhZbkpsZG1WbmNtRjJaUTlCWW5KbGRtVm9iMjlyWVdKdmRtVVBZV0p5WlhabGFHOXZhMkZpYjNabEMwRmljbVYyWlhScGJHUmxDMkZpY21WMlpYUnBiR1JsRGtGaWNtVjJaV1J2ZEdKbGJHOTNEbUZpY21WMlpXUnZkR0psYkc5M0NVVmtiM1JpWld4dmR3bGxaRzkwWW1Wc2IzY0tSV2h2YjJ0aFltOTJaUXBsYUc5dmEyRmliM1psQmtWMGFXeGtaUVpsZEdsc1pHVVFSV05wY21OMWJXWnNaWGhoWTNWMFpSQmxZMmx5WTNWdFpteGxlR0ZqZFhSbEVFVmphWEpqZFcxbWJHVjRaM0poZG1VUVpXTnBjbU4xYldac1pYaG5jbUYyWlJSRlkybHlZM1Z0Wm14bGVHaHZiMnRoWW05MlpSUmxZMmx5WTNWdFpteGxlR2h2YjJ0aFltOTJaUkJGWTJseVkzVnRabXhsZUhScGJHUmxFR1ZqYVhKamRXMW1iR1Y0ZEdsc1pHVVRSV05wY21OMWJXWnNaWGhrYjNSaVpXeHZkeE5sWTJseVkzVnRabXhsZUdSdmRHSmxiRzkzQ2tsb2IyOXJZV0p2ZG1VS2FXaHZiMnRoWW05MlpRbEpaRzkwWW1Wc2IzY0phV1J2ZEdKbGJHOTNDVTlrYjNSaVpXeHZkd2x2Wkc5MFltVnNiM2NLVDJodmIydGhZbTkyWlFwdmFHOXZhMkZpYjNabEVFOWphWEpqZFcxbWJHVjRZV04xZEdVUWIyTnBjbU4xYldac1pYaGhZM1YwWlJCUFkybHlZM1Z0Wm14bGVHZHlZWFpsRUc5amFYSmpkVzFtYkdWNFozSmhkbVVVVDJOcGNtTjFiV1pzWlhob2IyOXJZV0p2ZG1VVWIyTnBjbU4xYldac1pYaG9iMjlyWVdKdmRtVVFUMk5wY21OMWJXWnNaWGgwYVd4a1pSQnZZMmx5WTNWdFpteGxlSFJwYkdSbEUwOWphWEpqZFcxbWJHVjRaRzkwWW1Wc2IzY1RiMk5wY21OMWJXWnNaWGhrYjNSaVpXeHZkd3BQYUc5eWJtRmpkWFJsQ205b2IzSnVZV04xZEdVS1QyaHZjbTVuY21GMlpRcHZhRzl5Ym1keVlYWmxEazlvYjNKdWFHOXZhMkZpYjNabERtOW9iM0p1YUc5dmEyRmliM1psQ2s5b2IzSnVkR2xzWkdVS2IyaHZjbTUwYVd4a1pRMVBhRzl5Ym1SdmRHSmxiRzkzRFc5b2IzSnVaRzkwWW1Wc2IzY0pWV1J2ZEdKbGJHOTNDWFZrYjNSaVpXeHZkd3BWYUc5dmEyRmliM1psQ25Wb2IyOXJZV0p2ZG1VS1ZXaHZjbTVoWTNWMFpRcDFhRzl5Ym1GamRYUmxDbFZvYjNKdVozSmhkbVVLZFdodmNtNW5jbUYyWlE1VmFHOXlibWh2YjJ0aFltOTJaUTUxYUc5eWJtaHZiMnRoWW05MlpRcFZhRzl5Ym5ScGJHUmxDblZvYjNKdWRHbHNaR1VOVldodmNtNWtiM1JpWld4dmR3MTFhRzl5Ym1SdmRHSmxiRzkzQmxsbmNtRjJaUVo1WjNKaGRtVUpXV1J2ZEdKbGJHOTNDWGxrYjNSaVpXeHZkd3BaYUc5dmEyRmliM1psQ25sb2IyOXJZV0p2ZG1VR1dYUnBiR1JsQm5sMGFXeGtaUTV2Ym1Wa2IzUmxibXhsWVdSbGNnNTBkMjlrYjNSbGJteGxZV1JsY2dadGFXNTFkR1VHYzJWamIyNWtESHBsY205emRYQmxjbWx2Y2d4bWIzVnljM1Z3WlhKcGIzSU1abWwyWlhOMWNHVnlhVzl5QzNOcGVITjFjR1Z5YVc5eURYTmxkbVZ1YzNWd1pYSnBiM0lOWldsbmFIUnpkWEJsY21sdmNneHVhVzVsYzNWd1pYSnBiM0lFUlhWeWJ3ZDFibWt5TVRFekEwOW9iUWxsYzNScGJXRjBaV1FKWVhKeWIzZHNaV1owQjJGeWNtOTNkWEFLWVhKeWIzZHlhV2RvZEFsaGNuSnZkMlJ2ZDI0TFlYSnliM2QxY0d4bFpuUU1ZWEp5YjNkMWNISnBaMmgwRG1GeWNtOTNaRzkzYm5KcFoyaDBEV0Z5Y205M1pHOTNibXhsWm5RSmFXNWpjbVZ0Wlc1MERXUnBkbWx6YVc5dWMyeGhjMmdPWW5Wc2JHVjBiM0JsY21GMGIzSU5aR2xsY21WemFYTmhZM1YwWlExa2FXVnlaWE5wYzJkeVlYWmxFRWxoWTNWMFpWOUtMbXh2WTJ4T1RFUUhVUzVqYjNKMFlRWkRMbk56TURFR1JDNXpjekF4QmtrdWMzTXdNUVpNTG5Oek1ERUdUUzV6Y3pBeEJsWXVjM013TVFaWUxuTnpNREVKYVM1c2IyTnNWRkpMRDJkbGNtMWhibVJpYkhNdVkyRnNkQU5tTG1ZUWFXRmpkWFJsWDJvdWJHOWpiRTVNUkFObUxtd0dZUzV6ZFhCekJtSXVjM1Z3Y3daakxuTjFjSE1HWkM1emRYQnpCbVV1YzNWd2N3Wm1Mbk4xY0hNR1p5NXpkWEJ6Qm1ndWMzVndjd1pwTG5OMWNITUdhaTV6ZFhCekJtc3VjM1Z3Y3dac0xuTjFjSE1HYlM1emRYQnpCbTR1YzNWd2N3WnZMbk4xY0hNR2NDNXpkWEJ6Qm5FdWMzVndjd1p5TG5OMWNITUdjeTV6ZFhCekJuUXVjM1Z3Y3daMUxuTjFjSE1HZGk1emRYQnpCbmN1YzNWd2N3WjRMbk4xY0hNR2VTNXpkWEJ6Qm5vdWMzVndjd05tTG5RTGRXNXBNREEyTmpBd05rRUxaRzkwYkdWemMya3VjMk1MWkc5MGJHVnpjMm91YzJNUGEyZHlaV1Z1YkdGdVpHbGpMbk5qQjNwbGNtOHViR1lHYjI1bExteG1CblIzYnk1c1pnaDBhSEpsWlM1c1pnZG1iM1Z5TG14bUIyWnBkbVV1YkdZR2MybDRMbXhtQ0hObGRtVnVMbXhtQ0dWcFoyaDBMbXhtQjI1cGJtVXViR1lKZW1WeWJ5NXphVzVtQ0c5dVpTNXphVzVtQ0hSM2J5NXphVzVtQ25Sb2NtVmxMbk5wYm1ZSlptOTFjaTV6YVc1bUNXWnBkbVV1YzJsdVpnaHphWGd1YzJsdVpncHpaWFpsYmk1emFXNW1DbVZwWjJoMExuTnBibVlKYm1sdVpTNXphVzVtQjNwbGNtOHVkR1lHYjI1bExuUm1CblIzYnk1MFpnaDBhSEpsWlM1MFpnZG1iM1Z5TG5SbUIyWnBkbVV1ZEdZR2MybDRMblJtQ0hObGRtVnVMblJtQ0dWcFoyaDBMblJtQjI1cGJtVXVkR1lKZW1WeWJ5NTBiM05tQ0c5dVpTNTBiM05tQ0hSM2J5NTBiM05tQ25Sb2NtVmxMblJ2YzJZSlptOTFjaTUwYjNObUNXWnBkbVV1ZEc5elpnaHphWGd1ZEc5elpncHpaWFpsYmk1MGIzTm1DbVZwWjJoMExuUnZjMllKYm1sdVpTNTBiM05tQ1hwbGNtOHVaRzV2YlFodmJtVXVaRzV2YlFoMGQyOHVaRzV2YlFwMGFISmxaUzVrYm05dENXWnZkWEl1Wkc1dmJRbG1hWFpsTG1SdWIyMEljMmw0TG1SdWIyMEtjMlYyWlc0dVpHNXZiUXBsYVdkb2RDNWtibTl0Q1c1cGJtVXVaRzV2YlFsNlpYSnZMbTUxYlhJSWIyNWxMbTUxYlhJSWRIZHZMbTUxYlhJS2RHaHlaV1V1Ym5WdGNnbG1iM1Z5TG01MWJYSUpabWwyWlM1dWRXMXlDSE5wZUM1dWRXMXlDbk5sZG1WdUxtNTFiWElLWldsbmFIUXViblZ0Y2dsdWFXNWxMbTUxYlhJTVlXMXdaWEp6WVc1a0xuTmpDV0ZqZFhSbExtTmhjQWxpY21WMlpTNWpZWEFKWTJGeWIyNHVZMkZ3RG1OcGNtTjFiV1pzWlhndVkyRndDV2R5WVhabExtTmhjQkJvZFc1bllYSjFiV3hoZFhRdVkyRndDV05oY205dUxtRnNkQXBrYVdWeVpYTnBjeTVwQ0cxaFkzSnZiaTVwQjNScGJHUmxMbWtKUjJScFpYSmxjMmx6QmtkMGFXeGtaUXBpY21WMlpXRmpkWFJsQ21KeVpYWmxaM0poZG1VT1luSmxkbVZvYjI5cllXSnZkbVVLWW5KbGRtVjBhV3hrWlFkamFYSmpiR1V4QjJOcGNtTnNaVElQWTJseVkzVnRabXhsZUdGamRYUmxEMk5wY21OMWJXWnNaWGhuY21GMlpSTmphWEpqZFcxbWJHVjRhRzl2YTJGaWIzWmxEMk5wY21OMWJXWnNaWGgwYVd4a1pRMWthV1Z5WlhOcGMyTmhjbTl1RG1ScFpYSmxjMmx6YldGamNtOXVCR1J2ZDI0T1ptbHljM1J2Wm1Ob2FXNWxjMlVMWm05MWJtUnllV2xqYjI0SloyUnBaWEpsYzJsekJtZDBhV3hrWlFsb2IyOXJZV0p2ZG1VRWJHVm1kQWh1WlhkSGJIbHdhQWh1WlhkSGJIbHdhQWh1WlhkSGJIbHdhQWh1WlhkSGJIbHdhQVJ3ZFhOdkJYSnBaMmgwQ1hKcGJtZGhZM1YwWlFkemNYVmhjbVV4QjNOeGRXRnlaVElDZFhBQUFBRUFBZi8vQUE4QUFBQUJBQUFBQU13OW9zOEFBQUFBeTVGTFZnQUFBQURPdzQ4bkFBRUFBQUFPQUFBQW5BQUFBQUFBQWdBWEFBTUJhZ0FCQVdzQmJRQURBVzRDREFBQkFnMENEZ0FDQWc4Q053QUJBamdDT0FBQ0Fqa0Nnd0FCQW9RQ2hBQUNBb1VDa0FBQkFwRUNrUUFDQXBJQ2tnQUJBcE1Da3dBQ0FwUUNsQUFCQXBVQ2xRQUNBcFlDbGdBQkFwY0Nsd0FDQXBnQ21RQUJBcG9DbWdBQ0Fwc0Ntd0FCQXB3Q25BQUNBcDBDblFBQkFwNENuZ0FDQXA4Q29RQUJBQVFBQUFBQ0FBQUFBUUFBQUFvQWNnQ1lBQU5FUmt4VUFCUm5jbVZyQUNSc1lYUnVBRFFBQkFBQUFBRC8vd0FEQUFBQUFRQUNBQVFBQUFBQS8vOEFBd0FBQUFFQUFnQW9BQVpEUVZRZ0FDaEZVMUFnQUNoTlQwd2dBQ2hPVEVRZ0FDaFNUMDBnQUNoVVVrc2dBQ2dBQVAvL0FBTUFBQUFCQUFJQUEyTndjM0FBRkd0bGNtNEFHbTFoY21zQUlBQUFBQUVBQUFBQUFBRUFBUUFBQUFFQUFnQURBQWdBRUFBY0FBRUFBQUFCQUJ3QUFnQUFBQU1CdmdaNkd5NEFCQUFBQUFFanJBQUJBQW9BQlFBSUFCQUFBUURPQUFNQUpBQWxBQ1lBSndBb0FDa0FLZ0FyQUN3QUxRQXVBQzhBTUFBeEFESUFNd0EwQURVQU5nQTNBRGdBT1FBNkFEc0FQQUE5QUlJQWd3Q0VBSVVBaGdDSEFJZ0FpUUNLQUlzQWpBQ05BSTRBandDUUFKRUFrZ0NUQUpRQWxRQ1dBSmNBbUFDYUFKc0FuQUNkQUo0QW53Q2dBTUlBeEFER0FNZ0F5Z0RNQU00QTBBRFNBTlFBMWdEWUFOb0EzQURlQU9BQTRnRGtBT1lBNkFEcUFPd0E3Z0R3QVBJQTlBRDJBUGdBK3dEOUFQOEJBUUVEQVFVQkJ3RUpBUXNCRFFFUEFSRUJFd0VWQVJjQkdRRWJBUjBCSHdFaEFTTUJKUUVuQVNrQkt3RXRBUzhCTVFFekFUVUJOd0U1QVRvQlBBRStBVUVCUXdGRkFVY0JTUUZMQVUwQlR3RlJBVk1CVlFGWEFWa0JXd0ZkQVY4QmNnRjBBWFlCZUFGNUFYc0JmUUYvQVlFQmd3R0ZBWWNCaVFHTEFZMEJqd0dSQVpNQmxRR1hBWmtCbXdHZEFaOEJvUUdqQWFVQnB3R3BBYXNCclFHdkFiRUJzd0cxQWJjQnVRRzdBYjBCdndIQkFjTUJ4UUhIQWNrQnl3SE5BYzhCMFFJUEFqd0NQUUkrQWo4Q1FBSkJBa0lDUXdKRUFrVUNVQUpSQWxJQ1V3SlVBbFVDVmdKWEFsZ0NXUUFCQStRQUJBQUFBR29BM2dEa0FtSUNhQU4yQTN3RGZBTjhBM1lEZGdEZUFONEEzZ0RlQU40QTNnSmlBM3dEZkFOOEEzd0RmQU44QTN3RGRnTjJBM1lEZGdOMkEzWURkZ0RlQTN3QTNnTjhBTjREZkFOOEEzd0RmQU44QTN3RGRnTjJBM1lDWWdKaUEzWUEzZ044QTNZRGRnRGVBM3dEZGdEZUEzd0EzZ044QU40RGZBRGVBM3dBM2dOOEFONERmQURlQTN3QTNnTjhBTjREZkFEZUEzd0EzZ044QU40RGZBTjJBM1lEZGdOMkEzWURkZ04yQTNZRGRnTjJBM1lDWWdKaUFtSUNZZ09DQTZnRHJnTzBBN29Ed0FQR0E4d0QwZ1BZQTk0RGRnQUJBRVgvNXdCZkFFVC8rUUJGLy8wQVJ2LzVBRWYvK1FCSS8va0FTLy85QUU3Ly9RQlAvLzBBVXYvNUFGVC8rUUNpLy9rQW8vLzVBS1QvK1FDbC8va0Fwdi81QUtmLytRQ28vL2tBcWYvNUFLci8rUUNyLy9rQXJQLzVBSzMvK1FDMC8va0F0Zi81QUxiLytRQzMvL2tBdVAvNUFMci8rUURBLy8wQXcvLzVBTVgvK1FESC8va0F5Zi81QU12LytRRE4vL2tBei8vNUFOSC8rUURULy9rQTFmLzVBTmYvK1FEWi8va0EyLy81QU4zLytRRG4vLzBBNmYvOUFQbi8vUUQ2Ly8wQS9QLzlBUDcvL1FFQS8vMEJBdi85QVE3LytRRVEvL2tCRXYvNUFSVC8rUUZDLy9rQlJ2LzVBVXIvK1FGVy8va0JXUC81QVZyLytRRmMvL2tCZXYvNUFYei8rUUYrLy9rQmdQLzVBWUwvK1FHRS8va0Jodi81QVlqLytRR0svL2tCalAvNUFZNy8rUUdRLy9rQmt2LzVBWlQvK1FHVy8va0JtUC81QVpyLytRR2MvL2tCbnYvNUFhRC8rUUdtLy9rQnFQLzVBYXIvK1FHcy8va0Jydi81QWJELytRR3kvL2tCdFAvNUFiYi8rUUc0Ly9rQnV2LzVBYnovK1FLSi8va0FBUUJNLy9VQVF3QWwvL0lBSi8veUFDai84Z0FwLy9JQUsvL3lBQ3ovOGdBdC8vVUFMdi95QUMvLzhnQXgvL0lBTS8veUFEWC84Z0NLLy9JQWkvL3lBSXovOGdDTi8vSUFqdi95QUkvLzhnQ1EvL0lBa2YveUFKTC84Z0NULy9JQW9QL3lBTkQvOGdEUy8vSUExUC95QU5iLzhnRFkvL0lBMnYveUFOei84Z0RtLy9JQTZQL3lBT3IvOGdEcy8vSUE3di95QVBELzhnRHkvL0lBOVAveUFQYi85UUQ0Ly9JQSsvL3lBUDMvOGdELy8vSUJBZi95QVFQLzhnRUYvL0lCQi8veUFRbi84Z0VMLy9JQkZmL3lBUmYvOGdFWi8vSUJSLy95QVpILzhnR1QvL0lCbGYveUFaZi84Z0daLy9JQm0vL3lBWjMvOGdHZi8vSUJvZi95QWFQLzhnSFcvODhDT2YveUFqci85UUk3Ly9JQUFRSFcvK2NBQVFIVy84OEFDUUpsQUdBQ1pnQURBbWNBS0FKby8vd0NhUUFqQW1yLzh3SnJBQzhDYkFBQUFtMEFFZ0FCQWVZQUFBQUJBZVlBSGdBQkFlWUFLQUFCQWVZQURnQUJBZVlBSHdBQkFlWUFBd0FCQWVZQUdRQUJBZWIvOFFBQkFlWUFDUUFCQWViLzV3QUJBR29BSkFBeEFEd0FSQUJGQUVzQVVBQlJBRklBVXdDQ0FJTUFoQUNGQUlZQWh3Q2ZBS0lBb3dDa0FLVUFwZ0NuQUxNQXRBQzFBTFlBdHdDNEFMb0F3QURDQU1NQXhBREZBTVlBeHdEbkFPa0JCZ0VJQVFvQkRnRVFBUklCTndFNUFVSUJSUUZHQVVvQlZnRlhBVmdCWEFGNUFYb0Jld0Y4QVgwQmZnRi9BWUFCZ1FHQ0FZTUJoQUdGQVlZQmh3R0lBWWtCaWdHTEFZd0JqUUdPQVk4QmtBR21BYWdCcWdHc0FhNEJzQUd5QWJRQnVBRzZBYndCeXdITkFjOEIwUUhtQW00Q2J3SndBbkVDY2dKekFuUUNkUUoyQW5jQ2lRQUNFL3dBQkFBQUNlUU91Z0FsQUNJQUFQL3QvK1AvNS8vMC8rSC8vUC8xLytNQUJmLzJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBLy9mLzNRQUFBQUFBRHYvekFBWC9xZ0FBLy8wQUN2L3QvK01BQXdBRC8rTC8ydi8yLzY3Ly9nQURBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRC8zdi9qQUFELzZnQUEvLzBBQVAvVy8rb0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEvOVVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVAvUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEvK3IvNHdBQS8vVC83QUFBQUFELy9RQUEvK3IvendBQS8vWUFBQUFBQUFELytRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFELzVQL2VBQUQvOXYvZUFBRC8rZ0FBQUFELzZnQUFBQUlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUQvNnYvNC8vd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC9mQUFBQUFBQUEvK2tBQUFBQS8vb0FBUC91QUFBQUFBQUFBQUQvL2dBQUFBQUFBQUFBQUFBQUFBQUFBQUQvOVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFELzhmL3VBQUQvekFBQUFBRC92UC9WLzhqLzhmLzMvK24veGYvdC83Ly84QUFBLyszLzhBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUQvMi8rMi8rZi83UC9xQUFELzlQLzYvKzMvNmdBRkFBRC82Zi9xQUFBQUFQL2tBQUQvMWdBQUFBRC8vZ0FBLy9iLzl2L3FBQUFBQUFBQUFBQUFBQUFBQUFBQUFQL3YvL0FBQUFBQUFBQUFBQUFBLzlzQUFBQUFBQmdBQVAvdUFBQUFBUC8yLytULzZ2L1RBQUFBQUFBQS8vNEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBLy9RQUFBQUEvL1QvOUFBQUFBRC8xZi8wQUFELzFRQUFBQU1BQUFBQUFBQUFCUUFBQUFNQUFBQUFBQUQvL0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFQLzNBQUFBQUFBQUFBTUFBQUFBQUFELzl3QUFBQUFBQVAvK0FBRC84QUFBQUFELyt3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBREFBQUFBQUFEQUFmLzlRQUEvOU1BQUFBQS85NEFBdi96QUNNQUFQL3EvK0lBQVAvVkFBQUFJZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEvL0gvNXdBQUFBQUFBUC8xQUFEL3Z3QUFBQUFBQUFBQS8rTUFBQUFBLy96LzRnQUEvNzhBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFELzZnQUFBQUQvN2YvdEFBWC85Z0FBLy9uLzZnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQS8vd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUQvN1FBQUFBQUFBQUFBLyswQUFQL0tBQUFBQUFBQS84VUFBUCt6QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQS83Ly92ZisvLzcvL3YvL0ovKzcvcS8rLy83Y0FBQUFDQUFEL3YvL2RBQUFBQUFBQUFBQUFBUC9RQUFEL3YvKy8vOVVBQVAvdS83ai9zd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUQvMndBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFQL3dBQUFBQUFBQS8rc0FDQUFBQUFBQUFQLzMvNXIvL2YvUy8vUC8vZ0FBLzlVQUFQL1lBQUFBQUFBQUFBQUFBUC9jQUFVQUFBQUFBQUFBQUFBQUFBQUFBQUFBLy9ILzR3QUFBQUFBQVAveEFBRC91Z0FBQUFELzhmL1MvK01BQUFBQy8rZi8zdi9pLzc4QUFBQUFBQUFBQUFBQUFBQUFBUC9uQUFBQUFQL25BQUFBQUFBQUFBRC94Zi9TLzlqL3hmL2UvOWIvK2YrZy84WC94UUFDQUFMLy9mL2kvK3NBQUFBQUFBQUFBQUFBQUFELzQvL2cvOFQvNGdBQUFBVUFBQUFBLy9rQUFBQUFBQUFBQUFBQUFBQUFBQUFBLytzQUFBQUFBQUFBQUFBQS83ei81Ly9LLy80QUFQLysvOFgvNS8rL0FBQUFBUC8yQUFBQUFBQUFBQUQvOUFBQUFBQUFBQUFBQUFBQUFBQUEvK3NBQUFBQUFBQUFCUC91QUFELzF3QUFBQUFBTlFBa0FDd0FCZ0FBQUdRQVBBQWhBQndBSWdBQUFBQUFBd0FBQUFRQVpBQWFBQUFBQUFBQUFCWUFkd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC91QUFBQUFBQUFBQUQvendBQUFBRC8yUC9ZLzl2L3Z3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC91Lzg0QUFBQUEvL0VBQUFBQi8vMy83Zi90LzZiLytmL3gvL1lBQVAvMy85WUFBUC9KQUFBQUFBQUFBQUQvK3YvMS8vMEFBUC85Ly8wQUFBQUFBQUFBQUFBQS84ai9ydi9QLzlMLzQvL3gvL0gvcHYvSy84NEFBQUFDQUFELzQvLzJBQUQvL1FBQUFBQUFBUC9lLytILzIvL0gvL01BQVAvd0FBQUFBUC8yQUFBQUFBQUFBQUQvK1FBQUFBQUFBUC94QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBLy93QUFBQUEvKzBBQUFBQUFBQUFBQUFELzk0QUFBQUFBQUFBQVAvWUFBTUFBUUFHLytULzRmL0RBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBLy9ILzVnQUFBQUFBQUFBSUFBQUFBQUFBQUFBQUJnQUEvK0lBQUFBQUFBRC8xZ0FBLzc4QUFBQUFBQUFBQVAvOEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRC8yUC8rLytULzV2LzMvK2ovK3YrdC8rYi81UC82QUIwQURBQUFBQUFBQkFBTkFBQUFGUUFDQUFBQUFnQUEvOXovOXdBQS8vY0FBQUFBQUFBQUFBQUFBQUFBQVAvcUFBQUFBUC8yLyswQUFQLzAvN3dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1BQVAvdUFBRC85QUFBQUFELy9BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUQvNlAvbi84NEFBQUFBLy83L3l3QUYvN2NBQUFBQS8vWUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFELzZ2L2gvL2YvNnYvMkFBUC8vUUFBLy9ELzhnQUFBQUlBQUFBQS8vY0FBQUFDQUFBQUFBQUFBQUFBQVAvbi8vYi85d0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC9wLzhjQUFnQUUvK2YvOXdBQS8vMy85di94QUFBQUFBQUEvL3ovL1FBQUFBQUFBQUFBQUFBQUFQLytBQUwvL1AvcUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQS85TC90di91Lys4QUFQL1NBQUQvWC8vdi8rLy8rZ0FDLys0QUF3QUMvLzcvOEFBQS8va0FBQUFDQUFBQUFQL0ZBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdBQUFBQUFBUC8vLy9NQUEvL2VBQUFBQVAvSUFBRC8wQUFBQUFBQUJmL1MvK0gvdndBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUQvK1AvS0FBQUFBUC8rLytELy9QKy9BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCQUNNQ2FBQU1BQmdBQ2dBZ0FBd0FCUUFkQUE0QUFBQUFBQUFBSVFBU0FBUUFBQUFNQUNJQURBQUlBQjRBRUFBQ0FCa0FHUUFoQUJRQUJnQUFBQUFBQUFBQUFBQUFBQUFWQUFjQUd3QUxBQ01BRmdBUEFCVUFDd0FEQUJvQUN3QVZBQlVBQndBSEFBOEFBUUFYQUFrQUh3QVRBQk1BSEFBVEFDUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFHQUFZQUJnQUdBQVlBQmdBQlFBZ0FBVUFCUUFGQUFVQUFBQUFBQUFBQUFBTUFBQUFEQUFNQUF3QURBQU1BQUFBREFBQ0FBSUFBZ0FDQUJRQUFBQVhBQlVBRlFBVkFCVUFGUUFWQUNNQUd3QWpBQ01BSXdBakFBc0FDd0FMQUFzQUFBQVZBQWNBQndBSEFBY0FCd0FBQUFjQUh3QWZBQjhBSHdBTkFBY0FEUUFZQUJVQUdBQVZBQmdBRlFBZ0FCc0FJQUFiQUNBQUd3QWdBQnNBREFBTEFBd0FDd0FGQUNNQUJRQWpBQVVBSXdBRkFDTUFCUUFqQUE0QUR3QU9BQThBRGdBUEFBNEFEd0FBQUJVQUFBQVZBQUFBQ3dBQUFBc0FBQUFMQUFBQUN3QUFBQXNBQUFBREFBQUFBd0FoQUJvQUdnQVNBQXNBRWdBTEFCSUFDd0FBQUFzQUVnQUFBQUFBRlFBQUFCVUFBQUFWQUFBQUF3QU1BQWNBREFBSEFBd0FCd0FGQUNNQUNBQUJBQWdBQVFBSUFBRUFIZ0FYQUI0QUZ3QWVBQmNBSGdBWEFCQUFDUUFRQUFrQUVBQUpBQUlBSHdBQ0FCOEFBZ0FmQUFJQUh3QUNBQjhBQWdBZkFCa0FFd0FVQUEwQUZBQUdBQ1FBQmdBa0FBWUFKQUFBQUF3QUJ3QUFBQjhBR0FBVkFBQUFDd0FNQUFjQUFnQWZBQUlBSHdBQ0FCOEFBZ0FmQUFJQUh3QU1BQWNBR0FBVkFBVUFJd0FNQUFjQUhnQVhBQkFBQ1FBREFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJnQUFBQWZBQUFBR1FBVEFCa0FFd0FaQUJNQUFBQVlBQlVBR0FBVkFCZ0FGUUFZQUJVQUdBQVZBQmdBRlFBWUFCVUFHQUFWQUJnQUZRQVlBQlVBR0FBVkFCZ0FGUUFGQUNNQUJRQWpBQVVBSXdBRkFDTUFCUUFqQUFVQUl3QUZBQ01BQlFBakFBQUFDd0FBQUFzQURBQUhBQXdBQndBTUFBY0FEQUFIQUF3QUJ3QU1BQWNBREFBSEFBd0FCd0FNQUFBQURBQUhBQXdBQndBTUFBY0FBZ0FmQUFJQUh3QUFBQjhBQUFBZkFBQUFId0FBQUI4QUFBQWZBQlFBRFFBVUFBMEFGQUFOQUJRQURRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCRUFDd0FBQUF3QUFBQUFBQUFBQUFBQUFBQUFBQUFMQUFBQUFBQURBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEZ0FPQUFBQUFBQUFBQUFBQndBTUFBRUFCQUtlQUI4QUN3QUFBQUFBQUFBQUFBc0FBQUFBQUFzQUFBQUlBQUlBQ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFIQUFkQUFBQUFBQUFBQ0FBR1FBR0FCSUFHUUFTQUJJQUVnQVpBQklBRWdBTUFCSUFFZ0FlQUJJQUdRQVNBQmtBRWdBYkFCTUFHZ0FOQUEwQUVBQVJBQlFBQUFBQUFBQUFBQUFJQUFzQUFRQUhBQUVBQVFBQkFCWUFHQUFIQUFBQUZRQUhBQWNBQkFBRUFBRUFDUUFCQUFRQUF3QUtBQW9BQlFBRkFDRUFCUUFYQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXNBR1FBQUFBQUFBQUFDQUFzQUN3QUxBQUFBQUFBQUFBc0FBQUFBQUFJQUNBQUFBQUFBQUFBQUFBQUFBQUFBQUFZQUJnQUdBQVlBQmdBR0FBWUFHUUFTQUJJQUVnQVNBQklBRWdBU0FCSUFFZ0FTQUJrQUdRQVpBQmtBR1FBQUFCa0FHZ0FhQUJvQUdnQVJBQklBRmdBQkFBRUFBUUFCQUFFQUFRQUJBQUVBQVFBQkFBRUFBUUFBQUFBQUFBQUFBQUFBQkFBQkFBRUFBUUFCQUFFQUFBQUJBQW9BQ2dBS0FBb0FEZ0FIQUE0QUJnQUJBQVlBQVFBR0FBRUFHUUFCQUJrQUFRQVpBQUVBR1FBQkFCSUFBUUFTQUFFQUVnQUJBQklBQVFBU0FBRUFFZ0FCQUJJQUFRQVpBQmdBR1FBWUFCa0FHQUFaQUJnQUVnQUhBQklBQndBU0FBQUFFZ0FBQUJJQUFBQVNBQUFBRWdBQUFCSUFBQUFNQUJVQUVnQUhBQWNBRWdBSEFCSUFCd0FTQUFjQUVnQUhBQklBQUFBU0FBUUFFZ0FFQUJJQUJBQVNBQVFBR1FBQkFCa0FBUUFaQUFFQUdRQUJBQklBQkFBU0FBUUFFZ0FFQUJzQUF3QWJBQU1BR3dBREFCc0FBd0FUQUE4QUV3QVBBQk1BRHdBYUFBb0FHZ0FLQUJvQUNnQWFBQW9BR2dBS0FCb0FDZ0FOQUFVQUVRQU9BQkVBRkFBWEFCUUFGd0FVQUJjQUFBQVpBQUVBR2dBS0FBWUFBUUFTQUFBQUdRQUJBQm9BQ2dBYUFBb0FHZ0FLQUJvQUNnQWFBQW9BR1FBQkFBWUFBUUFHQUFFQUdRQUJBQnNBQXdBVEFBOEFGUUFMQUFzQUN3QUxBQXNBQ3dBSUFBc0FDd0FMQUFnQUNBQUdBQUFBQ1FBQUFBMEFCUUFOQUFVQURRQUZBQUFBQmdBQkFBWUFBUUFHQUFFQUJnQUJBQVlBQVFBR0FBRUFCZ0FCQUFZQUFRQUdBQUVBQmdBQkFBWUFBUUFHQUFFQUVnQUJBQklBQVFBU0FBRUFFZ0FCQUJJQUFRQVNBQUVBRWdBQkFCSUFBUUFTQUFBQUVnQUFBQmtBQVFBWkFBRUFHUUFCQUJrQUFRQVpBQUVBR1FBQkFCa0FBUUFaQUFFQUdRQUJBQmtBQVFBWkFBRUFHUUFCQUJvQUNnQWFBQW9BR2dBS0FCb0FDZ0FhQUFvQUdnQUtBQm9BQ2dBUkFBNEFFUUFPQUJFQURnQVJBQTRBQWdBQ0FBc0FDd0FJQUFzQUN3QUlBQUFBQUFBQ0FBZ0FDQUFJQUFBQUN3QUxBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDd0FBQUJrQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBc0FDd0FXQUJZQUFBQVpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQllBQUFBV0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBV0FCWUFFZ0FNQUJJQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMQUFzQUN3QUxBQXNBQ3dBTEFBc0FDd0FMQUJrQUdRQUxBQXNBQ3dBTEFBRUFHUUFMQUFzQUN3QUxBQXNBQ3dBQUFBc0FBQUFZQUJnQUN3QUFBQXNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXNBQWdBZUFDTUFQUUFBQUVRQVhRQWJBR3NBYXdBMUFJSUFtQUEyQUpvQW53Qk5BS0VBc1FCVEFMTUF1QUJrQUxvQkFBQnFBUUlCQXdDeEFRVUJQd0N6QVVFQlFnRHVBVVFCWVFEd0FXNEJiZ0VPQVhBQmNBRVBBWElCZHdFUUFYa0J0UUVXQWJjQndBRlRBY0lCd2dGZEFjUUJ4QUZlQWNZQnhnRmZBY2dCeUFGZ0Fjb0IwZ0ZoQWZNQjh3RnFBZzBDRGdGckFoQUNFQUZ0QWhnQ0dBRnVBaHNDR3dGdkFqa0NPZ0Z3QW9NQ2hBRnlBb2tDaWdGMEFBSUg4Z0FFQUFBQndBS3VBQWdBR3dBQUFBSUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRC90UC8rLzZiLzdmL0MvOC8vL2YvTS84d0FBUCtnLzdyLzIvK3cvOVAvMXYvOUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC9qLzY3LzdmL25BQUFBQUFBQUFBRC94Ly9TLytNQUFQKzlBQUQvNHdBQS84Ny80Ly9qQUE0QUFBQUFBQUFBQUFBQUFBQUFJZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC8rLy8wQUFBQUFBQUFBQUFBQUFBQUFBUC9QQUFBQUFQL1AvLzRBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRC83UUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFELzdmL3RBQUFBQUFBQUFBQUFBQUFBQUFELzdRQUFBQUFBQVArOS8rMEFBQUFDLy9ELzdRQUFBQUFBQUFBQS82UUFBQUFBQUFEL3RBQUEvKzMvd0FBQUFBQUFBQUFBLy8wQUFBQUFBQUFBQUFBQUFBQUFBUC81QUFBQUFQLzlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ0FDY0FBd0FEQUFVQUJRQUZBQVlBQ2dBS0FBWUFEUUFOQUFZQUR3QVBBQUVBRUFBUUFBSUFFUUFSQUFFQUlnQWlBQU1BUWdCQ0FBRUFRd0JEQUFZQVl3QmpBQWNBYWdCcUFBWUFid0J2QUFJQWNBQnlBQVlBZGdCMkFBWUFlUUI1QUFJQWVnQjZBQUVBZ1FDQkFBUUJZZ0ZuQUFZQmFBRm9BQUVCYVFGckFBWUJiQUZ0QUFFQjB3SFVBQUlCMVFIV0FBWUIxd0hYQUFFQjJBSFpBQVlCMmdIYUFBRUIzUUhkQUFJQjNnSGdBQUVCNGdIakFBWUI4UUh4QUFZQ0N3SU1BQVlDZVFLQ0FBWUNoUUtJQUFZQ2l3S1FBQVlDa2dLU0FBWUNsZ0tXQUFZQ21BS1lBQVlDb1FLaEFBWUFBUUFEQXA4QUJRQUFBQUlBQUFBQUFBQUFBQUFDQUFBQUFBQUNBQUFBRndBWUFCY0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCQUFFd0FWQUJBQUZRQVZBQlVBRUFBVkFCVUFBd0FWQUJVQUZBQVZBQkFBRlFBUUFCVUFBQUFQQUJFQUJBQUVBQXNBREFBV0FBQUFBQUFBQUFBQUZ3QUNBQWtBQndBSkFBa0FDUUFTQUFBQUJ3QUFBQUFBQndBSEFCa0FHUUFKQUE0QUNRQVpBQUFBQ2dBS0FBMEFEUUFBQUEwQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ0FCQUFBQUFBQUFBQUdBQUNBQUlBQWdBQUFBQUFBQUFDQUFBQUFBQVlBQmNBQUFBQkFBQUFBQUFBQUFBQUdnQVRBQk1BRXdBVEFCTUFFd0FUQUJBQUZRQVZBQlVBRlFBVkFCVUFGUUFWQUJVQUZRQVFBQkFBRUFBUUFCQUFBQUFRQUJFQUVRQVJBQkVBREFBVkFCSUFDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUFBQUFBQUFBQUFBQUFCa0FDUUFKQUFrQUNRQUpBQUFBQ1FBS0FBb0FDZ0FLQUFZQUJ3QUdBQk1BQ1FBVEFBa0FFd0FKQUJBQUNRQVFBQWtBRUFBSkFCQUFDUUFWQUFrQUZRQUpBQlVBQ1FBVkFBa0FGUUFKQUJVQUNRQVZBQWtBRUFBQUFCQUFBQUFRQUFBQUVBQUFBQlVBQndBVkFBY0FGUUFBQUJVQUFBQVZBQUFBRlFBQUFCVUFBQUFWQUFBQUF3QUFBQlVBQndBSEFCVUFCd0FWQUFjQUZRQUhBQlVBQndBVkFBQUFGUUFaQUJVQUdRQVZBQmtBRlFBWkFCQUFDUUFRQUFrQUVBQUpBQkFBQ1FBVkFCa0FGUUFaQUJVQUdRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUR3QUlBQThBQ0FBUEFBZ0FFUUFLQUJFQUNnQVJBQW9BRVFBS0FCRUFDZ0FSQUFvQUJBQU5BQXdBQmdBTUFCWUFBQUFXQUFBQUZnQUFBQUFBRUFBSkFCRUFDZ0FUQUFrQUZRQUFBQkFBQ1FBUkFBb0FFUUFLQUJFQUNnQVJBQW9BRVFBS0FCQUFDUUFUQUFrQUV3QUpBQkFBQ1FBQUFBQUFEd0FJQUFBQUFnQUNBQUlBQWdBQ0FBSUFGd0FDQUFJQUFnQVhBQmNBRXdBQUFBNEFBQUFFQUEwQUJBQU5BQVFBRFFBQUFCTUFDUUFUQUFrQUV3QUpBQk1BQ1FBVEFBa0FFd0FKQUJNQUNRQVRBQWtBRXdBSkFCTUFDUUFUQUFrQUV3QUpBQlVBQ1FBVkFBa0FGUUFKQUJVQUNRQVZBQWtBRlFBSkFCVUFDUUFWQUFrQUZRQUFBQlVBQUFBUUFBa0FFQUFKQUJBQUNRQVFBQWtBRUFBSkFCQUFDUUFRQUFrQUVBQUpBQkFBQ1FBUUFBa0FFQUFKQUJBQUNRQVJBQW9BRVFBS0FCRUFDZ0FSQUFvQUVRQUtBQkVBQ2dBUkFBb0FEQUFHQUF3QUJnQU1BQVlBREFBR0FCZ0FHQUFDQUFJQUZ3QUNBQUlBRndBQUFBQUFHQUFYQUJjQUZ3QUFBQUlBQWdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFJQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDQUFJQUVnQVNBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBU0FBQUFFZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFFZ0FTQUJVQUF3QVZBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFnQUNBQUlBQWdBQ0FBSUFBZ0FDQUFJQUFnQVFBQkFBQWdBQ0FBSUFBZ0FKQUJBQUFnQUNBQUlBQWdBQ0FBSUFBQUFDQUFBQUFBQUFBQUlBQUFBQ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ0FBRUFTZ0FEQUFVQUNnQU5BQThBRUFBUkFDSUFRZ0JEQUdNQWFnQnZBSEFBY1FCeUFIWUFlQUI1QUhvQWdRRmlBV01CWkFGbEFXWUJad0ZvQVdrQmFnRnJBV3dCYlFIVEFkUUIxUUhXQWRjQjJBSFpBZG9CM1FIZUFkOEI0QUhpQWVNQjhRSUxBZ3dDZVFKNkFuc0NmQUo5QW40Q2Z3S0FBb0VDZ2dLRkFvWUNod0tJQW9zQ2pBS05BbzRDandLUUFwSUNsZ0tZQXFFQUFRaTRCNzRBQWdqQ0FBd0Fld0h1QWZRQitnSUFBZ1lDREFJU0FoZ0NIZ0lrQWlvQ01BSTJBandDUWdKSUFrNENWQUphQW1BQ1pnSnNBbklDZUFKK0FvUUNpZ0tRQXBZQ25BS2lBcWdDcmdLMEFyb0N3QUxHQXN3QzBnTFlBdDRDNUFMcUF2QUM5Z0w4QXdJRENBTU9BeFFER2dNZ0F5WURMQU15QXpnRFBnTkVBMG9EVUFOV0Exd0RZZ05vQTI0RGRBTjZBNEFEaGdPTUE1SURtQU9lQTZRRHFnT3dBN1lEdkFQQ0E4Z0R6Z1BVQTlvRDRBUG1BK3dEOGdQNEEvNEVCQVFLQkJBRUZnUWNCQ0lFS0FRdUJEUUVPZ1JBQkVZRVRBUlNCRmdFWGdSa0JHb0VjQVIyQkh3RWdnU0lCSTRFbEFTYUJLQUVwZ1NzQkxJRXVBUytCTVFFeWdUUUJOWUUzQVRpQk9nRTdnVDBCUG9GQUFVR0JRd0ZFZ1VZQlI0RkpBVXFCVEFGTmdVOEJVSUZTQVZPQlZRRldnVmdCV1lGYkFWeUJYZ0ZmZ1dFQllvRmtBV1dCWndGb2dXb0JhNEZ0QVc2QmNBRnhnWE1CZElGMkFYZUJlUUY2Z1h3QmZZRi9BWUNCZ2dHRGdZVUJob0dJQVltQml3R01nWTRCajRHUkFaS0JsQUdWZ1pjQm1JR2FBWnVCblFHZWdhQUJvWUdqQWFTQnBnR25nYWtCcW9Hc0FhMkJyd0d3Z2JJQnM0RzFBYmFCdUFHNWdic0J2SUcrQWIrQndRSENnY1FCeFlISEFjaUJ5Z0hMZ2MwQnpvSFFBZEdCMHdIVWdkWUIxNEhaQWRxQjNBSGRnZDhCNElIaUFlT0I1UUhtZ2VnQjZZSHJBQUJBVVFDZndBQkFBQUFBQUFCQVZBQ2Z3QUJBU0FBQUFBQkFVd0Nmd0FCQUFBQUFBQUJBVGNDZndBQkFRTUFBQUFCQVZzQ2Z3QUJBVHNBQUFBQkFYY0Nmd0FCQUFBQUFBQUJBSzRDZndBQkFBQUFBQUFCQUpjQ2Z3QUJBQUFBQUFBQkFRUUNmd0FCQVE4QUFBQUJBTEFDZndBQkFNa0FBQUFCQVhjQ2Z3QUJBU2dBQUFBQkFXRUNmd0FCQUFBQUFBQUJBVElDZndBQkFPUUFBQUFCQVE0Q2Z3QUJBTDhBQUFBQkFSa0Nmd0FCQU1vQUFBQUJBVm9DZndBQkFBQUFBQUFCQWNNQ2Z3QUJBQUFBQUFBQkFTWUNmd0FCQUFBQUFBQUJBUW9DZndBQkFBQUFBQUFCQVBvQnh3QUJBQUFBQUFBQkFNUUJpUUFCQVEwQUFBQUJBT0lCeHdBQkFLVUFBQUFCQVVnQnh3QUJBVWNBQUFBQkFPb0J4d0FCQUtJQUFBQUJBUFlCeHdBQkFBQUFBQUFCQUtVQ3ZBQUJBQUFBQUFBQkFHd0J4d0FCQU5BQUFBQUJBS2NDdkFBQkFGQUFBQUFCQUlRQnh3QUJBT3NBQUFBQkFRUUJ4d0FCQU13QUFBQUJBTzBCeHdBQkFBQUFBQUFCQU1ZQmp3QUJBUklBQUFBQkFOOEJ4d0FCQUZFQUFBQUJBTDhCeHdBQkFJVUFBQUFCQUFBQUFBQUJBS1lBQUFBQkFRUUJ4d0FCQUFBQUFBQUJBV3dCeHdBQkFBQUFBQUFCQU5RQnh3QUJBQUFBQUFBQkFPVUJ4d0FCQUFBQUFBQUJBZ2dDZndBQkFBQUFBQUFCQVZBQ2Z3QUJBU0FBQUFBQkFXSUNmd0FCQUFBQUFBQUJBV0VDZndBQkFBQUFBQUFCQVY4Qnh3QUJBbUFBQUFBQkFPSUJ4d0FCQUtVQUFBQUJBUGNCeHdBQkFBQUFBQUFCQVVRQ2Z3QUJBQUFBQUFBQkFQb0J4d0FCQUFBQUFBQUJBVWdCeHdBQkFVY0FBQUFCQVVnQnh3QUJBVWNBQUFBQkFUY0Nmd0FCQVFNQUFBQUJBT29CeHdBQkFLSUFBQUFCQVBZQnh3QUJBQUFBQUFBQkFZRUNmd0FCQUFBQUFBQUJBTTRDdkFBQkFBQUFBQUFCQUs0Q2Z3QUJBQUFBQUFBQkFJUUJ4d0FCQUFBQUFBQUJBSVFCeHdBQkFBQUFBQUFCQUlRQnh3QUJBQUFBQUFBQkFJUUJ4d0FCQUFBQUFBQUJBTEFDZndBQkFNa0FBQUFCQUtjQ3ZBQUJBRkFBQUFBQkFLY0N2QUFCQUZBQUFBQUJBTGtDZndBQkFORUFBQUFCQUt3Q3ZBQUJBRlVBQUFBQkFrSUNmd0FCQUFBQUFBQUJBY2tCeHdBQkFrb0FBQUFCQVE0Q2Z3QUJBTDhBQUFBQkFMOEJ4d0FCQUlVQUFBQUJBUmtDZndBQkFNb0FBQUFCQUFBQUFBQUJBS1lBQUFBQkFSa0Nmd0FCQU1vQUFBQUJBQUFBQUFBQkFLc0FBQUFCQVZvQ2Z3QUJBQUFBQUFBQkFRUUJ4d0FCQUFBQUFBQUJBV0VDZndBQkFBQUFBQUFCQVBrQnh3QUJBQUFBQUFBQkFWUUNmd0FCQUFBQUFBQUJBUTBCeHdBQkFBQUFBQUFCQVdFQ2Z3QUJBQUFBQUFBQkFPMEJ4d0FCQUFBQUFBQUJBSVVCeHdBQkFBQUFBQUFCQVVRQ2Z3QUJBQUFBQUFBQkFRSUJ4d0FCQUFBQUFBQUJBVVFDZndBQkFBQUFBQUFCQVFJQnh3QUJBQUFBQUFBQkFVUUNmd0FCQUFBQUFBQUJBUUlCeHdBQkFBQUFBQUFCQUlRQnh3QUJBQUFBQUFBQkFXSUNmd0FCQUFBQUFBQUJBUFFCeHdBQkFBQUFBQUFCQVdJQ2Z3QUJBQUFBQUFBQkFQUUJ4d0FCQUFBQUFBQUJBUGtCeHdBQkFBQUFBQUFCQU5NQnh3QUJBQUFBQUFBQkFSWUI2UUFCQU5zQUJnQUJBUnNCNkFBQkFBQUFBQUFCQUpnQjdBQUJBQUFBQUFBQkFTc0M3UUFCQUw4QUFBQUJBSHNBeGdBQkFBQUFBQUFCQUhvQXlnQUJBSjhBQUFBQkFHY0F4Z0FCQUdNQUFBQUJBS1lBeGdBQkFLWUFBQUFCQUhFQXhnQUJBR1lBQUFBQkFBY0FBQUFCQUFBQUFBQUJBQWNBQUFBQkFBY0FBQUFCQUFjQUFBQUJBQUFBQUFBQkFBY0FBQUFCQUFBQUFBQUJBQWNBQUFBQkFBY0FBQUFCQUFjQUFBQUJBQWNBQUFBQkFBY0FBQUFCQUFjQUFBQUJBQWNBQUFBQkFBY0FBQUFCQUFjQUFBQUJBQWNBQUFBQkFBY0FBQUFCQUFjQUFBQUJBQWNBQUFBQkFBY0FBQUFCQUFBQUFBQUJBQWNBQUFBQkFBY0FBQUFCQUFjQUFBQUJBQWNBQUFBQkFBQUFBQUFCQUFjQUFBQUJBQUFBQUFBQkFBY0FBQUFCQUFBQUFBQUJBUmtDN1FBQkFLNEFBQUFCQUhzQjdnQUJBQUFBQUFBQkFOTUI3Z0FCQU4wQUFBQUJBSHNBSkFBbUFDY0FLQUFxQUNzQUxBQXRBQzRBTHdBeEFESUFOUUEyQURjQU9BQTZBRHdBUFFCRUFFVUFSZ0JIQUVnQVNnQkxBRTRBVHdCUUFGRUFVZ0JUQUZVQVZnQlhBRmdBV2dCY0FGMEFpQUNKQUpJQW1nQ29BS2tBdWdER0FNY0EwUURUQU5vQTJ3RGxBT2dBNlFEd0FQRUE4d0QxQVBvQS93RUFBUUlCQXdFRUFSTUJGQUVmQVNBQkl3RWtBU2NCS0FFekFUUUJRUUZDQVVNQlJBRlZBVllCWVFGNUFYb0JoUUdHQVk4QmtBR2tBYVVCcGdHeEFiSUJ0Z0hPQWhFQ0VnSVRBaG9DSFFJZUFoOENJQUloQWlNQ0pBSWxBaVlDSndJb0Fpa0NLZ0lzQWk0Q0x3SXdBakVDTXdJMUFqWUNOd0k1QWpzQUFRQURBV3NCYkFGdEFBTUFBQUFPQUFFQUZBQUJBQm9BQVFEZUFjY0FBUUNtQUFBQUFRQ2svLzRBQUFBQkFBQUFDZ0lJQTRJQUEwUkdURlFBRkdkeVpXc0FRR3hoZEc0QWJBQUVBQUFBQVAvL0FCRUFBQUFCQUFJQUF3QUVBQVVBQndBVEFCUUFGUUFXQUJjQUdBQVpBQm9BR3dBY0FBUUFBQUFBLy84QUVRQUFBQUVBQWdBREFBUUFCUUFIQUJNQUZBQVZBQllBRndBWUFCa0FHZ0FiQUJ3QVJnQUxRVnBGSUFCdVEwRlVJQUIyUTFKVUlBQ2dSVk5RSUFDb1IxVkJJQURTUzBGYUlBRGFUVTlNSUFEaVRreEVJQUVNVWs5TklBRTJWRUZVSUFGZ1ZGSkxJQUZvQUFELy93QVJBQUFBQVFBQ0FBTUFCQUFGQUFjQUV3QVVBQlVBRmdBWEFCZ0FHUUFhQUJzQUhBQUEvLzhBQVFBSkFBRC8vd0FTQUFBQUFRQUNBQU1BQkFBRkFBY0FDZ0FUQUJRQUZRQVdBQmNBR0FBWkFCb0FHd0FjQUFELy93QUJBQXNBQVAvL0FCSUFBQUFCQUFJQUF3QUVBQVlBQndBTUFCTUFGQUFWQUJZQUZ3QVlBQmtBR2dBYkFCd0FBUC8vQUFFQURRQUEvLzhBQVFBT0FBRC8vd0FTQUFBQUFRQUNBQU1BQkFBRkFBY0FEd0FUQUJRQUZRQVdBQmNBR0FBWkFCb0FHd0FjQUFELy93QVNBQUFBQVFBQ0FBTUFCQUFGQUFjQUVBQVRBQlFBRlFBV0FCY0FHQUFaQUJvQUd3QWNBQUQvL3dBU0FBQUFBUUFDQUFNQUJBQUZBQWNBRVFBVEFCUUFGUUFXQUJjQUdBQVpBQm9BR3dBY0FBRC8vd0FCQUJJQUFQLy9BQklBQUFBQkFBSUFBd0FFQUFVQUJ3QUlBQk1BRkFBVkFCWUFGd0FZQUJrQUdnQWJBQndBSFdGaGJIUUFzR05oYkhRQXVHTmhjMlVBdm1SdWIyMEF4R1p5WVdNQXlteHBaMkVBMUd4cFoyRUE0bXh1ZFcwQThteHZZMndBK0d4dlkyd0EvbXh2WTJ3QkJHeHZZMndCQ214dlkyd0JFR3h2WTJ3QkdHeHZZMndCSUd4dlkyd0JKbXh2WTJ3QkxHeHZZMndCTW14dlkyd0JPRzUxYlhJQlBtOXVkVzBCUkc5eVpHNEJTbkJ1ZFcwQlVITnBibVlCVm5Oek1ERUJYSE56TURJQlluTnpNRE1CYUhOMWNITUJiblJ1ZFcwQmRBQUFBQUlBQUFBQkFBQUFBUUFiQUFBQUFRQWNBQUFBQVFBU0FBQUFBd0FUQUJRQUZRQUFBQVVBSFFBZUFCOEFJQUFoQUFBQUJnQWRBQjRBSHdBZ0FDRUFJZ0FBQUFFQUZ3QUFBQUVBQndBQUFBRUFDUUFBQUFFQUFnQUFBQUVBQ0FBQUFBSUFEQUFOQUFBQUFnQUtBQXNBQUFBQkFBVUFBQUFCQUFRQUFBQUJBQTRBQUFBQkFBTUFBQUFCQUFZQUFBQUJBQkVBQUFBQkFCb0FBQUFCQUJZQUFBQUJBQmdBQUFBQkFBOEFBQUFCQUNNQUFBQUJBQ1FBQUFBQkFDVUFBQUFCQUJBQUFBQUJBQmtBS2dCV0FGNEFaZ0J3QUhnQWdBQ0lBSkFBbUFDZ0FLZ0FzQUM2QU1JQXpBRFVBTndBNUFEc0FQUUEvQUVFQVE0QkZnRWVBU1lCTGdFMkFUNEJSZ0ZPQVZZQllnRnFBWFlCbWdHaUFhb0JzZ0c2QWNJQnlnQUJBQUFBQVFGOEFBTUFBQUFCQkU0QUJnQUFBQUlIRkFjNkFBRUFBQUFCQjFZQUFRQUFBQUVIYUFBQkFBQUFBUWQ2QUFFQUFBQUJCMzRBQVFBQUFBRUhnZ0FCQUFBQUFRZUdBQUVBQUFBQkI0b0FBUUFBQUFFSGpnQUdBQUFBQWdlWUNwNEFBUUFBQUFFTm1nQUdBQUFBQWcya0VLb0FCQUFBQUFFVHBnQUJBQUFBQVJQRUFBRUFBQUFCRTh3QUFRQUFBQUVVSWdBQkFBQUFBUlFxQUFFQUFBQUJGRElBQVFBQUFBRVVOZ0FHQUFBQUFoUStGR0FBQVFBQUFBRVVmQUFCQUFBQUFSU0VBQUVBQUFBQkZMb0FBUUFBQUFFVTZnQUJBQUFBQVJVZ0FBUUFBQUFCRlZZQUFRQUFBQUVXS2dBR0FBQUFBUmxnQUFRQUFBQUJHYndBQmdBQUFBTWEvQnNhRzFBQUJBQUFBQUViYWdBR0FBQUFBeHVTSHBnaG5nQUdBQUFBRHlHNElrWWk5aVBJSkx3bDBpY0tLR1FwRUNuZUtzNHI0QzBVTG1vdjRnQUJBQUFBQVMvNkFBRUFBQUFCTURRQUJBQUFBQUV3WWdBRUFBQUFBVEJ5QUFFQUFBQUJNSkFBQVFBQUFBRXd4QUFCQUFBQUFURElBQUlCYmdDMEFwZ0I1Z0lSQWhJQ0V3SVVBaFVDRmdJWEFYZ0FnZ0NEQUlRQWhRQ0dBSWNBaUFDSkFJb0Fpd0NNQUkwQWpnQ1BBSkFBa1FDU0FKTUFsQUNWQUpZQWx3Q1lBSm9BbXdDY0FKMEFuZ0NmQUtBQk9RRENBTVFBeGdESUFNb0F6QURPQU5BQTBnRFVBTllBMkFEYUFOd0EzZ0RnQU9JQTVBRG1BT2dBNmdEc0FPNEE4QUQwQVBZQStBRDdBUDBBL3dFQkFRTUJCUUVIQVFrQkN3RU5BUThCRVFFVEFSVUJGd0VaQVJzQkhRRmRBU0VCWHdFbEFTY0JLUUVyQVMwQkx3RXhBVE1CTlFFM0FUb0JQQUUrQVVFQlF3RkZBVWNCU1FGTEFVMEJUd0ZSQVZNQlZRRlhBVmtCV3dGZEFWOEJjZ0YwQVhZQmVRRjdBWDBCZndHQkFZTUJoUUdIQVlrQml3R05BWThCa1FHVEFaVUJsd0daQVpzQm5RR2ZBYUVCb3dHbEFhY0JxUUdyQWEwQnJ3R3hBYk1CdFFHM0Fia0J1d0c5QWI4QndRSERBY1VCeHdISkFjc0J6UUhQQWRFQ21BRHlBZzhDWkFKbEFtWUNad0pvQW1rQ2FnSnJBbXdDYlFLaEFBRUF0QUFLQUJJQUpnQW5BQ3dBTHdBd0FEa0FPd0NoQUtJQW93Q2tBS1VBcGdDbkFLZ0FxUUNxQUtzQXJBQ3RBSzRBcndDd0FMRUFzZ0N6QUxRQXRRQzJBTGNBdUFDNkFMc0F2QUM5QUw0QXZ3REFBTUVBd3dERkFNY0F5UURMQU0wQXp3RFJBTk1BMVFEWEFOa0Eyd0RkQU44QTRRRGpBT1VBNXdEcEFPc0E3UUR2QVBFQTlRRDNBUGtBL0FEK0FRQUJBZ0VFQVFZQkNBRUtBUXdCRGdFUUFSSUJGQUVXQVJnQkdnRWNBUjRCSHdFaUFTTUJKZ0VvQVNvQkxBRXVBVEFCTWdFMEFUWUJPQUU3QVQwQlB3RkNBVVFCUmdGSUFVb0JUQUZPQVZBQlVnRlVBVllCV0FGYUFWd0JYZ0ZnQVhNQmRRRjNBWG9CZkFGK0FZQUJnZ0dFQVlZQmlBR0tBWXdCamdHUUFaSUJsQUdXQVpnQm1nR2NBWjRCb0FHaUFhUUJwZ0dvQWFvQnJBR3VBYkFCc2dHMEFiWUJ1QUc2QWJ3QnZnSEFBY0lCeEFIR0FjZ0J5Z0hNQWM0QjBBSFNBZFlDR0FJYkFtNENid0p3QW5FQ2NnSnpBblFDZFFKMkFuY0NtUUFCQXFZQVJBQ09BSndBckFDOEFNd0EzQURzQVB3QkRBRWNBU29CTWdFNkFVUUJUZ0ZXQVY0QlpnRnVBWGdCZmdHRUFZd0JsQUdhQWFBQnBnR3NBYklCdUFHK0FjUUJ6QUhTQWRvQjRBSG1BZXdCOGdINEFmNENCQUlLQWhBQ0ZnSWNBaUlDS0FJdUFqUUNPZ0pBQWtZQ1RBSlNBbGdDWGdKa0Ftb0NjQUoyQW53Q2dnS0lBbzRDbEFLYUFxQUFCZ0pHQWVjQ2JnSmtBandDV2dBSEFrY0Fld0p2QW1VQ1BRSmJBZlFBQndKSUFIUUNjQUptQWo0Q1hBSDFBQWNDU1FCMUFuRUNad0kvQWwwQjlnQUhBa29CNkFKeUFtZ0NRQUplQWZjQUJ3SkxBZWtDY3dKcEFrRUNYd0g0QUFjQ1RBSHFBblFDYWdKQ0FtQUIrUUFIQWswQjZ3SjFBbXNDUXdKaEFmb0FCd0pPQWV3Q2RnSnNBa1FDWWdIN0FBWUNUd0h0QW5jQ2JRSkZBbU1BQXdJZEFDUUNsd0FEQWg0QUpRS2VBQVFDSHdBbUFoRUNtQUFFQWlBQUp3SVNBcEVBQXdJaEFDZ0NuQUFEQWlJQUtRS2RBQU1DSXdBcUFva0FBd0lrQUNzQ2lnQUVBaGdDSlFBc0FoTUFBZ0ltQUMwQUFnSW5BQzRBQXdJb0FDOENGQUFEQWlrQU1BSVZBQUlDS2dBeEFBSUNLd0F5QUFJQ0xBQXpBQUlDTFFBMEFBSUNMZ0ExQUFJQ0x3QTJBQUlDTUFBM0FBSUNNUUE0QUFNQ01nQTVBaFlBQWdJekFEb0FBd0kwQURzQ0Z3QUNBalVBUEFBQ0FqWUFQUUFDQVY0Qkh3QUNBV0FCSXdBQ0FsQUFFd0FDQWxFQUZBQUNBbElBRlFBQ0FsTUFGZ0FDQWxRQUZ3QUNBbFVBR0FBQ0FsWUFHUUFDQWxjQUdnQUNBbGdBR3dBQ0Fsa0FIQUFDQWp3Q1dnQUNBajBDV3dBQ0FqNENYQUFDQWo4Q1hRQUNBa0FDWGdBQ0FrRUNYd0FDQWtJQ1lBQUNBa01DWVFBQ0FrUUNZZ0FDQWtVQ1l3QUNBbEFBRXdBQ0FsRUFGQUFDQWxJQUZRQUNBbE1BRmdBQ0FsUUFGd0FDQWxVQUdBQUNBbFlBR1FBQ0FsY0FHZ0FDQWxnQUd3QUNBbGtBSEFBQ0FBWUFFd0FjQUFBQVJBQmRBQW9CSUFFZ0FDUUJKQUVrQUNVQ1BBSkZBQ1lDVUFKakFEQUFBd0FBQUFJQUZBQWFBQUVBSUFBQkFBQUFKZ0FCQUFFQVR3QUJBQUVBZVFBQkFBRUFUd0FEQUFBQUFnQVVBQm9BQVFBZ0FBRUFBQUFtQUFFQUFRQXZBQUVBQVFCNUFBRUFBUUF2QUFJQURnQUVBVjBCWGdGZkFXQUFBUUFFQVI4QklBRWpBU1FBQWdBT0FBUUJYUUZlQVY4QllBQUJBQVFCSHdFZ0FTTUJKQUFCQUFZQnpBQUJBQUVBVEFBQkFBWUJ6QUFCQUFFQVRBQUJBQVlCekFBQkFBRUFUQUFCQUFZQnpBQUJBQUVBVEFBQkFBWUJ6QUFCQUFFQVRBQUNBQW9BQWdLWUFwZ0FBUUFDQUFvQjFnQURBQUlBR2dHUUFBRUFGQUFBQUFFQUFBQW5BQUVBQVFLWUFBRUF1UUFrQUNVQUpnQW5BQ2dBS1FBcUFDc0FMQUF0QUM0QUx3QXdBREVBTWdBekFEUUFOUUEyQURjQU9BQTVBRG9BT3dBOEFEMEFnZ0NEQUlRQWhRQ0dBSWNBaUFDSkFJb0Fpd0NNQUkwQWpnQ1BBSkFBa1FDU0FKTUFsQUNWQUpZQWx3Q1lBSm9BbXdDY0FKMEFuZ0NmQUtBQXdnREVBTVlBeUFES0FNd0F6Z0RRQU5JQTFBRFdBTmdBMmdEY0FONEE0QURpQU9RQTVnRG9BT29BN0FEdUFQQUE4Z0QwQVBZQStBRDdBUDBBL3dFQkFRTUJCUUVIQVFrQkN3RU5BUThCRVFFVEFSVUJGd0VaQVJzQkhRRWZBU0VCSXdFbEFTY0JLUUVyQVMwQkx3RXhBVE1CTlFFM0FUa0JPZ0U4QVQ0QlFRRkRBVVVCUndGSkFVc0JUUUZQQVZFQlV3RlZBVmNCV1FGYkFWMEJYd0Z5QVhRQmRnRjRBWGtCZXdGOUFYOEJnUUdEQVlVQmh3R0pBWXNCalFHUEFaRUJrd0dWQVpjQm1RR2JBWjBCbndHaEFhTUJwUUduQWFrQnF3R3RBYThCc1FHekFiVUJ0d0c1QWJzQnZRRy9BY0VCd3dIRkFjY0J5UUhMQWMwQnp3SFJBZzhBQVFDNUFDUUFKUUFtQUNjQUtBQXBBQ29BS3dBc0FDMEFMZ0F2QURBQU1RQXlBRE1BTkFBMUFEWUFOd0E0QURrQU9nQTdBRHdBUFFDQ0FJTUFoQUNGQUlZQWh3Q0lBSWtBaWdDTEFJd0FqUUNPQUk4QWtBQ1JBSklBa3dDVUFKVUFsZ0NYQUpnQW1nQ2JBSndBblFDZUFKOEFvQURDQU1RQXhnRElBTW9BekFET0FOQUEwZ0RVQU5ZQTJBRGFBTndBM2dEZ0FPSUE1QURtQU9nQTZnRHNBTzRBOEFEeUFQUUE5Z0Q0QVBzQS9RRC9BUUVCQXdFRkFRY0JDUUVMQVEwQkR3RVJBUk1CRlFFWEFSa0JHd0VkQVI4QklRRWpBU1VCSndFcEFTc0JMUUV2QVRFQk13RTFBVGNCT1FFNkFUd0JQZ0ZCQVVNQlJRRkhBVWtCU3dGTkFVOEJVUUZUQVZVQlZ3RlpBVnNCWFFGZkFYSUJkQUYyQVhnQmVRRjdBWDBCZndHQkFZTUJoUUdIQVlrQml3R05BWThCa1FHVEFaVUJsd0daQVpzQm5RR2ZBYUVCb3dHbEFhY0JxUUdyQWEwQnJ3R3hBYk1CdFFHM0Fia0J1d0c5QWI4QndRSERBY1VCeHdISkFjc0J6UUhQQWRFQ0R3QURBQUVBR2dBQkFCUUFBUUdRQUFFQUFBQW5BQUVBQVFLWUFBRUF1UUFrQUNVQUpnQW5BQ2dBS1FBcUFDc0FMQUF0QUM0QUx3QXdBREVBTWdBekFEUUFOUUEyQURjQU9BQTVBRG9BT3dBOEFEMEFnZ0NEQUlRQWhRQ0dBSWNBaUFDSkFJb0Fpd0NNQUkwQWpnQ1BBSkFBa1FDU0FKTUFsQUNWQUpZQWx3Q1lBSm9BbXdDY0FKMEFuZ0NmQUtBQXdnREVBTVlBeUFES0FNd0F6Z0RRQU5JQTFBRFdBTmdBMmdEY0FONEE0QURpQU9RQTVnRG9BT29BN0FEdUFQQUE4Z0QwQVBZQStBRDdBUDBBL3dFQkFRTUJCUUVIQVFrQkN3RU5BUThCRVFFVEFSVUJGd0VaQVJzQkhRRWZBU0VCSXdFbEFTY0JLUUVyQVMwQkx3RXhBVE1CTlFFM0FUa0JPZ0U4QVQ0QlFRRkRBVVVCUndGSkFVc0JUUUZQQVZFQlV3RlZBVmNCV1FGYkFWMEJYd0Z5QVhRQmRnRjRBWGtCZXdGOUFYOEJnUUdEQVlVQmh3R0pBWXNCalFHUEFaRUJrd0dWQVpjQm1RR2JBWjBCbndHaEFhTUJwUUduQWFrQnF3R3RBYThCc1FHekFiVUJ0d0c1QWJzQnZRRy9BY0VCd3dIRkFjY0J5UUhMQWMwQnp3SFJBZzhBQVFDNUFDUUFKUUFtQUNjQUtBQXBBQ29BS3dBc0FDMEFMZ0F2QURBQU1RQXlBRE1BTkFBMUFEWUFOd0E0QURrQU9nQTdBRHdBUFFDQ0FJTUFoQUNGQUlZQWh3Q0lBSWtBaWdDTEFJd0FqUUNPQUk4QWtBQ1JBSklBa3dDVUFKVUFsZ0NYQUpnQW1nQ2JBSndBblFDZUFKOEFvQURDQU1RQXhnRElBTW9BekFET0FOQUEwZ0RVQU5ZQTJBRGFBTndBM2dEZ0FPSUE1QURtQU9nQTZnRHNBTzRBOEFEeUFQUUE5Z0Q0QVBzQS9RRC9BUUVCQXdFRkFRY0JDUUVMQVEwQkR3RVJBUk1CRlFFWEFSa0JHd0VkQVI4QklRRWpBU1VCSndFcEFTc0JMUUV2QVRFQk13RTFBVGNCT1FFNkFUd0JQZ0ZCQVVNQlJRRkhBVWtCU3dGTkFVOEJVUUZUQVZVQlZ3RlpBVnNCWFFGZkFYSUJkQUYyQVhnQmVRRjdBWDBCZndHQkFZTUJoUUdIQVlrQml3R05BWThCa1FHVEFaVUJsd0daQVpzQm5RR2ZBYUVCb3dHbEFhY0JxUUdyQWEwQnJ3R3hBYk1CdFFHM0Fia0J1d0c5QWI4QndRSERBY1VCeHdISkFjc0J6UUhQQWRFQ0R3QUNBQW9BQWdLWUFwZ0FBUUFDQUFvQjFnQURBQUlBR2dHUUFBRUFGQUFBQUFFQUFBQW5BQUVBQVFLWUFBRUF1UUFrQUNVQUpnQW5BQ2dBS1FBcUFDc0FMQUF0QUM0QUx3QXdBREVBTWdBekFEUUFOUUEyQURjQU9BQTVBRG9BT3dBOEFEMEFnZ0NEQUlRQWhRQ0dBSWNBaUFDSkFJb0Fpd0NNQUkwQWpnQ1BBSkFBa1FDU0FKTUFsQUNWQUpZQWx3Q1lBSm9BbXdDY0FKMEFuZ0NmQUtBQXdnREVBTVlBeUFES0FNd0F6Z0RRQU5JQTFBRFdBTmdBMmdEY0FONEE0QURpQU9RQTVnRG9BT29BN0FEdUFQQUE4Z0QwQVBZQStBRDdBUDBBL3dFQkFRTUJCUUVIQVFrQkN3RU5BUThCRVFFVEFSVUJGd0VaQVJzQkhRRWZBU0VCSXdFbEFTY0JLUUVyQVMwQkx3RXhBVE1CTlFFM0FUa0JPZ0U4QVQ0QlFRRkRBVVVCUndGSkFVc0JUUUZQQVZFQlV3RlZBVmNCV1FGYkFWMEJYd0Z5QVhRQmRnRjRBWGtCZXdGOUFYOEJnUUdEQVlVQmh3R0pBWXNCalFHUEFaRUJrd0dWQVpjQm1RR2JBWjBCbndHaEFhTUJwUUduQWFrQnF3R3RBYThCc1FHekFiVUJ0d0c1QWJzQnZRRy9BY0VCd3dIRkFjY0J5UUhMQWMwQnp3SFJBZzhBQVFDNUFDUUFKUUFtQUNjQUtBQXBBQ29BS3dBc0FDMEFMZ0F2QURBQU1RQXlBRE1BTkFBMUFEWUFOd0E0QURrQU9nQTdBRHdBUFFDQ0FJTUFoQUNGQUlZQWh3Q0lBSWtBaWdDTEFJd0FqUUNPQUk4QWtBQ1JBSklBa3dDVUFKVUFsZ0NYQUpnQW1nQ2JBSndBblFDZUFKOEFvQURDQU1RQXhnRElBTW9BekFET0FOQUEwZ0RVQU5ZQTJBRGFBTndBM2dEZ0FPSUE1QURtQU9nQTZnRHNBTzRBOEFEeUFQUUE5Z0Q0QVBzQS9RRC9BUUVCQXdFRkFRY0JDUUVMQVEwQkR3RVJBUk1CRlFFWEFSa0JHd0VkQVI4QklRRWpBU1VCSndFcEFTc0JMUUV2QVRFQk13RTFBVGNCT1FFNkFUd0JQZ0ZCQVVNQlJRRkhBVWtCU3dGTkFVOEJVUUZUQVZVQlZ3RlpBVnNCWFFGZkFYSUJkQUYyQVhnQmVRRjdBWDBCZndHQkFZTUJoUUdIQVlrQml3R05BWThCa1FHVEFaVUJsd0daQVpzQm5RR2ZBYUVCb3dHbEFhY0JxUUdyQWEwQnJ3R3hBYk1CdFFHM0Fia0J1d0c5QWI4QndRSERBY1VCeHdISkFjc0J6UUhQQWRFQ0R3QURBQUVBR2dBQkFCUUFBUUdRQUFFQUFBQW5BQUVBQVFLWUFBRUF1UUFrQUNVQUpnQW5BQ2dBS1FBcUFDc0FMQUF0QUM0QUx3QXdBREVBTWdBekFEUUFOUUEyQURjQU9BQTVBRG9BT3dBOEFEMEFnZ0NEQUlRQWhRQ0dBSWNBaUFDSkFJb0Fpd0NNQUkwQWpnQ1BBSkFBa1FDU0FKTUFsQUNWQUpZQWx3Q1lBSm9BbXdDY0FKMEFuZ0NmQUtBQXdnREVBTVlBeUFES0FNd0F6Z0RRQU5JQTFBRFdBTmdBMmdEY0FONEE0QURpQU9RQTVnRG9BT29BN0FEdUFQQUE4Z0QwQVBZQStBRDdBUDBBL3dFQkFRTUJCUUVIQVFrQkN3RU5BUThCRVFFVEFSVUJGd0VaQVJzQkhRRWZBU0VCSXdFbEFTY0JLUUVyQVMwQkx3RXhBVE1CTlFFM0FUa0JPZ0U4QVQ0QlFRRkRBVVVCUndGSkFVc0JUUUZQQVZFQlV3RlZBVmNCV1FGYkFWMEJYd0Z5QVhRQmRnRjRBWGtCZXdGOUFYOEJnUUdEQVlVQmh3R0pBWXNCalFHUEFaRUJrd0dWQVpjQm1RR2JBWjBCbndHaEFhTUJwUUduQWFrQnF3R3RBYThCc1FHekFiVUJ0d0c1QWJzQnZRRy9BY0VCd3dIRkFjY0J5UUhMQWMwQnp3SFJBZzhBQVFDNUFDUUFKUUFtQUNjQUtBQXBBQ29BS3dBc0FDMEFMZ0F2QURBQU1RQXlBRE1BTkFBMUFEWUFOd0E0QURrQU9nQTdBRHdBUFFDQ0FJTUFoQUNGQUlZQWh3Q0lBSWtBaWdDTEFJd0FqUUNPQUk4QWtBQ1JBSklBa3dDVUFKVUFsZ0NYQUpnQW1nQ2JBSndBblFDZUFKOEFvQURDQU1RQXhnRElBTW9BekFET0FOQUEwZ0RVQU5ZQTJBRGFBTndBM2dEZ0FPSUE1QURtQU9nQTZnRHNBTzRBOEFEeUFQUUE5Z0Q0QVBzQS9RRC9BUUVCQXdFRkFRY0JDUUVMQVEwQkR3RVJBUk1CRlFFWEFSa0JHd0VkQVI4QklRRWpBU1VCSndFcEFTc0JMUUV2QVRFQk13RTFBVGNCT1FFNkFUd0JQZ0ZCQVVNQlJRRkhBVWtCU3dGTkFVOEJVUUZUQVZVQlZ3RlpBVnNCWFFGZkFYSUJkQUYyQVhnQmVRRjdBWDBCZndHQkFZTUJoUUdIQVlrQml3R05BWThCa1FHVEFaVUJsd0daQVpzQm5RR2ZBYUVCb3dHbEFhY0JxUUdyQWEwQnJ3R3hBYk1CdFFHM0Fia0J1d0c5QWI4QndRSERBY1VCeHdISkFjc0J6UUhQQWRFQ0R3QUJBQjRBQWdBS0FCUUFBUUFFQWc4QUFnQXRBQUVBQkFJYkFBSUFUUUFCQUFJQWp3Q3ZBQUVBQmdJekFBSUFBUUFUQUJ3QUFBQUNBRTRBSkFIbkFIc0FkQUIxQWVnQjZRSHFBZXNCN0FIdEFoMENIZ0lmQWlBQ0lRSWlBaU1DSkFJbEFpWUNKd0lvQWlrQ0tnSXJBaXdDTFFJdUFpOENNQUl4QWpJQ013STBBalVDTmdBQ0FBSUFFd0FjQUFBQVJBQmRBQW9BQVFBR0Fsc0FBZ0FCQUJNQUhBQUFBQUVBQmdKUkFBSUFBUUFUQUJ3QUFBQUJBQVlCMUFBQkFBRUFFZ0FCQUFZQ1d3QUNBQUVBRXdBY0FBQUFBd0FCQUJ3QUFRQVNBQUFBQVFBQUFDY0FBZ0FCQW00Q2R3QUFBQUVBQVFIbUFBTUFBUUFjQUFFQUVnQUFBQUVBQUFBbkFBSUFBUUp1QW5jQUFBQUNBQUVDWkFKdEFBQUFBUUFHQWRrQUFnQUJBRVFBWFFBQUFBSUFMZ0FVQWp3Q1BRSStBajhDUUFKQkFrSUNRd0pFQWtVQ1VBSlJBbElDVXdKVUFsVUNWZ0pYQWxnQ1dRQUNBQUlBRXdBY0FBQUNXZ0pqQUFvQUFnQXVBQlFDUEFJOUFqNENQd0pBQWtFQ1FnSkRBa1FDUlFBVEFCUUFGUUFXQUJjQUdBQVpBQm9BR3dBY0FBSUFBUUpRQW1NQUFBQUNBQzRBRkFKYUFsc0NYQUpkQWw0Q1h3SmdBbUVDWWdKakFsQUNVUUpTQWxNQ1ZBSlZBbFlDVndKWUFsa0FBZ0FDQUJNQUhBQUFBandDUlFBS0FBSUFMZ0FVQUJNQUZBQVZBQllBRndBWUFCa0FHZ0FiQUJ3Q1dnSmJBbHdDWFFKZUFsOENZQUpoQW1JQ1l3QUNBQUlDUEFKRkFBQUNVQUpaQUFvQUFRRFdBQUVBQ0FBTEFCZ0FNQUJHQUZvQWJBQitBSTRBbmdDc0FMb0F4QUtYQUFzQVRBQmRBRlFBV0FCTUFFZ0FWUUJIQUVRQUlRS2NBQW9BUmdCWUFFUUFSd0JWQUVRQVJ3QlNBQ0VDbWdBSkFFY0FTQUJWQUVnQVJnQkxBRVFBSVFLZUFBZ0FSQUJWQUZVQVRBQkZBRVFBSVFLY0FBZ0FWZ0JVQUZnQVJBQlZBRWdBSVFLYUFBY0FWUUJNQUVvQVN3QlhBQ0VDa1FBSEFFUUFSUUJFQUUwQVVnQWhBcGNBQmdCUEFFZ0FTUUJYQUNFQ2tRQUdBRWNBVWdCYUFGRUFJUUtlQUFRQVdBQlRBQ0VDa3dBRUFFc0FWd0FoQUFFQUFRQWZBQUlCb0FETkFqd0NQUUkrQWo4Q1FBSkJBa0lDUXdKRUFrVUFKQUFsQUNZQUp3QW9BQ2tBS2dBckFDd0FMUUF1QUM4QU1BQXhBRElBTXdBMEFEVUFOZ0EzQURnQU9RQTZBRHNBUEFBOUFYZ0FnZ0NEQUlRQWhRQ0dBSWNBaUFDSkFJb0Fpd0NNQUkwQWpnQ1BBSkFBa1FDU0FKTUFsQUNWQUpZQWx3Q1lBSm9BbXdDY0FKMEFuZ0NmQUtBQk9RRENBTVFBeGdESUFNb0F6QURPQU5BQTBnRFVBTllBMkFEYUFOd0EzZ0RnQU9JQTVBRG1BT2dBNmdEc0FPNEE4QUQwQVBZQStBRDdBUDBBL3dFQkFRTUJCUUVIQVFrQkN3RU5BUThCRVFFVEFSVUJGd0VaQVJzQkhRRWZBU0VCSXdFbEFTY0JLUUVyQVMwQkx3RXhBVE1CTlFFM0FUb0JQQUUrQVVFQlF3RkZBVWNCU1FGTEFVMEJUd0ZSQVZNQlZRRlhBVmtCV3dGZEFWOEJjZ0YwQVhZQmVRRjdBWDBCZndHQkFZTUJoUUdIQVlrQml3R05BWThCa1FHVEFaVUJsd0daQVpzQm5RR2ZBYUVCb3dHbEFhY0JxUUdyQWEwQnJ3R3hBYk1CdFFHM0Fia0J1d0c5QWI4QndRSERBY1VCeHdISkFjc0J6UUhQQWRFQThnSVBBbEFDVVFKU0FsTUNWQUpWQWxZQ1Z3SllBbGtBQVFETkFCTUFGQUFWQUJZQUZ3QVlBQmtBR2dBYkFCd0FSQUJGQUVZQVJ3QklBRWtBU2dCTEFFd0FUUUJPQUU4QVVBQlJBRklBVXdCVUFGVUFWZ0JYQUZnQVdRQmFBRnNBWEFCZEFLRUFvZ0NqQUtRQXBRQ21BS2NBcUFDcEFLb0Fxd0NzQUswQXJnQ3ZBTEFBc1FDeUFMTUF0QUMxQUxZQXR3QzRBTG9BdXdDOEFMMEF2Z0MvQU1BQXdRRERBTVVBeHdESkFNc0F6UURQQU5FQTB3RFZBTmNBMlFEYkFOMEEzd0RoQU9NQTVRRG5BT2tBNndEdEFPOEE4UUQxQVBjQStRRDhBUDRCQUFFQ0FRUUJCZ0VJQVFvQkRBRU9BUkFCRWdFVUFSWUJHQUVhQVJ3QkhnRWdBU0lCSkFFbUFTZ0JLZ0VzQVM0Qk1BRXlBVFFCTmdFNEFUc0JQUUUvQVVJQlJBRkdBVWdCU2dGTUFVNEJVQUZTQVZRQlZnRllBVm9CWEFGZUFXQUJjd0YxQVhjQmVnRjhBWDRCZ0FHQ0FZUUJoZ0dJQVlvQmpBR09BWkFCa2dHVUFaWUJtQUdhQVp3Qm5nR2dBYUlCcEFHbUFhZ0JxZ0dzQWE0QnNBR3lBYlFCdGdHNEFib0J2QUcrQWNBQndnSEVBY1lCeUFIS0Fjd0J6Z0hRQWRJQ0dBSWJBbG9DV3dKY0FsMENYZ0pmQW1BQ1lRSmlBbU1BQXdBQUFBRUFFZ0FCQUJnQUFRQUFBQ2NBQVFBQkFkWUFBZ0FNQUNRQVBRQUFBRVFBWFFBYUFJSUFtQUEwQUpvQXVBQkxBTG9BOGdCcUFQUUErUUNqQVBzQlB3Q3BBVUVCWUFEdUFYSUIwZ0VPQWc4Q0R3RnZBaGdDR0FGd0Foc0NHd0Z4QUFFQk9nQUZBQkFBWWdDRUFKWUE2QUFLQUJZQUhBQWlBQ2dBTGdBMEFEb0FRQUJHQUV3Q2xRQUNBRW9DaEFBQ0FDb0IwZ0FDQUZ3QktnQUNBRmdBNndBQ0FFd0JsZ0FDQUVnQjBRQUNBRHdCS1FBQ0FEZ0E2Z0FDQUN3QmxRQUNBQ2dBQkFBS0FCQUFGZ0FjQUxnQUFnQlNBTEVBQWdCTUFKZ0FBZ0F5QUpFQUFnQXNBQUlBQmdBTUFMOEFBZ0JjQUo4QUFnQThBQW9BRmdBY0FDSUFLQUF1QURRQU9nQkFBRVlBVEFLVkFBSUFTZ0tFQUFJQUtnSFNBQUlBWEFFcUFBSUFXQURyQUFJQVRBR1dBQUlBU0FIUkFBSUFQQUVwQUFJQU9BRHFBQUlBTEFHVkFBSUFLQUFLQUJZQUhBQWlBQ2dBTGdBMEFEb0FRQUJHQUV3Q2xRQUNBRW9DaEFBQ0FDb0IwZ0FDQUZ3QktnQUNBRmdBNndBQ0FFd0JsZ0FDQUVnQjBRQUNBRHdCS1FBQ0FEZ0E2Z0FDQUN3QmxRQUNBQ2dBQVFBRkFHRUFhZ0IyQVdrQmF3QURBQUFBQVFBU0FBRUFHQUFCQUFBQUp3QUJBQUVBU1FBQkFBRUFTUUFEQUFBQUFRQVNBQUVBR0FBQkFBQUFLQUFCQUFFQVNRQUJBQTBBUlFCTEFFNEFUd0RBQU9jQTZRRDVBUHdBL2dFQUFRSUJCQUFEQUFBQUFRQVNBQUVBR0FBQkFBQUFLUUFCQUFFQVNRQUJBQVVBVndFa0FTWUJLQUZnQUFFQUtnQUJBQWdBQkFBS0FCQUFGZ0FjQWc0QUFnQlBBZzBBQWdCTUFnMEFBZ0lZQWpnQUFnQk5BQUVBQVFCSkFBTUFBUUFhQUFFQUZBQUJBWkFBQVFBQUFDa0FBUUFCQUtFQUFRQzVBQ1FBSlFBbUFDY0FLQUFwQUNvQUt3QXNBQzBBTGdBdkFEQUFNUUF5QURNQU5BQTFBRFlBTndBNEFEa0FPZ0E3QUR3QVBRQ0NBSU1BaEFDRkFJWUFod0NJQUlrQWlnQ0xBSXdBalFDT0FJOEFrQUNSQUpJQWt3Q1VBSlVBbGdDWEFKZ0FtZ0NiQUp3QW5RQ2VBSjhBb0FEQ0FNUUF4Z0RJQU1vQXpBRE9BTkFBMGdEVUFOWUEyQURhQU53QTNnRGdBT0lBNUFEbUFPZ0E2Z0RzQU80QThBRHlBUFFBOWdENEFQc0EvUUQvQVFFQkF3RUZBUWNCQ1FFTEFRMEJEd0VSQVJNQkZRRVhBUmtCR3dFZEFSOEJJUUVqQVNVQkp3RXBBU3NCTFFFdkFURUJNd0UxQVRjQk9RRTZBVHdCUGdGQkFVTUJSUUZIQVVrQlN3Rk5BVThCVVFGVEFWVUJWd0ZaQVZzQlhRRmZBWElCZEFGMkFYZ0JlUUY3QVgwQmZ3R0JBWU1CaFFHSEFZa0Jpd0dOQVk4QmtRR1RBWlVCbHdHWkFac0JuUUdmQWFFQm93R2xBYWNCcVFHckFhMEJyd0d4QWJNQnRRRzNBYmtCdXdHOUFiOEJ3UUhEQWNVQnh3SEpBY3NCelFIUEFkRUNEd0FCQUxrQUpBQWxBQ1lBSndBb0FDa0FLZ0FyQUN3QUxRQXVBQzhBTUFBeEFESUFNd0EwQURVQU5nQTNBRGdBT1FBNkFEc0FQQUE5QUlJQWd3Q0VBSVVBaGdDSEFJZ0FpUUNLQUlzQWpBQ05BSTRBandDUUFKRUFrZ0NUQUpRQWxRQ1dBSmNBbUFDYUFKc0FuQUNkQUo0QW53Q2dBTUlBeEFER0FNZ0F5Z0RNQU00QTBBRFNBTlFBMWdEWUFOb0EzQURlQU9BQTRnRGtBT1lBNkFEcUFPd0E3Z0R3QVBJQTlBRDJBUGdBK3dEOUFQOEJBUUVEQVFVQkJ3RUpBUXNCRFFFUEFSRUJFd0VWQVJjQkdRRWJBUjBCSHdFaEFTTUJKUUVuQVNrQkt3RXRBUzhCTVFFekFUVUJOd0U1QVRvQlBBRStBVUVCUXdGRkFVY0JTUUZMQVUwQlR3RlJBVk1CVlFGWEFWa0JXd0ZkQVY4QmNnRjBBWFlCZUFGNUFYc0JmUUYvQVlFQmd3R0ZBWWNCaVFHTEFZMEJqd0dSQVpNQmxRR1hBWmtCbXdHZEFaOEJvUUdqQWFVQnB3R3BBYXNCclFHdkFiRUJzd0cxQWJjQnVRRzdBYjBCdndIQkFjTUJ4UUhIQWNrQnl3SE5BYzhCMFFJUEFBTUFBZ0FhQVpBQUFRQVVBQUFBQVFBQUFDa0FBUUFCQUtFQUFRQzVBQ1FBSlFBbUFDY0FLQUFwQUNvQUt3QXNBQzBBTGdBdkFEQUFNUUF5QURNQU5BQTFBRFlBTndBNEFEa0FPZ0E3QUR3QVBRQ0NBSU1BaEFDRkFJWUFod0NJQUlrQWlnQ0xBSXdBalFDT0FJOEFrQUNSQUpJQWt3Q1VBSlVBbGdDWEFKZ0FtZ0NiQUp3QW5RQ2VBSjhBb0FEQ0FNUUF4Z0RJQU1vQXpBRE9BTkFBMGdEVUFOWUEyQURhQU53QTNnRGdBT0lBNUFEbUFPZ0E2Z0RzQU80QThBRHlBUFFBOWdENEFQc0EvUUQvQVFFQkF3RUZBUWNCQ1FFTEFRMEJEd0VSQVJNQkZRRVhBUmtCR3dFZEFSOEJJUUVqQVNVQkp3RXBBU3NCTFFFdkFURUJNd0UxQVRjQk9RRTZBVHdCUGdGQkFVTUJSUUZIQVVrQlN3Rk5BVThCVVFGVEFWVUJWd0ZaQVZzQlhRRmZBWElCZEFGMkFYZ0JlUUY3QVgwQmZ3R0JBWU1CaFFHSEFZa0Jpd0dOQVk4QmtRR1RBWlVCbHdHWkFac0JuUUdmQWFFQm93R2xBYWNCcVFHckFhMEJyd0d4QWJNQnRRRzNBYmtCdXdHOUFiOEJ3UUhEQWNVQnh3SEpBY3NCelFIUEFkRUNEd0FCQUxrQUpBQWxBQ1lBSndBb0FDa0FLZ0FyQUN3QUxRQXVBQzhBTUFBeEFESUFNd0EwQURVQU5nQTNBRGdBT1FBNkFEc0FQQUE5QUlJQWd3Q0VBSVVBaGdDSEFJZ0FpUUNLQUlzQWpBQ05BSTRBandDUUFKRUFrZ0NUQUpRQWxRQ1dBSmNBbUFDYUFKc0FuQUNkQUo0QW53Q2dBTUlBeEFER0FNZ0F5Z0RNQU00QTBBRFNBTlFBMWdEWUFOb0EzQURlQU9BQTRnRGtBT1lBNkFEcUFPd0E3Z0R3QVBJQTlBRDJBUGdBK3dEOUFQOEJBUUVEQVFVQkJ3RUpBUXNCRFFFUEFSRUJFd0VWQVJjQkdRRWJBUjBCSHdFaEFTTUJKUUVuQVNrQkt3RXRBUzhCTVFFekFUVUJOd0U1QVRvQlBBRStBVUVCUXdGRkFVY0JTUUZMQVUwQlR3RlJBVk1CVlFGWEFWa0JXd0ZkQVY4QmNnRjBBWFlCZUFGNUFYc0JmUUYvQVlFQmd3R0ZBWWNCaVFHTEFZMEJqd0dSQVpNQmxRR1hBWmtCbXdHZEFaOEJvUUdqQWFVQnB3R3BBYXNCclFHdkFiRUJzd0cxQWJjQnVRRzdBYjBCdndIQkFjTUJ4UUhIQWNrQnl3SE5BYzhCMFFJUEFBTUFBQUFCQUJJQUFRQVlBQUVBQUFBcEFBRUFBUUEwQUFFQUJRQXRBRW9BVFFCVEFGd0FBd0FHQUQ0QVJBQk1BRlFBWEFCa0FBRUFIZ0FCQUd3QUFRQUFBQ2tBQVFBT0FDWUFKd0FzQUM4QU1BQTVBRHNBUmdCSEFFd0FUd0JRQUZrQVd3QUJBQUVBQXdBQkFBSUFNZ0JTQUFFQUFnQXZBRThBQVFBQ0FDb0FTZ0FCQUFJQUxBQk1BQUVBQWdBMkFGWUFBUUFQQUFNQUJBQVBBQkFBRVFBZEFCNEFJZ0I5QWRNQjFBSFdBZGtCNEFIbEFBTUFCZ0JBQUVZQVRnQldBRjRBWmdBQkFDQUFBZ0J1QUk0QUFRQUFBQ2tBQVFBT0FDWUFKd0FzQUM4QU1BQTVBRHNBUmdCSEFFd0FUd0JRQUZrQVd3QUJBQUVBQXdBQkFBSUFNZ0JTQUFFQUFnQXZBRThBQVFBQ0FDb0FTZ0FCQUFJQUxBQk1BQUVBQWdBMkFGWUFBUUFPQUNZQUp3QXNBQzhBTUFBNUFEc0FSZ0JIQUV3QVR3QlFBRmtBV3dBQkFBOEFBd0FFQUE4QUVBQVJBQjBBSGdBaUFIMEIwd0hVQWRZQjJRSGdBZVVBQXdBR0FFSUFTQUJRQUZnQVlBQm9BQUVBSWdBREFIQUFrQUN3QUFFQUFBQXBBQUVBRGdBbUFDY0FMQUF2QURBQU9RQTdBRVlBUndCTUFFOEFVQUJaQUZzQUFRQUJBQU1BQVFBQ0FESUFVZ0FCQUFJQUx3QlBBQUVBQWdBcUFFb0FBUUFDQUN3QVRBQUJBQUlBTmdCV0FBRUFEZ0FtQUNjQUxBQXZBREFBT1FBN0FFWUFSd0JNQUU4QVVBQlpBRnNBQVFBT0FDWUFKd0FzQUM4QU1BQTVBRHNBUmdCSEFFd0FUd0JRQUZrQVd3QUJBQThBQXdBRUFBOEFFQUFSQUIwQUhnQWlBSDBCMHdIVUFkWUIyUUhnQWVVQUF3QUdBRVFBU2dCU0FGb0FZZ0JxQUFFQUpBQUVBSElBa2dDeUFOSUFBUUFBQUNrQUFRQU9BQ1lBSndBc0FDOEFNQUE1QURzQVJnQkhBRXdBVHdCUUFGa0FXd0FCQUFFQUF3QUJBQUlBTWdCU0FBRUFBZ0F2QUU4QUFRQUNBQ29BU2dBQkFBSUFMQUJNQUFFQUFnQTJBRllBQVFBT0FDWUFKd0FzQUM4QU1BQTVBRHNBUmdCSEFFd0FUd0JRQUZrQVd3QUJBQTRBSmdBbkFDd0FMd0F3QURrQU93QkdBRWNBVEFCUEFGQUFXUUJiQUFFQURnQW1BQ2NBTEFBdkFEQUFPUUE3QUVZQVJ3Qk1BRThBVUFCWkFGc0FBUUFQQUFNQUJBQVBBQkFBRVFBZEFCNEFJZ0I5QWRNQjFBSFdBZGtCNEFIbEFBTUFCZ0JHQUV3QVZBQmNBR1FBYkFBQkFDWUFCUUIwQUpRQXRBRFVBUFFBQVFBQUFDa0FBUUFPQUNZQUp3QXNBQzhBTUFBNUFEc0FSZ0JIQUV3QVR3QlFBRmtBV3dBQkFBRUFBd0FCQUFJQU1nQlNBQUVBQWdBdkFFOEFBUUFDQUNvQVNnQUJBQUlBTEFCTUFBRUFBZ0EyQUZZQUFRQU9BQ1lBSndBc0FDOEFNQUE1QURzQVJnQkhBRXdBVHdCUUFGa0FXd0FCQUE0QUpnQW5BQ3dBTHdBd0FEa0FPd0JHQUVjQVRBQlBBRkFBV1FCYkFBRUFEZ0FtQUNjQUxBQXZBREFBT1FBN0FFWUFSd0JNQUU4QVVBQlpBRnNBQVFBT0FDWUFKd0FzQUM4QU1BQTVBRHNBUmdCSEFFd0FUd0JRQUZrQVd3QUJBQThBQXdBRUFBOEFFQUFSQUIwQUhnQWlBSDBCMHdIVUFkWUIyUUhnQWVVQUF3QUdBRWdBVGdCV0FGNEFaZ0J1QUFFQUtBQUdBSFlBbGdDMkFOWUE5Z0VXQUFFQUFBQXBBQUVBRGdBbUFDY0FMQUF2QURBQU9RQTdBRVlBUndCTUFFOEFVQUJaQUZzQUFRQUJBQU1BQVFBQ0FESUFVZ0FCQUFJQUx3QlBBQUVBQWdBcUFFb0FBUUFDQUN3QVRBQUJBQUlBTmdCV0FBRUFEZ0FtQUNjQUxBQXZBREFBT1FBN0FFWUFSd0JNQUU4QVVBQlpBRnNBQVFBT0FDWUFKd0FzQUM4QU1BQTVBRHNBUmdCSEFFd0FUd0JRQUZrQVd3QUJBQTRBSmdBbkFDd0FMd0F3QURrQU93QkdBRWNBVEFCUEFGQUFXUUJiQUFFQURnQW1BQ2NBTEFBdkFEQUFPUUE3QUVZQVJ3Qk1BRThBVUFCWkFGc0FBUUFPQUNZQUp3QXNBQzhBTUFBNUFEc0FSZ0JIQUV3QVR3QlFBRmtBV3dBQkFBOEFBd0FFQUE4QUVBQVJBQjBBSGdBaUFIMEIwd0hVQWRZQjJRSGdBZVVBQXdBR0FFb0FVQUJZQUdBQWFBQndBQUVBS2dBSEFIZ0FtQUM0QU5nQStBRVlBVGdBQVFBQUFDa0FBUUFPQUNZQUp3QXNBQzhBTUFBNUFEc0FSZ0JIQUV3QVR3QlFBRmtBV3dBQkFBRUFBd0FCQUFJQU1nQlNBQUVBQWdBdkFFOEFBUUFDQUNvQVNnQUJBQUlBTEFCTUFBRUFBZ0EyQUZZQUFRQU9BQ1lBSndBc0FDOEFNQUE1QURzQVJnQkhBRXdBVHdCUUFGa0FXd0FCQUE0QUpnQW5BQ3dBTHdBd0FEa0FPd0JHQUVjQVRBQlBBRkFBV1FCYkFBRUFEZ0FtQUNjQUxBQXZBREFBT1FBN0FFWUFSd0JNQUU4QVVBQlpBRnNBQVFBT0FDWUFKd0FzQUM4QU1BQTVBRHNBUmdCSEFFd0FUd0JRQUZrQVd3QUJBQTRBSmdBbkFDd0FMd0F3QURrQU93QkdBRWNBVEFCUEFGQUFXUUJiQUFFQURnQW1BQ2NBTEFBdkFEQUFPUUE3QUVZQVJ3Qk1BRThBVUFCWkFGc0FBUUFQQUFNQUJBQVBBQkFBRVFBZEFCNEFJZ0I5QWRNQjFBSFdBZGtCNEFIbEFBTUFDUUJFQUVvQVVnQmFBR0lBYWdCeUFIb0FnZ0FCQUNRQUFRQ0tBQUVBQUFBcEFBRUFEZ0FtQUNjQUxBQXZBREFBT1FBN0FFWUFSd0JNQUU4QVVBQlpBRnNBQVFBQkFBTUFBUUFDQURJQVVnQUJBQUlBTHdCUEFBRUFBZ0E0QUZnQUFRQUNBRGNBVndBQkFBSUFqd0N2QUFFQUFnQXpBRk1BQVFBQ0FDUUFSQUFCQUFJQUpnQkdBQUVBRHdBREFBUUFEd0FRQUJFQUhRQWVBQ0lBZlFIVEFkUUIxZ0haQWVBQjVRQURBQWtBUmdCTUFGUUFYQUJrQUd3QWRBQjhBSVFBQVFBbUFBSUFqQUNzQUFFQUFBQXBBQUVBRGdBbUFDY0FMQUF2QURBQU9RQTdBRVlBUndCTUFFOEFVQUJaQUZzQUFRQUJBQU1BQVFBQ0FESUFVZ0FCQUFJQUx3QlBBQUVBQWdBNEFGZ0FBUUFDQURjQVZ3QUJBQUlBandDdkFBRUFBZ0F6QUZNQUFRQUNBQ1FBUkFBQkFBSUFKZ0JHQUFFQURnQW1BQ2NBTEFBdkFEQUFPUUE3QUVZQVJ3Qk1BRThBVUFCWkFGc0FBUUFQQUFNQUJBQVBBQkFBRVFBZEFCNEFJZ0I5QWRNQjFBSFdBZGtCNEFIbEFBTUFDUUJJQUU0QVZnQmVBR1lBYmdCMkFINEFoZ0FCQUNnQUF3Q09BSzRBemdBQkFBQUFLUUFCQUE0QUpnQW5BQ3dBTHdBd0FEa0FPd0JHQUVjQVRBQlBBRkFBV1FCYkFBRUFBUUFEQUFFQUFnQXlBRklBQVFBQ0FDOEFUd0FCQUFJQU9BQllBQUVBQWdBM0FGY0FBUUFDQUk4QXJ3QUJBQUlBTXdCVEFBRUFBZ0FrQUVRQUFRQUNBQ1lBUmdBQkFBNEFKZ0FuQUN3QUx3QXdBRGtBT3dCR0FFY0FUQUJQQUZBQVdRQmJBQUVBRGdBbUFDY0FMQUF2QURBQU9RQTdBRVlBUndCTUFFOEFVQUJaQUZzQUFRQVBBQU1BQkFBUEFCQUFFUUFkQUI0QUlnQjlBZE1CMUFIV0Fka0I0QUhsQUFNQUNRQktBRkFBV0FCZ0FHZ0FjQUI0QUlBQWlBQUJBQ29BQkFDUUFMQUEwQUR3QUFFQUFBQXBBQUVBRGdBbUFDY0FMQUF2QURBQU9RQTdBRVlBUndCTUFFOEFVQUJaQUZzQUFRQUJBQU1BQVFBQ0FESUFVZ0FCQUFJQUx3QlBBQUVBQWdBNEFGZ0FBUUFDQURjQVZ3QUJBQUlBandDdkFBRUFBZ0F6QUZNQUFRQUNBQ1FBUkFBQkFBSUFKZ0JHQUFFQURnQW1BQ2NBTEFBdkFEQUFPUUE3QUVZQVJ3Qk1BRThBVUFCWkFGc0FBUUFPQUNZQUp3QXNBQzhBTUFBNUFEc0FSZ0JIQUV3QVR3QlFBRmtBV3dBQkFBNEFKZ0FuQUN3QUx3QXdBRGtBT3dCR0FFY0FUQUJQQUZBQVdRQmJBQUVBRHdBREFBUUFEd0FRQUJFQUhRQWVBQ0lBZlFIVEFkUUIxZ0haQWVBQjVRQURBQWtBVEFCU0FGb0FZZ0JxQUhJQWVnQ0NBSW9BQVFBc0FBVUFrZ0N5QU5JQThnRVNBQUVBQUFBcEFBRUFEZ0FtQUNjQUxBQXZBREFBT1FBN0FFWUFSd0JNQUU4QVVBQlpBRnNBQVFBQkFBTUFBUUFDQURJQVVnQUJBQUlBTHdCUEFBRUFBZ0E0QUZnQUFRQUNBRGNBVndBQkFBSUFqd0N2QUFFQUFnQXpBRk1BQVFBQ0FDUUFSQUFCQUFJQUpnQkdBQUVBRGdBbUFDY0FMQUF2QURBQU9RQTdBRVlBUndCTUFFOEFVQUJaQUZzQUFRQU9BQ1lBSndBc0FDOEFNQUE1QURzQVJnQkhBRXdBVHdCUUFGa0FXd0FCQUE0QUpnQW5BQ3dBTHdBd0FEa0FPd0JHQUVjQVRBQlBBRkFBV1FCYkFBRUFEZ0FtQUNjQUxBQXZBREFBT1FBN0FFWUFSd0JNQUU4QVVBQlpBRnNBQVFBUEFBTUFCQUFQQUJBQUVRQWRBQjRBSWdCOUFkTUIxQUhXQWRrQjRBSGxBQU1BQ1FCT0FGUUFYQUJrQUd3QWRBQjhBSVFBakFBQkFDNEFCZ0NVQUxRQTFBRDBBUlFCTkFBQkFBQUFLUUFCQUE0QUpnQW5BQ3dBTHdBd0FEa0FPd0JHQUVjQVRBQlBBRkFBV1FCYkFBRUFBUUFEQUFFQUFnQXlBRklBQVFBQ0FDOEFUd0FCQUFJQU9BQllBQUVBQWdBM0FGY0FBUUFDQUk4QXJ3QUJBQUlBTXdCVEFBRUFBZ0FrQUVRQUFRQUNBQ1lBUmdBQkFBNEFKZ0FuQUN3QUx3QXdBRGtBT3dCR0FFY0FUQUJQQUZBQVdRQmJBQUVBRGdBbUFDY0FMQUF2QURBQU9RQTdBRVlBUndCTUFFOEFVQUJaQUZzQUFRQU9BQ1lBSndBc0FDOEFNQUE1QURzQVJnQkhBRXdBVHdCUUFGa0FXd0FCQUE0QUpnQW5BQ3dBTHdBd0FEa0FPd0JHQUVjQVRBQlBBRkFBV1FCYkFBRUFEZ0FtQUNjQUxBQXZBREFBT1FBN0FFWUFSd0JNQUU4QVVBQlpBRnNBQVFBUEFBTUFCQUFQQUJBQUVRQWRBQjRBSWdCOUFkTUIxQUhXQWRrQjRBSGxBQU1BQ1FCUUFGWUFYZ0JtQUc0QWRnQitBSVlBamdBQkFEQUFCd0NXQUxZQTFnRDJBUllCTmdGV0FBRUFBQUFwQUFFQURnQW1BQ2NBTEFBdkFEQUFPUUE3QUVZQVJ3Qk1BRThBVUFCWkFGc0FBUUFCQUFNQUFRQUNBRElBVWdBQkFBSUFMd0JQQUFFQUFnQTRBRmdBQVFBQ0FEY0FWd0FCQUFJQWp3Q3ZBQUVBQWdBekFGTUFBUUFDQUNRQVJBQUJBQUlBSmdCR0FBRUFEZ0FtQUNjQUxBQXZBREFBT1FBN0FFWUFSd0JNQUU4QVVBQlpBRnNBQVFBT0FDWUFKd0FzQUM4QU1BQTVBRHNBUmdCSEFFd0FUd0JRQUZrQVd3QUJBQTRBSmdBbkFDd0FMd0F3QURrQU93QkdBRWNBVEFCUEFGQUFXUUJiQUFFQURnQW1BQ2NBTEFBdkFEQUFPUUE3QUVZQVJ3Qk1BRThBVUFCWkFGc0FBUUFPQUNZQUp3QXNBQzhBTUFBNUFEc0FSZ0JIQUV3QVR3QlFBRmtBV3dBQkFBNEFKZ0FuQUN3QUx3QXdBRGtBT3dCR0FFY0FUQUJQQUZBQVdRQmJBQUVBRHdBREFBUUFEd0FRQUJFQUhRQWVBQ0lBZlFIVEFkUUIxZ0haQWVBQjVRQURBQUVBTWdBQkFCSUFBQUFCQUFBQUtRQUJBQTRBSmdBbkFDd0FMd0F3QURrQU93QkdBRWNBVEFCUEFGQUFXUUJiQUFJQUFRSVJBaGNBQUFBQ0FDSUFEZ0lSQWhJQ0V3SVVBaFVDRmdJWEFoRUNFZ0lUQWhRQ0ZRSVdBaGNBQVFBT0FDWUFKd0FzQUM4QU1BQTVBRHNBUmdCSEFFd0FUd0JRQUZrQVd3QUNBQ1lBRUFIMEFmVUI5Z0gzQWZnQitRSDZBZnNDbHdLZUFwZ0NrUUtjQXAwQ2lRS0tBQUlBQWdBVUFCc0FBQUJFQUVzQUNBQUJBQklBQVFBSUFBRUFCQUtUQUFJQVZ3QUJBQUVBU3dBQkFCNEFBZ0FLQUJRQUFRQUVBUUVBQWdCNUFBRUFCQUVDQUFJQWVRQUJBQUlBTHdCUEFBSUFJQUFOQWhvQUNnSmtBbVVDWmdKbkFtZ0NhUUpxQW1zQ2JBSnRBcUVBQWdBRUFFa0FTUUFBQWRZQjFnQUJBbTRDZHdBQ0Fwa0NtUUFNQUFFQUJnSFRBQUVBQVFCSkFBSUFLQUFSQWhFQ0VnSVRBaFFDRlFJUUFoWUNGd0lSQWhJQ053SVRBaFFDRlFJV0FoY0NHUUFCQUJFQUpnQW5BQ3dBTHdBd0FEUUFPUUE3QUVZQVJ3QkpBRXdBVHdCUUFGa0FXd0NoQUFBPVwiIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNzRkODg5YTYzM2JiNjk0OTIxOTE0Y2E2NjlhZDA5OGIudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6Zm9udC9vdGY7YmFzZTY0LFQxUlVUd0FMQUlBQUF3QXdRMFpHSUVTNHFEc0FBQXg0QUFBbVQwZFFUMU1samlJdkFBQXl5QUFBQjhaUFV5OHlNa0ZSV0FBQUFMd0FBQUJnWTIxaGNEZE9BQ2tBQUR5c0FBQUJ2bWhsWVdRSTFJemxBQUFCYUFBQUFEWm9hR1ZoQnZnQnJRQUFBVHdBQUFBa2FHMTBlS1ZJL0ZRQUFBR2dBQUFCVEd0bGNtNHliek1RQUFBQzdBQUFDWXB0WVhod0FGTlFBQUFBQVdBQUFBQUdibUZ0WmRJME4rd0FBRHFRQUFBQ0dYQnZjM1QvbHdBMUFBQUJIQUFBQUNBQUFnSURBWkFBQlFBQUFwUUNsQUFBQUdzQ2xBS1VBQUFCRkFBeEFNMEFBQUFBQlFRQUFBQUFBQVFBQUFBQkFBQUFBQUFBQUFBQUFBQUFJQ0FnSUFCQUFDQWdIUUltL2o0Q0pnUk1BY0lBQUFBQkFBQUFBQUhzQXNZQUFBQWdBQUFBQXdBQUFBQUFBUCtVQURVQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJBQUFDSnY0K0FpWURhLzhvLzdBRGdRQUJBQUFBQUFBQUFBQUFBQUFBQUFBQVV3QUFVQUFBVXdBQUFBRUFBQUFCQUFBWk1Hc29Ydzg4OVFBREErZ0FBQUFBMDM5TlN3QUFBQURUbHZ5OC95aitNQU9CQTgwQUFBQURBQUFBQVFBQUFBQUNYUUF5QUFBQUFBRWxBQUFCSlFBQUFlVC8zUUltLy9RQnlmLzVBa2YvNWdHaC8vTUJuZi96QWZULzJ3SW5BQUFCUi8veUFTTC9SQUg3Ly9FQmh2Ly9BekgvL3dKUS8vd0I0di96QWkvLzlRSkgvLzBCOWYvZkFhZi80Z0d5LzVBQ09mLzdBYjRBQUFLZi8vOENKUDlJQWlQLy9nSGwvL1FDbWYvb0FOUUFMQUpGLzVrQ0Z2LzBBeEgveXdJMEFBVUNGZjhvQW1MLytBS0IvK2dCMy8vU0Flci9zUUtELzlVRFNQLzBBMnYvL2dLbS8vOENydi8rQWdyL1dBTXIvLzRDZS85bkFvYi9vd0pkLzZJQzB2LzRBaVgvendLVy8rNENaLyt6QWpYLzlnSmlBQVlDZ3dBbEFRNEFKUUlmQUNRQjd3QWRBZW9BQ0FJU0FCc0IvUUFPQWVZQUpBSTdBQ01DQ2dBWUFmY0FLQUhpQUdzQzZ3QU9BbDBBU3dFWUFCSUJmUUFxQVBnQUtnRHhBREFBMGdBV0FlTUFQQUR0QUVzQmR3QkJBYU1BQ3dIT0FEQUE2d0F3QU44QUdnQUFBQUVBQUFtR0FBRUJsQVlBQUFnRGVBQURBQjRBQUFBREFETC9qZ0FEQURUL3dRQURBRFgvdndBREFEY0FBQUFFQUFVQUFBQUVBQW9BQUFBRUFBOEFBQUFFQUJNQUFBQUVBQlgvN1FBRUFCYi82d0FFQUJjQUFBQUVBQmtBQUFBRUFCb0FBQUFFQUJzQUFBQUVBQndBQUFBRUFCMEFCZ0FFQUUzL3N3QUVBRkwvbXdBRkFBVUFBQUFGQUE4QUFBQUZBQlgvNmdBRkFCYi82QUFGQUJnQUFBQUZBQmtBQUFBRkFCd0FBQUFGQUI4QUFBQUZBRXNBQUFBRkFFMy96Z0FGQUZMLzNBQUdBQXNBQUFBR0FBNEFBQUFHQUE4QUFBQUdBQlgvNlFBR0FCYi83Z0FHQUJ3QUFBQUdBQjhBQUFBR0FFc0FBQUFHQUUzL3ZBQUdBRkwvM1FBSEFBY0FBQUFIQUJYLzd3QUhBQmIvOHdBSEFCa0FBQUFIQUJvQUFBQUhBQndBQUFBSEFFMy8xUUFIQUZMLzdRQUlBQVVBQUFBSUFBb0FBQUFJQUJNQUFBQUlBQlgvNmdBSUFCYi84QUFJQUJrQUFBQUlBQm9BQUFBSUFCc0FBQUFJQUJ3QUFBQUlBQjhBQUFBSUFFc0FBQUFJQUUzL3ZnQUlBRkwvM3dBSkFBUUFBQUFKQUFnQUFBQUpBQWtBQUFBSkFBd0FBQUFKQUE4QUFBQUpBQklBQUFBSkFCWC81QUFKQUJiLzh3QUpBQjhBQUFBSkFFc0FBQUFKQUUzLzV3QUpBRThBQUFBSkFGTC8rd0FLQUFRQUFBQUtBQWdBQUFBS0FBb0FBQUFLQUF3QUFBQUtBQklBQUFBS0FCWC82d0FLQUJiLzdRQUtBQndBQUFBS0FCOEFBQUFLQUVzQUFBQUtBRTMveGdBS0FGTC8wd0FMQUJYLzhBQUxBQllBQWdBTEFCd0FBQUFMQUUzL3h3QUxBRkwvM1FBTUFCWC83d0FNQUJiLzh3QU1BQmtBQUFBTUFCc0FBQUFNQUIwQUFnQU1BRTMveVFBTUFGTC96Z0FOQUJYLzVBQU5BQmIvNndBTkFFMy93UUFOQUZMLzFBQU9BQWdBQUFBT0FCSUFBQUFPQUJYLzdnQU9BQmIvN2dBT0FCd0FBQUFPQUUzL3ZRQU9BRkwvM3dBUEFCWC84UUFQQUJiLzhBQVBBQm9BQUFBUEFCd0FBQUFQQUUzLzVRQVBBRklBRFFBUUFCWC84QUFRQUJiLzdRQVFBQmdBQUFBUUFCd0FBQUFRQUUzLzB3QVFBRkwvM2dBUkFCWC85QUFSQUJiLzdnQVJBQmdBQUFBUkFCa0FBQUFSQUJ3QUFBQVJBRTMvdmdBUkFGTC8xZ0FTQUFvQUFBQVNBQlgvN2dBU0FCYi84UUFTQUJrQUFBQVNBQm9BQUFBU0FCc0FBQUFTQUJ3QUFBQVNBQjMvL1FBU0FCLy8xQUFTQUV2LzR3QVNBRTMveXdBU0FGTC8xUUFUQUJYLzZ3QVRBQmIvN1FBVEFCd0FBQUFUQUIvL3ZRQVRBRXYvd2dBVEFFMy93UUFUQUZMLzFBQVVBQlgvNlFBVUFCYi83UUFVQUJqLzlRQVVBRTMvdkFBVUFGTC94d0FWQUFRQUFBQVZBQVlBQUFBVkFBY0FBQUFWQUFnQUFBQVZBQW9BQUFBVkFBd0FBQUFWQUE0QUFBQVZBQThBQUFBVkFCQUFBQUFWQUJFQUFBQVZBQklBQUFBVkFCTUFBQUFWQUJRQUFBQVZBQlgvOEFBVkFCYi83Z0FWQUJjQUFBQVZBQmdBQUFBVkFCa0FBQUFWQUJ3QUFBQVZBQjhBTGdBVkFFa0FNZ0FWQUVvQUxRQVZBRXNBTndBVkFFd0FQd0FWQUUzL3p3QVZBRkwvM3dBV0FCWC82d0FXQUJiLzZRQVdBQnIvL2dBV0FCOEFBQUFXQUVzQUFBQVdBRTMvd1FBV0FGTC8yQUFYQUFRQUFBQVhBQWdBQUFBWEFBd0FBQUFYQUJJQUFBQVhBQlgvOHdBWEFCYi83UUFYQUJnQUFBQVhBRTBBSVFBWEFGSUFOUUFZQUJYLzl3QVlBQmIvOEFBWUFCc0FBd0FZQUIwQUFnQVlBRTMveHdBWUFGTC8zUUFaQUFRQUFBQVpBQWdBQUFBWkFCSUFBQUFaQUJYLzh3QVpBQmIvOEFBWkFCLy8zQUFaQUV2LzNnQVpBRTMvdEFBWkFGTC95UUFhQUFRQUFBQWFBQWdBQUFBYUFBc0FBQUFhQUJJQUFBQWFBQlgvN1FBYUFCYi82QUFhQUIvLzFBQWFBRXYvMWdBYUFFMy9yZ0FhQUZML3lBQWJBQVFBQUFBYkFBWUFBQUFiQUFnQUFBQWJBQXdBQWdBYkFCSUFBQUFiQUJYLzhBQWJBQmIvNlFBYkFCZ0FBQUFiQUUzL3d3QWJBRkwvM0FBY0FBUUFBQUFjQUFnQUFBQWNBQklBQUFBY0FCWC84Z0FjQUJiLzdRQWNBQjhBQUFBY0FFc0FBQUFjQUUzL3RRQWNBRkwvNHdBZEFBZ0FBQUFkQUJJQUFBQWRBQlgvOEFBZEFCYi81Z0FkQUUzL3ZRQWRBRkwveWdBZUFCTUFBQUFlQUJnQUFBQWVBQmtBQUFBZUFCb0FBQUFlQUJ3QUFBQWVBQ0VBQUFBZUFDVUFBQUFlQUMwQUFBQWVBQzhBQUFBZUFETC9ld0FlQURNQUFBQWVBRFQvNEFBZUFEWC8yd0FlQURjQUFBQWVBRS8veWdBZkFBTUFBQUFmQUUvL3Z3QWdBQjRBQUFBZ0FCOEFBQUFnQUVzQUFBQWhBQjRBQUFBaEFCOEFBQUFoQUVzQUFBQWlBQjcvNEFBaUFCOEFBQUFpQURULzJ3QWlBRFgvMlFBaUFEY0FBQUFpQUV2L3pBQWtBQVFBQUFBa0FBZ0FBQUFrQUF3QUFBQWtBQklBQUFBa0FCWC8rd0FrQUI0QUFBQWtBQi8vd2dBa0FFdi8xQUFsQUI4QUFBQWxBRXNBQUFBb0FBUUFBQUFvQUFnQUFBQW9BQklBQUFBb0FCZ0FBQUFvQUI0QUFBQW9BQjhBQUFBb0FFc0FBQUFwQUFULzR3QXBBQWovN2dBcEFBei82UUFwQUJMLzNBQXBBQmovNUFBcEFCd0FBQUFwQUMwQUFBQXFBQnovOFFBcUFETC9pQUFxQURULzR3QXFBRFgvNEFBcUFEY0FBQUFxQUU4QUFBQXNBQjRBQUFBc0FCOEFKUUFzQUVzQUxBQXRBQjRBQUFBdEFCOEFBQUF0QURML3FnQXRBRFQvM0FBdEFEWC8zQUF0QURZQUFBQXRBRGNBQUFBdEFFc0FBQUF1QUFULzlRQXVBQWovOFFBdUFBei80d0F1QUJMLzVnQXVBQmovN2dBdUFCNEFBQUF1QUI4QUFBQXVBRXNBQUFBdkFCOEFBQUF2QURNQUFBQXZBRXNBQUFBd0FCd0FBQUF3QUMwQUFBQXdBREwva3dBd0FETUFBQUF3QURULzRRQXdBRFgvNHdBeEFCOEFBQUF4QUVzQUFBQXlBQVQvNUFBeUFBai82UUF5QUFzQUFBQXlBQXovNkFBeUFCTC8yUUF5QUJYLzJ3QXlBQmovNUFBeUFCci96QUF5QUJ6LzRRQXlBQjRBQUFBeUFCLy8xZ0F5QUMwQUFBQXlBRW4vNFFBeUFFci81QUF5QUV2LzF3QXlBRXovdVFBekFCNEFBQUF6QUVzQU1nQTBBQVFBQUFBMEFBZ0FBQUEwQUF3QUFBQTBBQklBQUFBMEFCZ0FBQUEwQUI0QUFBQTBBQi8veVFBMEFDVUFBQUEwQUMwQUFBQTBBRWtBQUFBMEFFb0FBQUEwQUV2LzF3QTBBRXovdHdBMUFBUUFCUUExQUFnQUFBQTFBQXNBRndBMUFBd0FBQUExQUJJQUFBQTFBQmdBQUFBMUFCd0FBQUExQUI0QUFBQTFBQi8vM0FBMUFDMEFBQUExQUVrQUFBQTFBRW9BQUFBMUFFc0FBQUExQUV6L3RBQTNBQVQvL2dBM0FBZ0FBQUEzQUF3QUFBQTNBQklBQUFBM0FCZ0FBQUEzQUI0QUFBQTNBQjhBQUFBM0FDMEFBQUEzQURFQUFBQTNBRWtBQUFBM0FFb0FBQUEzQUVzQUFBQTNBRXdBQUFCSkFBTUFBZ0JLQUFNQUFBQkxBQU1BQUFCTEFFNy9rd0JMQUUvL3NBQk5BQmIvNmdCTkFCY0FQUUJOQUJuLzBRQlBBQU1BQUFCUUFCNEFBQUJTQUJZQUFnQlNBQmNBUndCU0FCbi8yUUFBQVFBRUJBQUJBUUVXUzJsdVowSmhjMmxzVEdsMFpTMVNaV2QxYkdGeUFBRUNBQUVBT3ZnZUFQZ2JBdmdjQS9nZEJJc01BWXNNQXZzQURBUEFEQVQ3YlB4VytUMzY0QVVkQUFBQXhBOGRBQUFBQXgwQUFDWklFaDBBQUFGcEVRQUpBUUVRSHlVcU16eEZUMVpMYVc1bklFSmhjMmxzSUV4cGRHVkxhVzVuSUVKaGMybHNJRXhwZEdWT2IzSnRZV3d4TGpBd01HTnZiblJ5YjJ4RFVtTnZiblJ5YjJ4SFUzRjFiM1JsYkdWbWRIRjFiM1JsY21sbmFIUm5iSGx3YURnekFBQUJBUUFCakFHTEFBRUFRZ0JEQUVRQVJRQkdBRWNBU0FCSkFFb0FTd0JNQUUwQVRnQlBBRkFBVVFCU0FGTUFWQUJWQUZZQVZ3QllBRmtBV2dCYkFDSUFEd0FqQUNRQUpRQW1BQ2NBS0FBcEFDb0FLd0FzQUMwQUxnQXZBREFBTVFBeUFETUFOQUExQURZQU53QTRBRGtBT2dBN0FCRUFFZ0FUQUJRQUZRQVdBQmNBR0FBWkFCb0FJQUFDQUFjQUN3QUpBQW9BSEFBYkFBMEFEZ0FJQUFNQWR3QnBBWTBCamdCVEJBQUFBQUVBQUFBbEFBQUFKd0FBQUNvQUFBQXRBQUFBbkFBQUFVMEFBQUdmQUFBQ053QUFBcEFBQUFNckFBQUQwd0FBQkc4QUFBVFFBQUFGV1FBQUJmOEFBQVpvQUFBSERnQUFCNGtBQUFnT0FBQUl3Z0FBQ1djQUFBbmlBQUFLWkFBQUN2UUFBQXRmQUFBTHlRQUFER0lBQUF6WUFBQU5lQUFBRGcwQUFBNk9BQUFPclFBQUQzUUFBQSsrQUFBUVV3QUFFTWNBQUJGcEFBQVNDZ0FBRXBnQUFCTVNBQUFUaWdBQUUvOEFBQlNpQUFBVlNnQUFGY1lBQUJaUEFBQVd0UUFBRjBnQUFCZlZBQUFZWndBQUdNRUFBQmsyQUFBWmdRQUFHZ0FBQUJweEFBQWJDUUFBRzY0QUFCdjVBQUFjS2dBQUhJUUFBQnpxQUFBZGFBQUFIZDhBQUI0MkFBQWVlQUFBSHZBQUFCOU1BQUFmdHdBQUlBY0FBQ0NYQUFBaEFnQUFJU29BQUNGUkFBQWhtd0FBSWRjQUFDSURBQUFpSlFBQUlrVUFBQ0tDQUFBaTJnQUFJeklBQUNOZ0FBQWpqZmp4dmZzTUZZdjUzUGlJaTR2OTNQeUlpd1c5dlJYNEpJdUwrWGo4Skl1TC9YZ0ZEb3NPOTdrTzk3a08rSGozZmZmS0ZZTDNPR0ZzaTR2N0FDQ0MrNXVvaWEyTnVjZVR0NXZmcHBhZGVhZDJuVytCYlhUN1I2K1hsNUxFcmRyM0Q3WDNSd2lMaTVpYmxINmFnNFYzaTRzNys5SDdBWDV3Y0NWZWhQY2pnYUZOUVV1UGVaWDdHYURkK0JQM0FiejNHY2V6KzA2RWFRaHlmd1VPK0xyM0ZmZExGZDNJbzVpbmpNU04wMmVKTDVxUDU2Ry85MVVJbTRrRmxvR0dlNHVMYlB0QSt3cGtib09HKzJUN2VrQlp3WU9UaTVLTG4xVndkcU9Bb1V6M2s5SDM4YVhpNC9lczM0L01uUWp4ak1OYmVQc2tTL3ZtKzNyN1pvdUxDRzZrRmVyUjk2ejRLaUQzUGtydFBQc2NjVUUxKzJ1RSs2Q0dXQWlQKzdNVmk0dWQ5d3ozTnNLVXdYbmFaWUZmZjNGM2JteGRXWTc3QXBSQUNLQndGYnh3M2Nlazl4bFpqdnNTK3lLZmNBZ08rRjM0V3ZmeEZZdUxsNDZTaFpTRmgzcUxpMXI3VGZzWk95eHRKMno3QWZjU2pQY09qdmdCOTJjenRIVEtaM1pGZG1KK2MzK2ZnNHNJc2ZjUlg0bUJsU0tFZVB3Zjl3YVM5enlWMS9lUmk0c0lEdmpiK0REN0J4V2xsODczR05qMzJvdUxtNDZOaDVTR2kzT0xpL3NLL0lwQlppYkFRcm1SOXl4OXVVajdNaURFZkpjbXlwMzN1TWk1Q01tNjBJRFFlSmY0TVBjQnhhS3A5eXYzSnBYN2gycjdGRVQ3bm1kVVlEbUcrOG1yK3dDeW5RZysrRndWaTR1NTNOSDNvcnIzZ0VhRWdIWTQrMkdKKytTTmVRajdYZnZORmJtR3UrYU1vWTdXZ3ZjT2k3RDdZckc0L0FqVGd3Z08rRFdZOHhWWjl3aVY5NkgzVFl1d2ljMlBrMENPK3hIN0JsMWlrby83TThHV28zeWpnZmNDbXQzM2s0dUxtNDZPaHBDRWlYeUxpd2dtL0JMN3IrQmoxd2p3OTAwVnZJKzhscGZxaU1WbGpIcC9iV1ovWllFNUNBNzRNZmR1OXpJVjBadk9yTC8zSm91TG00aU5oNCtEalgyTGkwejdOa0IvVkhQTCs3MG1YMjZIK3lCNVd2Zk5qL2NFcFBqQjl5djNGNTJvQ01IZzl3UkFmL3NnY2Z2Uyt4RDdORHBDclpQQmpxVStDUHNGOXcwVmk0djNUZmNobC9nVGovSS9qSUJwY1R0YSt3eGsvQjRJa2ZzY0ZYc3l1ZnQ4cTRpNWlabjNPV2YzRjN5R1lvaHRzUWphanhXRXBYTzVaRzZHVjdxV3A0a0lEdmlJOTF6M094V2Y4WU9VazZLVG9waU1uM3VzY0tsMGZsbUpib1ZoalhtVGpQY2R2cjMzUll1TG1JNlNocFNFaG5xTGl3aFArMno3SklCM2MzbzlrVXRuKzI5bisyLzdRdE41bWZzTjl3SDNDZmViOXpmemtKMk9yb3VnK3lOMVdibDN5RlgzVk8zM0E4bTNDUGNaNWZjMEkxSDdHNHlCZW9aK201cjNEMXlYWDVEN0M0a3QvQ3YzV3FNSWRmcytGWXVMKzFIN1JhMzdQNTFjd29DWW05SFdoZmV3a0tvSUR2aTc5d0wzREJYMTk4SDNFL3NSbG1Ldit4eFZKWkFvZFBzazkwQlV4dmtNaTR1ZWlZMkdrSUtOZm91TFR2MHkrMnozR0gyUVFyR3U5NXlhOFFpUDIzR1BobjliYzBYN0Vvd3JsRlIyYTNLWGNKdGlsNHF5YWZoaXQrS1kxc1QzY2JxMG5xVDNCUGNmOXZzL2Zmc3NDSGY3cGZ0RFgxbEZobVNHK3llTVhnaVY5Nm9WcmNqM01xNmI5NGFUOTNRc1luOTNLUHRNaS91d2dXb0lEdmZiOTlqMytSV0xpNXVNallpUWhJeDRpNHRpKzl6N0Jmc1MreCt2K3dXdHh2ZzlrYUtTcDYyZG9INjZiWlZuaFhSNktJVXFoaUlJaGZzUzl6eHIwZmh6Q1B0RDkxNFZobmlNYjRLQmhJSkRtNHFWYU15MHBJdUxvb2ZIZTQ5dENBNzN0dmNJN1JYRndhK2gydmRGaTR1ZGg0MkhqNE9LZm91TFRmczVQbEpUWFluN29HTkZjVW81KzBiN0NOWjZwU3ozU1BlRzk1NlhyQWlUOXc2SzkwNkw5eEtUdzUrRXFYV3BlYTkwaTIyRFFJdjdWNHRBQ1BzT0l4V0xpL3QrKzhuM0ZDUHJQWlg0VTR1M0NQVDQ2eFdMaTN1QlU1MkxpMkM2cnNpVGs5WjRsWXVnYzJrNmk0c0lEdmlQOTBEZ0ZmY1ErMHF3aHF1WTNMQ3k0WjczMG91TG40Nk9oNUNFa0hhTGk0TDdqV2Y3VmZzeGZmc3FpVEwzWkl1TGpIQ1FLb3h3Q0kxRSt3ckNpYmFTK05DOTkwdXI4c3IzWlBjMlNLZHh2VjJzKzNyN3YvdklnbldGUTR0MW9zeThzWnllOXdQWXVqQ0JVQWg1K3dBalZHUjBDRkQzeUJYM3BmZkNUL2MvYTdCZHRWUDdDWHRXZ0dacyt3cDIrM2NJOXkxU0ZWQ2dNUHNuZTFQZHJQY2EwVm5hQ0E3NEd2ZEkrd29WdUl6MDl3UEg5L21MaTU2S2pZZVFoSXg3aTRzMy9LMzdWcXB2cG1xc2I2Vjd4VVQzeHNMNEZLWG96UGVkOXkxb3IyRUk0Q2I3Q1B2ZSt5YjdJSWxYaXZ3MXlZRUlUdmltRll1TDl5RDNFNlgzcTViM0RWS1VlMmRiVWx2NzdvTXFDQTc1eGZqVit3RVZxWGYzQ0tQbytGMkxpNStQam9hUWhJNTlpNHY3RFB6MysxUDJhS01vNGVYNGJKWFJrYmwyWllPRFB2c2lXdnM5ZFZzSWc0R0hlWXVCZzNCOWZuV2RiYUZvcTR1eGc5Mi85MktBbFhHUkxQczBnVU9BUkdpRmVaVkt5cFQzWnFiaENKV3hwNHVwZGJaemoyK0RkWU5mZ1N1TGc4UDNBNmVxcHFtZG5hU0lsWUh2V2xyN1JKT0JpNVBzOTIrN3d3aTl2T3MwaERsMSt5QmorK3FqWWdnTytPVDQvZmZZRlNYOHNQc292M0cxUU5lRTkybVQwWXZEeXZkdlZHVTRRa2Y3WklGNW5VbDRmM3lJUG4rRnVvT21kZXVZOXd1aDZBaUxuYXFVbFlPeGRhNTVnMStEWllRNGkzbTc5eURHekt1cnVibnRUNVpLa3o1OVBZTlRhL3RQcWtHVGd3aWZkY3hsOXdENGE0dUxub2lNaVpDRGpIK0xpd2dPK0hiM3ovZWpGYU43OXdDS3JPcUxpNCtibllDWWc0TjVpNHRVK3hIN0c2bCtqVi83TmtCMFJJSXhoVzMzREliRGdQY1Z1dmNMelg4SWhkSzZuSnVUdDZIaWVhazFuVktjV200M0NQdHE5ek1WaTRPbFZvZC9nMkNCKzFqTGVyQ1JzTUNyMzJPU005bGQ4QWozVGZzaEZhUDNEbUcvZWFaeXJFdWtoVDJMVHRJdngyOElEdmpEdmZpcEZhcVVxR2lVYkpCaGk1U0dZTGJ1NGFmbFd2TkhlZnNaZ21TcG1hcUcydkNMaTVlYmwzeVVnSUI4aTRzSVF5WklnV3Q5TlB0ZSt6ZVdhS0NKZTRwK2k0dktXTUw3RVhValRmdUorelB0aWZjVmlQZHdqUGZDazlxVDk2NjRXSXVMQ012ODBCVncrM2FUTWFWOGk0dThrcGYwbWZjR09lcUxsUWlQOXpFVnBNTDBvcWlYb2NPV3A0enJqTXBtdXpoVmJHOXVjb1ZEakcyQit5cU1kUWlhVFJXNmpyaWJydVpGZEUxNmtFVUlEdmpiOTBmM0tCVlBkVStmYzdJZzl6LzNJL2RlOXdxVjl3cVZzUzk1ZFhoNGdxT0xpNVdwWWE1emZ2dEMrd1cwKzMyL2o3V1R0ZmRBbmNNSWxaMllqWldCdDNtM2VucFVjU2hwS1lOanBwWDNRYmJjOTEyTGk1YVNsWVNWZ0lSNWk0czMrMTc3SkdWYmhBajNPZnRRUC9zL1h5NzdCZnM5S1BkdmhMdHk5ME8wOTRXVGxRanpJeFZnKzJhZSt6ZVRiYVU4djkrVG5aMjNzTGhyOTBLR3AxSGNiWk1JRHZpSitJYjM3UldMaTVLWG00Q1hoSVo0aTR0US9CVTdaV0oxUkdaSHEzYXdTZmNJd1BkS204TThjVVNuYkxCc3hYT3pudEVJb3N6RG5xNXV3bDFTUkhGU29VNzJuS3VqdGFXL2VZZFZpanFCZW9GQ2NmdFZ3SWFMaS9jRGVkSDRWWXVMQ1B4bnJoV215cHlhZzZpTGkzeXNibWw1WnBKZ25uRUlEdmc3b2ZlZ0ZTMzNiNy9CdjZ2d3ljajdCelg3S0tKUjN2c1hsSHlXa1BTeDNQY2VpNHVWbHBpRG1JT0JlNHVMU3ZzVEpWdG5iUWlUZDZoaWtEYWUremo3Tm9SaGtVR1YrenZvOTR6M1JYaStXT2Q4ckFqdyszRVYrMXY3QVBjSU45NkY5WU05OXg1dnp3aG8rQWNWb3IyTWpZZTBnY1IxZEgrQ2RsdXNZcGR1Q0E3NFJpdjQrQlhSbDZ4NWxvU1NvckQzNi9jcWdxT0trWW1jZHNFeSt5bjdyWHh6eEc3M1NvUFk5d09ybjM1YWk0dFNJUHVXZkd1dENHejdwcWY3Z3JGZXRtTDNJWFhYK0cyTGk0K2FtNEtjaFlaeGk0djdDUDFiKzZYM3QyL0hMdmRrdnZmQWt0OXFsM3VWWDQwSVQ0ZTRzWXVMQ1BmVTk4RVZiYUI3VjR1TGJqR0creWFIWG9TQzl5bjNsMUhKQ0E3NHpmY1g5d1FWM291eTl5U0d6WS8zREtCNm5vU2lnNzFnalhDSFAzSDdQTGNwc1V2dzl3dTc5N2lMaTU2T2o0YVJoSXg5aTRzSVFQdzIreVd1ZW83N0FhR045MkdLazB2N0gvc0hqR1MzUStXMzk1bVl4NTI5dVpDMGFKWjZsWHlNZVdQN3M1dE9rNGNJRHZoUzkwV2RGYS9lbWEycTl4USsxSy9xcVpEY2pJOUNjVWFUZXRoV3dmY1NpNHVjakkyR2xZS0ZlNHVMWXZzVyt4V3doSk1JWi9zbGFqeGZJL3RnaTZYNEVJM3FoS20wanFpQnhtK0tZcEpTaVVXZyt6K25kUWpwOThvVmk0dXIwMk9LYTRPelRJdUxDQTc1TTVINE5CVzdrOUpuaTF1VE5YejdiS21KdUp5ZTkwZW1xWjJkbG9PVmdiRnd0WEdUVTR0YmtTK2dlYmFMb2ZjUmxNTUlaWjlYOTBEb2hObUZhL3NiaUgzTWNybVl1ZmMyaTR1Umw1Wi9sNFdKY291TFd2dEZRWk5GbEZmN2lsK1BlVzBJVG1aZjNvT3hlYzJFOXl5RGdXVDdjQ2Q2ZFpVNG5uLzRHSjIrQ1BodSsxc1ZrN2VObzRXb2Y2aCtlNHVEZzNXV1VaMTFDQTc0dVBkYzl6OFZ0dUgzQy9jM29KMmVuNU5hZzRFdyt3VkEreE4xWHBOWHZ2dG90WWkwaU9UM08vTDM2WXVMbTQ2U2g1aURoSG1MaXdqN1BmemcreWg3WEs1WHVsbjNUWUs4YVR2N0xQdHpQWkNBaTNtY2xaWHZxUGIzUDh2M0RtZjNXbCtwaVpCdWxhT3RwcFFJOUtuQysxK1ZiUWdPK0xmM0tQYy9GYXlGbzZQQjVwMmhoL2ZOcHBPM2c4cGxnMXVMVDREN200bGhxNkxtdDdUM0U0dUxuSmVUZjVtRmdIU0xpd2hzSi9zRE5WdHprUHV0Yy9zRWYyMDgrMXo3U2NkengxajNGdUgzYWZjcTl5Q0tzSXpJaXFFbSswWDdCUGNjZWFsUTU3MzNMNTI3Q0pPZHBKeWhnNmFCb1hHRGJYYjdFNDc3TGE1K0NQY0QrdzhWKzBmN1JKTDdKcE5GazFPdWZNT205d1M5V3ZmYWpjY0lEdmg1OTZ2c0ZmZFcrNkg3UnZ0UmNIRDdOdnNpK3c3M0hvL21sUGNPNmZjZzl3ZjNHV1N0WVhxRGczbUJmb2VCbllPZGNwcWhvYkc3OC9jYmdLSUlicUE0V2x4M2JYaDZsWXpCbXFUM0k2YkhpN21MekdSNVUyZjdBVE5nZzRPaGtLVitwSHJEc08rMTNQY1hDSXVMbUorWGZaaUJmSGFMaXl6N0xpdGhhbTRJVm1nVis3RDc4dUkrcjNiM1MwbXYrRGhSNlFnTytTMzN6ZmNlRlR2N1JUeUxhNFA3Sm4rRjkxcVUxcFQzQU5mNFhQZGNwdmNaazZYN0VZMVlqR3Q3aEg2UWN2ZFFTWEdDZy9zcCt5a3gvSFNXUUFpbU5PVERxYjYwMGZjRjk5T1dxWlNUa0krV2k2dUR2RUNBWDF6N3FtZjdJYlYrdFg3M0g5Vzc5K3FlcVpOYWk0c0liZndlKzFsWFZKLzdKckcrOTFHTGt3Z085MmpQZ1JWcWs1UEdsS3FlcGJLUnJIR2xlSXRtZzNoL2YxTjFjcEFJRHZqWjl3ejRTUlgzQ2JMM0E4bU85eE5rOTN6Nzd2dEVabUo2ZUdhdHNwejRXL2VZenZ1K2kyU0xJV28wK3d4SWk0dlFkYU5saTR2M09haXlrd2ljaTZSOWRudEZma3g1V0g2Y2E1TjBrM0t4K3k5SSt6UDdpWG43Y285azkzblMxYVNsaVl0OG1ZdjNJcHozR3JuM0dnaVF1cUNUazRPa2E2bDRuR3VUY21BbmczSUk5NVg3bGhXTGk0M1VlYUZkZXZ0bVczdHorMmI3QVBkRyt6SE5qdmRla3E3M0k1ejFDUHV5eEJYaXBQY3Z1Sk9MYTV4cm0ydVRaSk1raTR1RGcydVBZNE5rQ0E3NHF2Z3orS2NWajYyVDl5VllrUHRway9zcS9WejNhbmIzTlk3azkzbkI5eGVMaTZtT2YyejdGUHhFKzNtM2k0djhJdVQzanZtczkrNUI5RzlrK3pTRWJRaDZjM2FHajYwSUR2bWxWdmxZRmZkUTl5bjRFNUx0L0JTYlY0TWhpM3V3Zzkya3RLbWVtWk55ZlhoeFovc0xkV2FNK3hQOFIvdjR6RitqK3o3Szl4YjNEcHViQ00zRGFuQ0NxbnpFaWNhVHo1UG5tZmMyaTV1d2c5NU5nMmFEUDNEN1lZTlFtNVAzVzlyM0E1dW05N0Q3Ui9kSUlwTUlMNXN1WVQ5ZmJYaUtyWXVMQ1Bpei9Gc1YrM2QwKzNiN1E1ZGkxL3M4OStMM0FhcjN2Z2dPK01qM0Z2aFZGYkd3OXdEM0RkWWgzUHNMKzROb2NZMzdGZnZ4OTZpTnNKNmJrL2NweTd6M2xZK2VxSHFHYVdyN3FmdGxSbmFEL0RIN0NzNzRrK3F0Q0RIQlYvZXI5NWYzRlBmSTdGejduRjltZFhPRHRaT1M2dmVWL0VEN0s5UDczZ2krVFJXTGkvZEhxVi9TZDU4a1BuOWZDQTc0cVluMzBCV3hydmNPazd4WGtMT2k5MkNNeENWeiswSDNMZnNyTFg5NmNKR2ZyL2NzOXd6M1Uvc3k5SjJ5OTluM1Evc2lqMnkxK3dIN0JrWnhnQWlIK3haN0tJUDdBY0orNksrOXdaS1RwWkdFWlZ3MSt4NXdYcHBxKzRGblgybGgrMFQ3Ums3M29zTzdwSnVKZG9SMkNIdjdUZmNCMzV6M0FKYmxsc2VXNVZPK01ZaHRkMkI2bkxLTGl3ajMrL2ZuRmZjUjBVYnFjSU5zZ1lmN0FaRmxDQTc0OXZmMitGb1ZyWFdqZDZkdXRXOVErMUtMZzVPTDU2N2k5ektVbTU1eGczcEUrMEw3RDFsMmwzb3lhUHZaZldsZSt6WDdPUEo1a2dqN2RQYzIrQXozdVl1TGo3T0trNCt6KzF6N1hTdjNvWkwzQWF2NGcvZWFnTE45OXdWdGp2dERnV1dCWlhTb2k0dUpwSDczWVVSb0NQc1BTbHI3WjNIN1JXdjdVZmRCeGFlMW5NR3I5eStndFFnNi9Fc1Yreno3TjBRZzlDajNGZnNOaWZnb2t1RUlEdmtWaGZmUEZaQzNvL2M0bVBjZ20rZUExb3lZanNQM1I2UkMvRUtCV29JMGhHeXVnT05KNkltZDkyYWo5NXFseWNlU3NHbDkreGtJZmZzbmdUSjgreUNvaWVpcHp0bVZrNXlDZ1hSVk5Qc2RjM2lHZzBWdCs3cnM5eENXbDUyU2hHazUreVA3Q2ZHSzl3WUlqTW1YOXhTRWlsT01MS0ZHd1hiN01ZYzdnR0tHYmpLTGlLZDZ6SjMzUlpYRENBNzRjL2N0OXpFVjd2ZmtZdmVaaU50NDNXZGRlWGo3YS93cTkzSDdsWmRzQ1BjRlR4VTgrNVF4blg2SiswS1l2ZmRGanJpUXJiR0loMng3VHBNbHAzL1JiN3IzWXBDcSs3YjM0ZmVVK0RLbG8vZHc5eE45L0hLQyt3UUlmdnNJZENKNFFicUY5d0NrdHZkVmk0dW1vb3RhaTR0cSszZjdZSW9JRHZoKzhQZFlGZnU2OTZ6M1Z2Z0F0YXYzQ05UM296djdGLzFKMzdYZTNxSy9tNmlqY0hsdVd5eEhXeWxjWHZ6WCsyUitUTG43UlBjSzk1ZjN5ZlBzQ0pySG4vZHZrL2NGcmZmZSt5aTdjV0w3U1B0WTl4RDc2ZlUraTR1bllGdVpDTXo3SkJXRWd2dWorNC9YK3pIM0dmc1Z4dmlHbGJzSUR2a1g5eGI0Q0JYTmgvY2I5d1gzVi9mNW5LMm5jWDl1K3p6Nzl2c3NJVDVrM2Z0ZDhmc1UwWUdvaC9jTmpkZjRCNWlVbjRxSFoycjd1dnNwK3lnaGt3ajdGSlg3QWZkZGFmY0xpRjU3KzRpQlVvZHFYNUJxajFxZWpaeU9zNURzM2Zoelp2YzZaUGRGc0ovZFE5eEVadnUvaVZ3SUR2bmM5M1g1b0JWd3I2eStvVmFoVnMwdjl3S2w0L2VOOXlTSXJWLzNHL3MzKzROR1o0YUphRHo3bkdMN0M3NVI2ZnMwMEl2M0haR2M5Nnljc2dpTG5LcU1obU56KzJrMyt4MURodnM2aTByM0JselIrd3I3Z1NXUVU2SDd3L2NsOTNuNEV2ZWsreld2ODdUb3FQY2UrdzJHWGN4ZjFBajdVZjAvRmZQN2JmY2s5NittNmZ0eTl6Z3orNCt1UWdqNHUvanVGZmNQcHFYbVpyZFh5VS83Vkl0ckNBNzUvNDM1M1JYUXI4QStpMWlMSlh6N281SjBrcW4yOS8vM0FFdmJXNFlqaTN2UjkyL1JrSnlHOXpGalVQdTVpeWlFT296N0lJMDZDSkw3Zy9kRzk1U2o5OStPbXFTQ2gycHUrL1A3QnZzcSt3KzArdyswdS9mM2t2Y1lpOXl0OTJWZ2puQ05QdnRCaEhSVit4K2UrMkdFT2doMCt5ZzM5eE9OcjVMM0NwRDRSSGVRWUl3aSsrOTdXSXNtZDArRWJVNzdOV2ozaEluWWlQY0JqdmQya1BjdWp0dUJ4WkNaQ0E3NU92aHgrd1lWcTYzY291UDRLb3VMcDVDSmI0bHJaUHVRK3cvN05mc0MreG8rOXkyRHVYcjNDWXIzQTVQM0NaUDFwL2UzYjNIN1Z2dFZjdnVYZzEwSWcvd3RLdmRYaGUrQzl5U005N2FWOTB5UTZIN0JsSlBRbk1nd2kwaUdJNFV6aUZtVG5QY0c5MGpOeS9MT3pQdEJnMFFJVmYxVXhzMkxpd2dPK1VMNHZQZlpGZHArbFp1MW41MldvM1YxZUVsY1YzMWdqbUQ3dGZzS2JXRjIrN1Q3Q2xQNEdZNzNIWkgzcWZjZjkyNnZsNUtVM0h5T1lnajNmdmNaM2Z3SGFmdDFDRVJkRmZzcXdGSGtRUGN4WlY1aSsyeVUreHlZKzNQM0ZZeXJrUGNhbjdEM2g1Ty9DSmIzeUJYN0FQZjMreXY3azQxUWpVZjNEL3RVOXhWdGx1R1MwWHpvQ0E3NG52Y3YrQWtWOTBSaHIraVU5eWlVOTB2N1g4SDdGWGNnZUlWK1FGVjNmVzZicDZxb3JkL0U4NVQ0VGJHTCs2Q0RUSDhqWlBzbis3YTZDSXVMYi95TWZJUjRnanFUaTcxNnM1MzRENGlPbVBjaGcraTQ5eUtVdWNxYWtvSy9PWFA3aklGekNBNzV2L25lOTlrVmRQczhNdnRJSm9Nc2gyL1dncHY3Vy90cyt5ZjNCbVN6S3VkNDl3YU45dzZOOXBmeHN2S216YXpQdGNlMXdNSlhuWHdJM3FiYWFNTmI5Mno3V3ZzZCsvUitZZTM3ZWZjTjl6NjA5NGlnc3BSS2k0c0krOThoRmZjWStPTDcvRzk5ZDFsUGRWbDVWL3M4L1FMM3FxS1RpOCtOeHFxMzJEMzNRRTFsWUlkNGdHdVp1S2ZMc3VlZjEvc0RDQTc1RC9lTjkrTVY5d3Y3SlRuN2NQY2toUE9HNmZlYWxQY1JrSitqaUl0bVd2dlNPa2MwZVB1SmFxLzMrQ250aTR0bi9FeC9hbTQ2WDN0Kzl4TUllN0NtOS9XSWpwZjNGNFR1cS9jWms3YkdtSktEdXo5MCszeUNkZmNUa00zTG1QY0pmL2M0K3pIUSt4aHNNbStBZTBWWkNIaCtjSnVscUthcjFzVHJuUGcxMUlUN3M0UlFnVEV0SXlHSkNBNzVHdmg5OThnVnE1ckxpTVd2bkphWWRuOStVbGsvaFd1QTMvd08rOFV6K3dUMit6YjNVZmY1OTBxTGk0QzlhOUNIdUZJbyt5RDcwL3MyUXdoaGVIeWtvSmYzS2F2M2h2aHlnNkloOS9YM080S2doUGNRWHpIN05uRmNoWHplKzBxaU9RajdFMEFWaTR2N28vc1YzL3MwdHpEM0ZmYWI0WnJPZU1LTnpBaVMrQjRWaTR2ZTl5TkZzbEo3cVBzRm1sWUlEdmp4K0Z6NG9CVlAvQmlHKzZDSFVvdGtSM05WOXpKNnZ1ajQxNHU5TWRQN2lLUStKNGFEYTVxZW52Y2g5eGIzWmtYaFdweTNuL2M3OXhodkNQZFhZeUw3bmZzc3BRaVB0eFgzRG5hbjkwSk5va1NyZi9zeWhsa0lEdmxtK0JUM1JoVnBNanNvWDJ6N2hQdFBodmhCbStlUHlaMzNCNTN5bi9jQ2ZPNlNsZGVwelBzTmN5aEMvR2k5K3dlUmFhTTI5elgzYzdUM0NBaXIwSXYzbUp2MGxyRHpSSXRtZ1BzVFNmelpySGk1ZlBjcjkwR2w5OCtlbTVWN2kzSjgrN2o3R3Z0Uit3T0kreDJIcnZmcmk0c0lEdmk1OTR0SkZlejRKUFAzWVBjSjk3U1ltYU4vaTJ6N2V2emtRUHUwaEhSMSt5RDdDdmNpZTZsajVsejNuMlQzWW5qeWY3OTR5MS8zSi9kTCt3aXcrMk1Jb2Z0bjV2d1lpNHNJRHZrcTkwYmJGWitvd2ZkY3lQY0FwcTZpWTZONzJ6MTkrM3ljaTVtU3p2aW05eVQzVTV1cHRXMStiUHNWK3o4ay9PS1BPNDg3UjVwem93Z245eWVtOTcxeGg0dUxRdnROY0NhQlhvdGhlVnBoK3dOQTl6T0R2M3YzQzMzM0VJUDNDNFB3aVBWazl4Ujd6L2NFYnFzNENLOHRnbXlUVjVQN0M1Yjd6WmVjQ0E3NCsvZ24reHdWOXhhTTFQaHFrcHVMa3ErWWhWb2ovTWI3RnNOWG5Qc0p0M2ozYm5UTk8vc0FWa1lpK3gxNGRtcW1vcW5iN2ZjcjkxYWx1d2huOTVzMjk0ZHNxbm1kd2JhMmJmY2VUYTc3M3BKUjArajNRZmVjaTR1Y3FyZUJiMk5nTy90SSs2WmxhWnNwdlB2Y3BZb0lEdmpKOThYM2RSWDdGUHVaTHZjRWVxSDdEdmNhd3ZlUW9lMmo5eDl4M0ltZTl5cTBnL3Q4ZkQxbSsxRi8rMDZlVlpSeDJtRHo5NGlTeXFEM2twTHFDSzZMeG5tUFRwbjdIWDc3eVlobWk0dlEyY0gzRDVtbG5XbUVlbXNqUVN0ZWE0NWxoazZFK3d4LysrZjdvL2NKYmJRSUtQY005MlQzVGNyU21NR0x6NUt1Q0huN2JCVnViUHRrKzBMc0p2Y2JPWlQzbG9mM0ZnZ08rUGIzL2ZnSkZhcHdwRk9nYnNTczBaVzN1YWVkakc2QmZXVlpSM3BJYkpscG1GV0xYSWo4bGZ3Zjl3MWh3UHN1OTBENEdmZDYzY2dJaGJwdngzbWorMUFpYS9jR2o3U1U4L2N2WFoxMDA1L1M5MlA3SE1MN0c3TlMreGYzQ0YrbGg0WmdZcG43WGZjRzkySDNJdk52Q1BlRFMzdjdodnNtTWdpRGhRV1MrMVlWL0JUN3RMdFl2RWFnYXZlVktKVDRzQWo3RHZkd0ZYYWhKYTZLUTVaWDBLMjNyQWdPK1JmMzUvazBGZmNKaHRzNXF2c21wL3dDKzBzcUlvbjcyWVNuK0diWjl6ako5eGYzT3JtZGl0YUdTVUtFaGZ1ciswVDNBUHlnOTBlLzk1WGJTL2ljKzJsK0NHeVNwYkdmaWdnTzk2S3crVGtWbk9MRXBwYUE2azU2K3krRVdvdEtndnd5YVVKTVJWejNKNHV1Z1BjYnJmZ1Brc2VMa25HRWhLY0lEdml6MnZqakZXUDNTUGVaeXQ0bnpUdDBMbkJUTXZzbyt6Yjd6cGFDcXBPcmpkVnhzb0xQZ0t1YXFwZVFXbkdCV0hONGlWQ1JDRW1ySzRGWmJGcUZkTldRcHBuM0N2ZTErR2h6MDJudyswOG9xRGFWYkdPQWZLVUlEdmlEOXhQM1lSVWtQZmNHK3dYandmZFM5eGo3UlBkU2JKUDdIcmprc3FPZDJjam4ybURxVituN1BTbWlUWlJ2V1pDTG5XajNRdmVxcU5FbkNQY2grMkQ3YXZzSWVYbjNyZnNGKzBUN25WMWwrdzBwK3pQMGI4UnZ4SkRMMUxlZGxyTndjWFlJRHZoKytCYjRHaFdUaTZhSms0dW1pNEZZZG9oMmlvNk9iNHVESW9UN05ZTWlpM0dEZEdhTGI0Nkhvbm1hYnFPVzk5bUxwUWhpamw2UWNZc3NrSkM0Y2JGbHkvY0o5Mkc0NXBlbG1aNnNmN0YvbW1wL2NXRWcrd2o3ZGFwOHhIdXhpN2lSQ0pIR252Y29rNldUcFpHTHBYL0FhbzlZaTE2TFhvOWxpMlVJRHZpbStBejVtQlV2aWZzQmZsaDIxMnBzV0lCZ2dGaUJYWUJUOTRESHh5eWtSK2I3anZ0cCt3NUlpZnV6Z3RYM1M1YXZtcWl2Zm9GMENHa3lzVXUyay9kRW5zUDNqRzNtYnNrcWRsaUQremRQbnZjNmtjU1MwNHZMdWJqUHIvZGRrNnFMblpQVWZWb2xDSDkxWkl1UXFZMlduNTV4cFFnTytKSDNOUGZFRmZnbzkwWmUvRno3aVVuN2pFMTI5MktXOWFUM3p2Y3M5MUN3eXBPZW1wNmtmNnQvbUhDTGEzdjdHdnNuKzdDTGd3ajNqUHNRRll1TG52ZGwrNmI3TEZrNHFQc1ZyMzczUTJYSDl5MlF3QWdPK0hyMzZ2bHBGZnRmbUZad2E0MXhqWSs0b3BiQm4vYzJpcytEMjMrb1dua3plVWY3TC94Ulp2dEFmanN1N1l1ZGk3Nk5uWk8yQ09iNFpQY2w5eXQ1bVFnTytNLzNYUGcvRmZ0d3RmY1I5KzMzUVlhZWk0aHRnb1B0cWVRMWxpV1RJMDVYVjJYeWFySDdHb2xRaS90cisxVmxTbzM3MDRuSStGdjNXNnNJOTR2N2ZoV0w5eHhCelMyUSs0SWw5ekQ3eTg2Vjl5aWlydmNTaTdvSSt6ajRzaFg3R2ZzSjBQc1FybDZ1WHZjWTJwTHVrTkZLOXhFMllRZ08rSjczdlBnbEZmdGlNRS8zRkliYWd2Y2Y5d0gzSy9jTmxmZVlvSXo3d25JbVAvdnVLenRxWEZ4T1ZiNTRrWUN2bktPYnByemdxc1MwNlFqM0hQZlNLUGRJTjRFemZDejdBcGI3RnBYN0JmY3BvNnFmckp5VlozbHlDQTc0aS9QNUpCV1ljMVJsZkw1UzkyWDN4THozQVN2M0V2c2Mrd0g3Rm1WVyt4djdJa2cxbW1tZFEzcUNlSXRsaTNtaGVLdzQ5ejczUi9jdTQ4a0kyc2VHOXdSaG5mdE95VTc3Rkt4VkNNcjlZUlZvazN5U2k2aU90Wksyd0hpbGY3dVZnbUNCWFcxMVpZNElEdmgyOXZmV0ZZdjNKdUwzM1pPbG5zeWpoTUJxckhpWWFIOWxLZndDbFB0emkzK0NPZnNDd1gvQWk3aUd2NHU0Q1BjaisvZ1ZnNE9QWm01K2NZdGdsbmlYYXBlZjl3L09jcXgvclcyTGFnZ08rWC8zMmZpU0ZhYUNnR3lCZC91ais0WDNFL3RpdUkzM1pwdXU5MmFkM0U3TlIwNXJkbTkwZXErYm5Pano5eFpwbkgrc2RNcEt0KzRJbUtDb2VINXFaU243QXB4MGtqZjhSUHZPNUZiVk1QY0trdmRQOXdqM0FuMmRkSjUrbmZ0Rzk0bjNudmRBNklmM1hJdGsreXhUUVFoNmNHMm9sNkxzOXhEN0VLOTdmL3R5K3l6WCsxYW5lYnArdzNuRndRZ08rUEgzbVBpYUZheXNyTGlscGFLWWhXK0xpM2hsZDJ4a1o4eURscEhtZmFkOGVXNXhrMnFMTnBwbGk1TjRuM2FUZUFpVGVIMW9lSU5UY25uZWdhWnFmMXM1Y3JSOW9kQ25yS3hsbHp4NmlLdUxwYm1SeFg1NHhuZWFmY3dJcVpxaW02VjRySGlWT3BkbENBNzNyUGM2VFJYN3lmaFQ5NXozOGF6TXI3cVNYWU40K3hyOE92Y08vQXVYY1psbmM0aCtuZ2dPK0JISU5SWDN2UGdkKzFyNEF6RHRUTlBSWlplRCtJcjcvL3dsL0lZb1pHeC9nbzJYcFFnTzk0elM5L1lWYXBPUzA1U3FucVc2azZ4eHBYaU1XWU40ZjM5TGMzS1FDSkw4VHhXbHFwZWZqclI0aDJtU2ZKRjJrYURHaTZDV2theWF2M25zVWpqN0ZtWnZkbnRacHFTWkNBNzNoZHlERldxVGpkS1VxcDZsdkpXc2NhVjRoMWFEZUg5L1UzVnlrQWp3K0NVVmhXcERqR3lUY0oyRXNhT3RuYWE4a1o2RW1JQ2pVNGR5Q0E3M1pzVXlGYVdxbDVxT3RIaUhhWmQ4a1hhUm9NYUxvSmFSdEt1MWNOdjdBVXMxWm05MmUxbW1wSmtJRHZoM3gvZTNGY09yOTB0K3pJdjJpejFQYm9sS2kwNlBTb2Y3RjRPa3BJU2xDQTczZ2VUNGdCV0FqNFBvbGZHYjIrSlVoWVY3UG44NmdIR0hmWDF4YkpFSUR2Z0wydmlCRllDUGcraVY4WnZiNGxTRmhYcytmenFBY1lkOWZYRnNrUWozS0lFVmdJK0Q2Slh4bTl2aVZJV0ZlejUvT29CeGgzMTljV3lSQ0E3NE4vZU8rSXdWbTZhc3NJNjBlbjFyam55UmRwR1d0cFd3bHAzRHBjRnF2RXBHK3c1bWIzWjdaNTJRbXdqN1g1Y1ZwYXFJbm82MGVJZDRrM3lSZHBHZ3hvdWdscEdicE9OeXhuRkwremhtYjNaN1dhYWttUWdPK0dMM1F2bE9GWHR3YW1hSVlweVpxNGlhaGFDRmdHQ0Jab0I1VTNGVnJGck0wUGNPc0tlZ202OTVobnNJOTE5L0ZYRnNqbmlJWXA2UG5vT2FoYUNGZGxDTGRvQ0ZlM0l6cEZDbHkvYzRzS2VnbTcxd2NuMElEdmQvOTBMNVRoVjdjR3BtaUdLY21hdUltb1dnaFlCZ2dXYUFlVk54VmF4YXpORDNEckNub0p1dmVZWjdDQTczYzczNGpCV2JwcXl3anJSNmZXdU9mSkYya1phMmxiQ1duY09sd1dxOFNrYjdEbVp2ZG50bm5aQ2JDQTZMaXdZQUFBRUJBQUFCQUFBQUNnQXdBRW9BQWtSR1RGUUFEbXhoZEc0QUdnQUVBQUFBQVAvL0FBRUFBUUFFQUFBQUFQLy9BQUVBQUFBQ2EyVnliZ0FPYTJWeWJnQVVBQUFBQVFBQUFBQUFBUUFBQUFFQUJBQUNBQUFBQVFBSUFBRUhOZ0FFQUFBQU53QjRBSTRBeUFEMkFTQUJRZ0Y0QWE0QjRBSDJBaFFDSmdKRUFsNENlQUtXQXNnQzVnTDhBMllEaEFPcUE4UUQ2Z1FVQkQ0RVpBUitCTHdFeGdUVUJPSUUvQVVlQlNnRlJnVmtCWDRGakFXdUJkQUYzZ1g0QmdJR1JBWk9Cb1FHdmdiMEJ2b0hBQWNPQnh3SElnY29BQVVBSGdBQUFETC9qZ0EwLzhFQU5mKy9BRGNBQUFBT0FBVUFBQUFLQUFBQUR3QUFBQk1BQUFBVi8rMEFGdi9yQUJjQUFBQVpBQUFBR2dBQUFCc0FBQUFjQUFBQUhRQUdBRTMvc3dCUy81c0FDd0FGQUFBQUR3QUFBQlgvNmdBVy8rZ0FHQUFBQUJrQUFBQWNBQUFBSHdBQUFFc0FBQUJOLzg0QVV2L2NBQW9BQ3dBQUFBNEFBQUFQQUFBQUZmL3BBQmIvN2dBY0FBQUFId0FBQUVzQUFBQk4vN3dBVXYvZEFBZ0FCd0FBQUJYLzd3QVcvL01BR1FBQUFCb0FBQUFjQUFBQVRmL1ZBRkwvN1FBTkFBVUFBQUFLQUFBQUV3QUFBQlgvNmdBVy8vQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCOEFBQUJMQUFBQVRmKytBRkwvM3dBTkFBUUFBQUFJQUFBQUNRQUFBQXdBQUFBUEFBQUFFZ0FBQUJYLzVBQVcvL01BSHdBQUFFc0FBQUJOLytjQVR3QUFBRkwvK3dBTUFBUUFBQUFJQUFBQUNnQUFBQXdBQUFBU0FBQUFGZi9yQUJiLzdRQWNBQUFBSHdBQUFFc0FBQUJOLzhZQVV2L1RBQVVBRmYvd0FCWUFBZ0FjQUFBQVRmL0hBRkwvM1FBSEFCWC83d0FXLy9NQUdRQUFBQnNBQUFBZEFBSUFUZi9KQUZML3pnQUVBQlgvNUFBVy8rc0FUZi9CQUZMLzFBQUhBQWdBQUFBU0FBQUFGZi91QUJiLzdnQWNBQUFBVGYrOUFGTC8zd0FHQUJYLzhRQVcvL0FBR2dBQUFCd0FBQUJOLytVQVVnQU5BQVlBRmYvd0FCYi83UUFZQUFBQUhBQUFBRTMvMHdCUy85NEFCd0FWLy9RQUZ2L3VBQmdBQUFBWkFBQUFIQUFBQUUzL3ZnQlMvOVlBREFBS0FBQUFGZi91QUJiLzhRQVpBQUFBR2dBQUFCc0FBQUFjQUFBQUhmLzlBQi8vMUFCTC8rTUFUZi9MQUZMLzFRQUhBQlgvNndBVy8rMEFIQUFBQUIvL3ZRQkwvOElBVGYvQkFGTC8xQUFGQUJYLzZRQVcvKzBBR1AvMUFFMy92QUJTLzhjQUdnQUVBQUFBQmdBQUFBY0FBQUFJQUFBQUNnQUFBQXdBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZmL3dBQmIvN2dBWEFBQUFHQUFBQUJrQUFBQWNBQUFBSHdBdUFFa0FNZ0JLQUMwQVN3QTNBRXdBUHdCTi84OEFVdi9mQUFjQUZmL3JBQmIvNlFBYS8vNEFId0FBQUVzQUFBQk4vOEVBVXYvWUFBa0FCQUFBQUFnQUFBQU1BQUFBRWdBQUFCWC84d0FXLyswQUdBQUFBRTBBSVFCU0FEVUFCZ0FWLy9jQUZ2L3dBQnNBQXdBZEFBSUFUZi9IQUZMLzNRQUpBQVFBQUFBSUFBQUFFZ0FBQUJYLzh3QVcvL0FBSC8vY0FFdi8zZ0JOLzdRQVV2L0pBQW9BQkFBQUFBZ0FBQUFMQUFBQUVnQUFBQlgvN1FBVy8rZ0FILy9VQUV2LzFnQk4vNjRBVXYvSUFBb0FCQUFBQUFZQUFBQUlBQUFBREFBQ0FCSUFBQUFWLy9BQUZ2L3BBQmdBQUFCTi84TUFVdi9jQUFrQUJBQUFBQWdBQUFBU0FBQUFGZi95QUJiLzdRQWZBQUFBU3dBQUFFMy90UUJTLytNQUJnQUlBQUFBRWdBQUFCWC84QUFXLytZQVRmKzlBRkwveWdBUEFCTUFBQUFZQUFBQUdRQUFBQm9BQUFBY0FBQUFJUUFBQUNVQUFBQXRBQUFBTHdBQUFETC9ld0F6QUFBQU5QL2dBRFgvMndBM0FBQUFULy9LQUFJQUF3QUFBRS8vdndBREFCNEFBQUFmQUFBQVN3QUFBQU1BSGdBQUFCOEFBQUJMQUFBQUJnQWUvK0FBSHdBQUFEVC8yd0ExLzlrQU53QUFBRXYvekFBSUFBUUFBQUFJQUFBQURBQUFBQklBQUFBVi8vc0FIZ0FBQUIvL3dnQkwvOVFBQWdBZkFBQUFTd0FBQUFjQUJBQUFBQWdBQUFBU0FBQUFHQUFBQUI0QUFBQWZBQUFBU3dBQUFBY0FCUC9qQUFqLzdnQU0vK2tBRXYvY0FCai81QUFjQUFBQUxRQUFBQVlBSFAveEFETC9pQUEwLytNQU5mL2dBRGNBQUFCUEFBQUFBd0FlQUFBQUh3QWxBRXNBTEFBSUFCNEFBQUFmQUFBQU12K3FBRFQvM0FBMS85d0FOZ0FBQURjQUFBQkxBQUFBQ0FBRS8vVUFDUC94QUF6LzR3QVMvK1lBR1AvdUFCNEFBQUFmQUFBQVN3QUFBQU1BSHdBQUFETUFBQUJMQUFBQUJnQWNBQUFBTFFBQUFETC9rd0F6QUFBQU5QL2hBRFgvNHdBQ0FCOEFBQUJMQUFBQUVBQUUvK1FBQ1AvcEFBc0FBQUFNLytnQUV2L1pBQlgvMndBWS8rUUFHdi9NQUJ6LzRRQWVBQUFBSC8vV0FDMEFBQUJKLytFQVN2L2tBRXYvMXdCTS83a0FBZ0FlQUFBQVN3QXlBQTBBQkFBQUFBZ0FBQUFNQUFBQUVnQUFBQmdBQUFBZUFBQUFILy9KQUNVQUFBQXRBQUFBU1FBQUFFb0FBQUJMLzljQVRQKzNBQTRBQkFBRkFBZ0FBQUFMQUJjQURBQUFBQklBQUFBWUFBQUFIQUFBQUI0QUFBQWYvOXdBTFFBQUFFa0FBQUJLQUFBQVN3QUFBRXovdEFBTkFBVC8vZ0FJQUFBQURBQUFBQklBQUFBWUFBQUFIZ0FBQUI4QUFBQXRBQUFBTVFBQUFFa0FBQUJLQUFBQVN3QUFBRXdBQUFBQkFBTUFBZ0FCQUFNQUFBQURBQU1BQUFCTy81TUFULyt3QUFNQUZ2L3FBQmNBUFFBWi85RUFBUUFEQUFBQUFRQWVBQUFBQXdBV0FBSUFGd0JIQUJuLzJRQUNBQWtBQXdBaUFBQUFKQUFsQUNBQUtBQXFBQ0lBTEFBMUFDVUFOd0EzQUM4QVNRQkxBREFBVFFCTkFETUFUd0JRQURRQVVnQlNBRFlBQUFBQUFBNEFyZ0FCQUFBQUFBQUFBQkVBQUFBQkFBQUFBQUFCQUE4QUVRQUJBQUFBQUFBQ0FBY0FJQUFCQUFBQUFBQURBQ0VBSndBQkFBQUFBQUFFQUE4QVNBQUJBQUFBQUFBRkFBMEFWd0FCQUFBQUFBQUdBQlVBWkFBREFBRUVDUUFBQUNJQWVRQURBQUVFQ1FBQkFCNEFtd0FEQUFFRUNRQUNBQTRBdVFBREFBRUVDUUFEQUVJQXh3QURBQUVFQ1FBRUFCNEJDUUFEQUFFRUNRQUZBQm9CSndBREFBRUVDUUFHQUNvQlFha3lNREUySUUxcGMzTjVJRTFsZVdWeVMybHVaeUJDWVhOcGJDQk1hWFJsVW1WbmRXeGhja3RwYm1jZ1FtRnphV3dnVEdsMFpTMVNaV2QxYkdGeUxUSXdNVFk2TmpveU4wdHBibWNnUW1GemFXd2dUR2wwWlZabGNuTnBiMjRnTVM0d01EQkxhVzVuUW1GemFXeE1hWFJsTFZKbFozVnNZWElBcVFBeUFEQUFNUUEyQUNBQVRRQnBBSE1BY3dCNUFDQUFUUUJsQUhrQVpRQnlBRXNBYVFCdUFHY0FJQUJDQUdFQWN3QnBBR3dBSUFCTUFHa0FkQUJsQUZJQVpRQm5BSFVBYkFCaEFISUFTd0JwQUc0QVp3QWdBRUlBWVFCekFHa0FiQUFnQUV3QWFRQjBBR1VBTFFCU0FHVUFad0IxQUd3QVlRQnlBQzBBTWdBd0FERUFOZ0E2QURZQU9nQXlBRGNBU3dCcEFHNEFad0FnQUVJQVlRQnpBR2tBYkFBZ0FFd0FhUUIwQUdVQVZnQmxBSElBY3dCcEFHOEFiZ0FnQURFQUxnQXdBREFBTUFCTEFHa0FiZ0JuQUVJQVlRQnpBR2tBYkFCTUFHa0FkQUJsQUMwQVVnQmxBR2NBZFFCc0FHRUFjZ0FBQUFBQUFBSUFBUUFBQUFBQUZnQURBQUVBQUFFY0FBQUFBQUVHQUFBQkFBQUFBQUFBQUFFQ0FBQUFBZ0FBQUFBQUFBQUFBQUFBQUFBQUFBRUFBQU5FVGdBQUFFVk5SMGhHQUV0TUh3QTVPanM4UFQ0L1FFRkNTa2tBQUFCREFCNGdJU0lqSkNVbUp5Z3BLaXNzTFM0dk1ERXlNelExTmpjNEFBQUFBQUFBQkFVR0J3Z0pDZ3NNRFE0UEVCRVNFeFFWRmhjWUdSb2JIQjBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQlFUMUZTQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVFBb2dBQUFCNEFFQUFEQUE0QUlnQW5BQ2tBS2dBdEFDNEFPUUE3QUQ4QVFRQmFBSG9nR1NBZC8vOEFBQUFnQUNZQUtBQXFBQ3dBTGdBd0FEb0FQd0JCQUVJQVlTQVlJQnovL3dBQUFBQUFId0FBQUI4QUFBQUpBQUFBQUFBQS85Ny9vK0E1QUFBQUFRQWVBQ0lBQUFBaUFBQUFJQUFBQUI0QUlBQWdBQUFBQUFBQUFCb0FBQUFEQUVRQVRnQkZBRTBBUmdBZkFFb0FTUUJEQUI0QVVBQlBBQUE9XCIiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzODcxMWI1YmIyNDNlODk0YTZkNThjODc1NWJiMDM0YS5vdGZcIjsiLCIvLyBsaWJzXG5pbXBvcnQgJCBmcm9tICdfanF1ZXJ5JztcblxuLy8gc3R5bGVzXG5pbXBvcnQgJy4vc2Nzcy9yZXNldC5jc3MnO1xuaW1wb3J0ICcuL3Njc3MvaW5kZXguc2Nzcyc7XG5pbXBvcnQgJy4vc2Nzcy9tYXAuc2Nzcyc7XG5cbi8vIHRlbXBsYXRlIHBhcnRzXG5pbXBvcnQgY2FsbG91dHNUZW1wbGF0ZSBmcm9tICcuL3BhcnRzL2NhbGxvdXRzLmh0bWwnO1xuaW1wb3J0IG1hcFRlbXBsYXRlIGZyb20gJy4vcGFydHMvbWFwLmh0bWwnO1xuaW1wb3J0IGZhcVRlbXBsYXRlIGZyb20gJy4vcGFydHMvZmFxLmh0bWwnO1xuJChmdW5jdGlvbigpe1xuICBsZXQgJGFwcCA9ICQoJyNhcHAnKTtcbiAgJCgnI2hlYWRpbmdMZWZ0JykuYXBwZW5kKGNhbGxvdXRzVGVtcGxhdGUpO1xuICAkYXBwLmFwcGVuZChtYXBUZW1wbGF0ZSk7XG4gICRhcHAuYXBwZW5kKGZhcVRlbXBsYXRlKTtcbn0pO1xuXG4vLyBzY3JpcHRzXG5pbXBvcnQgJy4vbWFwLmpzJztcbmltcG9ydCAnLi9yc3ZwLmpzJztcblxuZnVuY3Rpb24gaW5pdFBhZ2UoKSB7XG4gICQoJyNoZWFkaW5nUmlnaHQgaW1nJykuaGVpZ2h0KCQod2luZG93KS5oZWlnaHQoKSk7XG59XG5cbiQoaW5pdFBhZ2UpO1xuIiwidmFyIG1hcCxcbiAgICBpbml0TGF0TG5nID0ge2xhdDogNDguNjA3NTQ5MSwgbG5nOiAtMTIyLjgxNTQ2NjZ9LFxuICAgIGljb25zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwidmVudWVcIixcbiAgICAgICAgICAgIGljb246ICcnLFxuICAgICAgICAgICAgbGF0bG5nOiB7bGF0OiA0OC42NDEyMDgsIGxuZzogLTEyMi45OTI4MjA3fSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcIm9yY2FcIixcbiAgICAgICAgICAgIGljb246ICcnLFxuICAgICAgICAgICAgbGF0bG5nOiB7bGF0OiA0OC41MjUwMzc1LCBsbmc6IC0xMjIuOTUxOTc3N30sXG4gICAgICAgIH0sXG4gICAgXTtcblxuZnVuY3Rpb24gaW5pdE1hcCgpIHtcblxuICAkKGZ1bmN0aW9uKCkge1xuXG4gICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcbiAgICAgIGNlbnRlcjogaW5pdExhdExuZyxcbiAgICAgIHpvb206IDExLFxuICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuU0FURUxMSVRFLFxuICAgICAgem9vbUNvbnRyb2w6IHRydWUsXG4gICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UsXG4gICAgICBzY2FsZUNvbnRyb2w6IGZhbHNlLFxuICAgICAgc3RyZWV0Vmlld0NvbnRyb2w6IHRydWUsXG4gICAgICByb3RhdGVDb250cm9sOiBmYWxzZSxcbiAgICAgIGZ1bGxzY3JlZW5Db250cm9sOiBmYWxzZSxcbiAgICB9KTtcblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpY29ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWNvbnNbaV0ubWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgIHBvc2l0aW9uOiBpY29uc1tpXS5sYXRsbmcsXG4gICAgICAgIG1hcDogbWFwLFxuICAgICAgICB0aXRsZTogaWNvbnNbaV0ua2V5XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfSk7XG5cbn1cblxud2luZG93LmluaXRNYXAgPSBpbml0TWFwO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXY+XFxuICA8YnV0dG9uIGNsYXNzPVxcXCJidXR0b25cXFwiIGlkPVxcXCJyc3ZwQnV0dG9uXFxcIj5SU1ZQPC9idXR0b24+XFxuICA8YnV0dG9uIGNsYXNzPVxcXCJidXR0b25cXFwiIGlkPVxcXCJnaWZ0QnV0dG9uXFxcIj5HaWZ0IERvbmF0aW9uPC9idXR0b24+XFxuPC9kaXY+XFxuPGJyPjxicj5cXG48ZGl2PlxcbiAgPGEgaHJlZj1cXFwiI21hcFxcXCI+RXhwbG9yZTwvYT4gLVxcbiAgPGEgaHJlZj1cXFwiI2ZhcVxcXCI+UXVlc3Rpb25zICYgQW5zd2VyczwvYT4gLVxcbiAgPGEgaHJlZj1cXFwiI3JzdnBMaXN0XFxcIiBpZD1cXFwicnN2cExpc3RCdXR0b25cXFwiPlJTVlAgTGlzdDwvYT5cXG48L2Rpdj5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBpZD1cXFwiZmFxXFxcIj5cXG4gIDxkbD5cXG4gICAgPGR0IGNsYXNzPVxcXCJraW5nYmFzaWxcXFwiPldoZW4gJiBXaGVyZSDwn5CLPC9kdD5cXG4gICAgPGRkPlxcbiAgICAgIDxwPkp1bmUgOCwgMjAxOTwvcD5cXG4gICAgICA8cD5QZWJibGUgQ292ZSBGYXJtLCAzMzQxIERlZXIgSGFyYm9yIFJkLCBFYXN0c291bmQsIFdBPC9wPlxcbiAgICAgIDxwPkZ1bGwgc2NoZWR1bGUgb2YgZXZlbnRzIFRCRC4gUHV0IGluIHlvdXIgcGhvbmUgbnVtYmVyIHRvIGJlIG5vdGlmaWVkIHdoZW4gd2XigJl2ZSBtYWRlIHVwZGF0ZXMgdG8gb3VyIHdlYnNpdGUhIElmIHlvdeKAmXJlIG5vdCBhYmxlIHRvIGFycml2ZSB0aGUgZGF5L25pZ2h0IGJlZm9yZSwgd2UgYWR2aXNlIHlvdSB0byBib29rIGEgZmVycnkgdGhhdCB3aWxsIGFycml2ZSBvbiBPcmNhcyBJc2xhbmQgdGhlIG1vcm5pbmcgb2YgSnVuZSA4IHNvIHlvdSBoYXZlIHBsZW50eSBvZiB0aW1lIHRvIHNldHRsZSBpbiBiZWZvcmVoYW5kLjwvcD5cXG4gICAgPC9kZD5cXG4gICAgPGR0IGNsYXNzPVxcXCJraW5nYmFzaWxcXFwiPkFjY29tb2RhdGlvbnMg8J+PqDwvZHQ+XFxuICAgIDxkZD5cXG4gICAgICA8cD5PcmNhcyBJc2xhbmQgaGFzIGEgZmV3IGhvdGVscyBzY2F0dGVyZWQgYXJvdW5kLCBhcyB3ZWxsIGFzIG9wdGlvbnMgdGhyb3VnaCBBaXJCbkIuPC9wPlxcbiAgICAgIDxwPlRoaXMgbGluayAoPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuZ3VpZGV0b3Nhbmp1YW5zLmNvbS9saXN0aW5ncy9vcmNhcy1pc2xhbmQvZmVhdHVyZWQtbG9kZ2luZy9cXFwiPmh0dHBzOi8vd3d3Lmd1aWRldG9zYW5qdWFucy5jb20vbGlzdGluZ3Mvb3JjYXMtaXNsYW5kL2ZlYXR1cmVkLWxvZGdpbmcvPC9hPikgaGFzIGEgbGlzdCBvZiBob3RlbHMgYW5kIGlubnMuPC9wPlxcbiAgICAgIDxwPklmIHlvdSBuZWVkIGhlbHAgZmluZGluZyBhIHBsYWNlIHRvIHN0YXksIHBsZWFzZSBlbWFpbCA8c3BhbiBjbGFzcz1cXFwiYm9sZFxcXCI+dGF5bG9yLnJlYmVjY2EuZWtlQGdtYWlsLmNvbTwvc3Bhbj4uPC9wPlxcbiAgICA8L2RkPlxcbiAgICA8ZHQgY2xhc3M9XFxcImtpbmdiYXNpbFxcXCI+VHJhdmVsIOKbtDwvZHQ+XFxuICAgIDxkZD5cXG4gICAgICA8cD5UaGUgb25seSB3YXkgdG8gcmVhY2ggT3JjYXMgSXNsYW5kIGlzIHZpYSBmZXJyeSBmcm9tIEFuYWNvcnRlcywgV0EuIEl0IGhvbGRzIGNhcnMgdG9vLCBzbyB0aGF0IHdheSB5b3UgY2FuIGhhdmUgeW91ciBjYXIgb24gdGhlIGlzbGFuZCB3aXRoIHlvdS4gUmVzZXJ2YXRpb25zIGZvciB0aGUgQW5hY29ydGVzIGZlcnJ5IHRvIE9yY2FzIElzbGFuZCBtdXN0IGJlIG1hZGUgaW4gYWR2YW5jZSBhbmQgYXJlIGF2YWlsYWJsZSBzdGFydGluZyBKYW51YXJ5IDMxIGZvciBvdXIgd2VkZGluZyBkYXRlIGFuZCBjYW4gYmUgZm91bmQgaGVyZS48L3A+XFxuICAgICAgPHAgY2xhc3M9XFxcImJvbGRcXFwiPkdldHRpbmcgdG8gdGhlIGZlcnJ5OjwvcD5cXG4gICAgICA8cD5Gcm9tIFNlYXR0bGUgdGFrZSBJLTUgbm9ydGguIEV4aXQgMjMwIG9udG8gUm91dGUgMjAgV2VzdC4gUm91dGUgMjAgYmVnaW5zIGFzIGEgdHdvLWxhbmUgcm9hZCBhbmQgdHJhdmVscyB0aHJvdWdoIG1pbGVzIG9mIGZhcm1sYW5kLiBJdCB0aGVuIHR1cm5zIGludG8gYSBmb3VyLWxhbmUgcm9hZCBhbmQgY3Jvc3NlcyBhIGxvbmcgYnJpZGdlIG9udG8gRmlkYWxnbyBJc2xhbmQuIFlvdSB3aWxsIHBhc3MgYSBjYXNpbm8gYW5kIHdpbmQgdXAgYW5kIGFyb3VuZCBpbnRvIEFuYWNvcnRlcy4gSW4gdG93biwgUm91dGUgMjAgdmVlcnMgcmlnaHQgb250byBDb21tZXJjaWFsIFN0cmVldC4gU3RheSBvbiBDb21tZXJjaWFsIFN0cmVldCBmb3IgZm91ciBsaWdodHMgYW5kIHRoZW4gdHVybiBsZWZ0IGF0IDEydGggc3RyZWV0LiBUaGVyZSBpcyBhIHNpZ24gZm9yIHRoZSBmZXJyeSB3aXRoIGFuIGFycm93LiBJdCBpcyB3ZWxsIG1hcmtlZCwgYnV0IHlvdSBjYW4gYWxzbyBsb29rIGZvciB0aGUgbGFyZ2UgU2FmZXdheSBncm9jZXJ5IHN0b3JlIG9uIHRoZSByaWdodCBhbmQgdGhlIENoZXZyb24gR2FzIFN0YXRpb24gb24gdGhlIGxlZnQuIFRoZSBmZXJyeSBsYW5kaW5nIGlzIGFwcHJveGltYXRlbHkgMi41IG1pbGVzIGFoZWFkIGZyb20gdGhpcyBpbnRlcnNlY3Rpb24uPC9wPlxcbiAgICA8L2RkPlxcbiAgICA8ZHQgY2xhc3M9XFxcImtpbmdiYXNpbFxcXCI+RkFRIPCfp5A8L2R0PlxcbiAgICA8ZHQ+V2hlbiBzaG91bGQgSSBnZXQgdGhlcmU/PC9kdD5cXG4gICAgPGRkPlxcbiAgICAgIDxwPldl4oCZcmUgc3RpbGwgd29ya2luZyBvdXQgYSBmdWxsIHNjaGVkdWxlIG9mIGV2ZW50cywgYW5kIHlvdSBjYW4gY2xpY2sgaGVyZSB0byBiZSBub3RpZmllZCB3aGVuIGl04oCZcyB1cCwgYnV0IHdl4oCZZCBhZHZpc2UgeW91IHRvIGdldCB0byB0aGUgaXNsYW5kIHRoZSBkYXkgYmVmb3JlIHRvIGdldCB5b3VyIGJlYXJpbmdzIGFuZCB0byBzZXR0bGUgaW4uIElkZWFsbHksIHlvdSBzaG91bGQgcGxhbiB0byBzdGF5IHRoZSB3ZWVrZW5kIGFuZCBpc2xhbmQgaG9wISBBbGwgb2YgdGhlIFNhbiBKdWFuIElzbGFuZHMgYXJlIGJlYXV0aWZ1bCBhbmQgd29ydGggZXhwbG9yaW5nLjwvcD5cXG4gICAgPC9kZD5cXG4gICAgPGR0PldoYXQgc2hvdWxkIEkgd2Vhcj88L2R0PlxcbiAgICA8ZGQ+XFxuICAgICAgPHA+U2VtaS1mb3JtYWwgYXR0aXJlIGlzIGlkZWFsLCBidXQgZG9u4oCZdCBzdHJlc3MgdG9vIG11Y2ghIEFzIGxvbmcgYXMgeW91IGRvbuKAmXQgd2VhciBhIHdoaXRlIGRyZXNzLCB5b3XigJlyZSBwcm9iYWJseSBmaW5lLiDwn5iJPC9wPlxcbiAgICAgIDxwPkEgZmV3IHRoaW5ncyB0byBrZWVwIGluIG1pbmQ6IFRoZSB3ZWRkaW5nIGFuZCByZWNlcHRpb24gd2lsbCBiZSBvbiB0aGUgbGF3biwgc28gcGxhbiB5b3VyIGZvb3R3ZWFyIGFjY29yZGluZ2x5ISBBbHNvLCB0aGUgaXNsYW5kIChhbmQgdGhlIFBhY2lmaWMgTm9ydGh3ZXN0IGluIGdlbmVyYWwpIGNhbiBnZXQgY2hpbGx5IHdoZW4gdGhlIHN1biBnb2VzIGRvd24gc28geW91IG1pZ2h0IHdhbnQgdG8gYnJpbmcgYSBsaWdodCBqYWNrZXQuPC9wPlxcbiAgICA8L2RkPlxcbiAgICA8ZHQ+RG8geW91IGhhdmUgYSByZWdpc3RyeT88L2R0PlxcbiAgICA8ZGQ+XFxuICAgICAgPHA+SW5zdGVhZCBvZiBhIHJlZ2lzdHJ5LCB3ZeKAmXJlIGFza2luZyBmb3IgZG9uYXRpb25zIHRvIGhlbHAgdXMgZ2V0IHRvIG91ciBob25leW1vb24gaW4gRmlqaSEgVG8gZG9uYXRlLCA8YSBpZD1cXFwiZ2lmdExpbmtcXFwiPmNsaWNrIGhlcmU8L2E+LiBWaW5ha2EhIChUaGF0IG1lYW5zIOKAmFRoYW5rIHlvdeKAmSBpbiBGaWppYW4pLjwvcD5cXG4gICAgICA8cD5BIGZldyB0aGluZ3MgdG8ga2VlcCBpbiBtaW5kOiBUaGUgd2VkZGluZyBhbmQgcmVjZXB0aW9uIHdpbGwgYmUgb24gdGhlIGxhd24sIHNvIHBsYW4geW91ciBmb290d2VhciBhY2NvcmRpbmdseSEgQWxzbywgdGhlIGlzbGFuZCAoYW5kIHRoZSBQYWNpZmljIE5vcnRod2VzdCBpbiBnZW5lcmFsKSBjYW4gZ2V0IGNoaWxseSB3aGVuIHRoZSBzdW4gZ29lcyBkb3duIHNvIHlvdSBtaWdodCB3YW50IHRvIGJyaW5nIGEgbGlnaHQgamFja2V0LjwvcD5cXG4gICAgPC9kZD5cXG4gICAgPGR0PkRvIEkgbmVlZCBhIGNhciBvbiB0aGUgaXNsYW5kPzwvZHQ+XFxuICAgIDxkZD5cXG4gICAgICA8cD5UbyBiZSBob25lc3QsIHlvdeKAmWxsIHByb2JhYmx5IHdhbnQgb25lLiBEZXBlbmRpbmcgb24gd2hlcmUgeW914oCZcmUgc3RheWluZywgeW914oCZbGwgd2FudCB0byBiZSBhYmxlIHRvIGRyaXZlIHRvIHRoZSB2ZW51ZSBhbmQgYmFjayBhbmQgdXNlIGl0IHRvIGdvIGludG8gdG93biwgdGhlIGJlYWNoLCBNb3VudCBDb25zdGl0dXRpb24sIGV0YyBhcyB0aGUgaXNsYW5kIGlzbuKAmXQgc3VwZXIgd2Fsa2FibGUgZXZlcnl3aGVyZS4gS2VlcCBpbiBtaW5kIHRoYXQgcmVudGFsIGNhcnMgb24gdGhlIGlzbGFuZCBhcmUgZXh0cmVtZWx5IGxpbWl0ZWQsIHNvIHBsYW4gdG8gcmVudCBvbmUgYmVmb3JlIHRha2luZyB0aGUgZmVycnkgaWYgbmVlZCBiZS48L3A+XFxuICAgIDwvZGQ+XFxuICAgIDxkdD5Ib3cgbG9uZyBoYXZlIHlvdSBndXlzIGJlZW4gdG9nZXRoZXI/PC9kdD5cXG4gICAgPGRkPlxcbiAgICAgIDxwPkdsYWQgeW91IGFza2VkISBBZnRlciB0YWxraW5nIGZvciBhIG1vbnRoIG9yIHNvIG9uIFRpbmRlciAoeWVzLCBUaW5kZXIhKSB3ZSBoYWQgb3VyIGZpcnN0IG9mZmljaWFsIGRhdGUgb24gSmFudWFyeSAyMCwgMjAxNSBhdCB0aGUgUG9ydGxhbmQgd2F0ZXJmcm9udCwgd2hlcmUgSSBpbnNpc3RlZCBoZSBicmluZyBTdWJpZSBhbG9uZyB0b28uIFdl4oCZdmUgYmVlbiBnb2luZyBzdHJvbmcgZXZlciBzaW5jZSBhbmQgY2Fu4oCZdCB3YWl0IHRvIHNlZSB3aGVyZSB0aGlzIG5leHQgY2hhcHRlciB0YWtlcyB1cyE8L3A+XFxuICAgIDwvZGQ+XFxuICAgIDxkdD5XaWxsIHRoZXJlIGJlIGZvb2Q/PC9kdD5cXG4gICAgPGRkPlxcbiAgICAgIDxwPlllcywgeW91IHdpbGwgYmUgZmVkISBUaGVyZSB3aWxsIGJlIGFwcGV0aXplcnMgYW5kIGRpbm5lciBhcyB3ZWxsIGFzIGRyaW5rcy4gT2gsIGFuZCBjYWtlLCBiZWNhdXNlIHdoYXQgZ29vZCBpcyBhIHdlZGRpbmcgd2l0aG91dCBjYWtlPyE8L3A+XFxuICAgIDwvZGQ+XFxuICAgIDxkdD5JIGhlYXJkIHRoZXJlIGFyZSBmYXJtIGFuaW1hbHMuLi5pcyB0aGF0IHRydWU/PC9kdD5cXG4gICAgPGRkPlxcbiAgICAgIDxwPlllcyEgUGViYmxlIENvdmUgRmFybSBpcyBhIHdvcmtpbmcgZmFybSB3aXRoIGNoaWNrZW5zLCBnb2F0cyBhbmQgdHdvIHBvdC1iZWxsaWVkIHBpZ3MgdGhhdCB5b3UgbWlnaHQgc3BvdCBkdXJpbmcgb3VyIGNlcmVtb255ITwvcD5cXG4gICAgPC9kZD5cXG4gICAgPGR0PllvdSBndXlzIGhhdmUgYSB3ZWRkaW5nIGhhc2h0YWcgZG9u4oCZdCB5b3UuPC9kdD5cXG4gICAgPGRkPlxcbiAgICAgIDxwPlRlY2huaWNhbGx5IG5vdCBhIHF1ZXN0aW9uLCBidXQgeWVzLCB3ZSBkbyEgSXTigJlzIDxzcGFuIGNsYXNzPVxcXCJib2xkXFxcIj4jbWVldHRoZWVrZXM8L3NwYW4+LCB3aGljaCBhbHNvIHRlbGxzIHlvdSBob3cgdG8gcHJvbm91bmNlIG91ciBsYXN0IG5hbWUhIFBsZWFzZSB1c2UgPHNwYW4gY2xhc3M9XFxcImJvbGRcXFwiPiNtZWV0dGhlZWtlczwvc3Bhbj4gd2hlbiB5b3UgcG9zdCB5b3VyIHBob3RvcyBvbiBzb2NpYWwgbWVkaWEgc28gd2UgY2FuIHNlZSB0aGVtITwvcD5cXG4gICAgPC9kZD5cXG4gICAgPGR0PkNvbnRhY3QgVXM8L2R0PlxcbiAgICA8ZGQ+XFxuICAgICAgPHA+SWYgeW91IG5lZWQgaGVscCB3aXRoIGFueXRoaW5nLCBwbGVhc2UgZmVlbCBmcmVlIHRvIGVtYWlsIHVzIGF0IDxzcGFuIGNsYXNzPVxcXCJib2xkXFxcIj50YXlsb3IucmViZWNjYS5la2VAZ21haWwuY29tPC9zcGFuPiBvciB5b3UgY2FuIHRleHQvYXNrIHVzIGluIHBlcnNvbiE8L3A+XFxuICAgIDwvZGQ+XFxuICA8L2RsPlxcbjwvZGl2PlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGlkPVxcXCJtYXBXcmFwcGVyXFxcIj5cXG4gIDxkaXYgaWQ9XFxcIm1hcFxcXCI+PC9kaXY+XFxuPC9kaXY+XFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwPkp1c3QgdG8gdmVyaWZ5IHdlIGtub3cgeW91LjwvcD5cXG48cCBpZD1cXFwicXVlc3Rpb25cXFwiPjwvcD5cXG48aW5wdXQgcmVxdWlyZWQgaWQ9XFxcImFuc3dlclxcXCIgbmFtZT1cXFwiYW5zd2VyXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwiVGhlIEFuc3dlclxcXCIgcmVxdWlyZSBhdXRvY29tcGxldGU9XFxcIm9mZlxcXCIgb25pbnB1dD1cXFwidmFsaWRhdGVBbnN3ZXIoZXZlbnQpXFxcIiBvbmNoYW5nZT1cXFwidmFsaWRhdGVBbnN3ZXIoZXZlbnQpXFxcIj5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHA+V2UgZW5jb3VyYWdlIGFsbCBlZmZvcnRzIHRvIGFycmFuZ2UgbG9kZ2luZyBvciBjYXJwb29saW5nIHdpdGggZmVycnkgcmVzZXJ2YXRpb24gYWhlYWQgb2YgdGltZSDwn5mPLiBSZW1lbWJlciBpZiB5b3UgbmVlZCBhbnkgaGVscCBhdHRlbmRpbmcgZW1haWwgdXMgYXQgdGF5bG9yLnJlYmVjY2EuZWtlQGdtYWlsLmNvbTwvcD5cXG48YnI+XFxuPHA+SGVyZSdzIGV2ZXJ5b25lIHdobyBpcyBnb2luZzo8L3A+XFxuPGJyPlxcbjx1bCBpZD1cXFwicnN2cExpc3RcXFwiPjwvdWw+XFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgaWQ9XFxcInJzdnBOYW1lXFxcIj5cXG4gIDxwIGNsYXNzPVxcXCJib2xkXFxcIj5SU1ZQPC9wPlxcbiAgPGlucHV0IHJlcXVpcmVkIGlkPVxcXCJmdWxsTmFtZVxcXCIgbmFtZT1cXFwiZnVsbE5hbWVcXFwiIHR5cGU9XFxcInRleHRcXFwiIHBsYWNlaG9sZGVyPVxcXCJZb3VyIEZ1bGwgTmFtZVxcXCIgb25jaGFuZ2U9XFxcInZhbGlkYXRlRnVsbE5hbWUoZXZlbnQpXFxcIiBvbmlucHV0PVxcXCJ2YWxpZGF0ZUZ1bGxOYW1lKGV2ZW50KVxcXCIgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiPlxcbjwvZGl2PlxcbjxkaXYgaWQ9XFxcInJzdnBSYWRpb3NcXFwiPlxcbiAgPGxhYmVsIGZvcj1cXFwiZ29pbmdcXFwiPlxcbiAgICA8c3Bhbj5Hb2luZzwvc3Bhbj5cXG4gICAgPGlucHV0IHJlcXVpcmVkIGlkPVxcXCJnb2luZ1xcXCIgbmFtZT1cXFwiZ29pbmdcXFwiIHR5cGU9XFxcInJhZGlvXFxcIiB2YWx1ZT1cXFwiMVxcXCIgb25pbnZhbGlkPVxcXCJ0aGlzLnNldEN1c3RvbVZhbGlkaXR5KCdQbGVhc2UgbGV0IHVzIGtub3cgaWYgeW91IGFyZSBhdHRlbmRpbmcnKVxcXCIgb25jaGFuZ2U9XFxcInJlc2V0UmFkaW9WYWxpZGl0eSgpXFxcIj5cXG4gIDwvbGFiZWw+XFxuICA8bGFiZWwgZm9yPVxcXCJub3RHb2luZ1xcXCI+XFxuICAgIDxzcGFuPk5vdCBHb2luZzwvc3Bhbj5cXG4gICAgPGlucHV0IHJlcXVpcmVkIGlkPVxcXCJub3RHb2luZ1xcXCIgbmFtZT1cXFwiZ29pbmdcXFwiIHR5cGU9XFxcInJhZGlvXFxcIiB2YWx1ZT1cXFwiMFxcXCIgb25pbnZhbGlkPVxcXCJ0aGlzLnNldEN1c3RvbVZhbGlkaXR5KCdQbGVhc2UgbGV0IHVzIGtub3cgaWYgeW91IGFyZSBhdHRlbmRpbmcnKVxcXCIgb25jaGFuZ2U9XFxcInJlc2V0UmFkaW9WYWxpZGl0eSgpXFxcIj5cXG4gIDwvbGFiZWw+XFxuPC9kaXY+XFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxoMz5XaG8gZWxzZSBhcmUgeW91IGJyaW5naW5nPzwvaDM+XFxuPGlucHV0IGlkPVxcXCJwbHVzMVxcXCIgbmFtZT1cXFwicGx1czFcXFwiIHR5cGU9XFxcInRleHRcXFwiIHBsYWNlaG9sZGVyPVxcXCJUaGVpciBGdWxsIE5hbWVcXFwiIG9uY2hhbmdlPVxcXCJ2YWxpZGF0ZUZ1bGxOYW1lKGV2ZW50KVxcXCIgb25pbnB1dD1cXFwidmFsaWRhdGVGdWxsTmFtZShldmVudClcXFwiIGF1dG9jb21wbGV0ZT1cXFwib2ZmXFxcIj5cXG48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgaWQ9XFxcImFkZFBsdXMxXFxcIiBjbGFzcz1cXFwiYnV0dG9uIGFkZFxcXCI+KzwvYnV0dG9uPlxcblwiOyIsIi8vIGxpYnNcbmltcG9ydCB2ZXggZnJvbSAndmV4LWpzJztcbmltcG9ydCB2ZXhEaWFsb2cgZnJvbSAndmV4LWRpYWxvZyc7XG52ZXgucmVnaXN0ZXJQbHVnaW4odmV4RGlhbG9nKTtcbnZleC5kZWZhdWx0T3B0aW9ucy5jbGFzc05hbWUgPSAndmV4LXRoZW1lLWZsYXQtYXR0YWNrJztcblxuLy8gY3NzXG5pbXBvcnQgJ3ZleC1qcy9kaXN0L2Nzcy92ZXguY3NzJztcbmltcG9ydCAndmV4LWpzL2Rpc3QvY3NzL3ZleC10aGVtZS1mbGF0LWF0dGFjay5jc3MnO1xuaW1wb3J0ICcuL3Njc3MvdmV4LmN1c3RvbS5jc3MnO1xuXG4vLyBodG1sIHBhcnRzXG5pbXBvcnQgcnN2cEFjY2Vzc1RlbXBsYXRlIGZyb20gJy4vcGFydHMvcnN2cC1hY2Nlc3MuaHRtbCc7XG5pbXBvcnQgcnN2cFBhcnRPbmVUZW1wbGF0ZSBmcm9tICcuL3BhcnRzL3JzdnAtb25lLmh0bWwnO1xuaW1wb3J0IHJzdnBQYXJ0VHdvVGVtcGxhdGUgZnJvbSAnLi9wYXJ0cy9yc3ZwLXR3by5odG1sJztcbmltcG9ydCByc3ZwTGlzdFRlbXBsYXRlIGZyb20gJy4vcGFydHMvcnN2cC1saXN0Lmh0bWwnO1xuXG4vLyBhc3luYyBsb2FkaW5nIGVsZW1lbnRzXG5jb25zdCBmaXJlYmFzZVNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaXJlYmFzZVNjcmlwdCcpO1xuY29uc3QgZmlyZXN0b3JlU2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpcmVzdG9yZVNjcmlwdCcpO1xuXG5pZih0eXBlb2Ygd2luZG93LmZpcmViYXNlID09PSAndW5kZWZpbmVkJykge1xuICBmaXJlc3RvcmVTY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgIGluaXRGaXJlYmFzZSgpO1xuICB9KTtcbn0gZWxzZSB7XG4gIGluaXRGaXJlYmFzZSgpO1xufVxuXG5mdW5jdGlvbiBpbml0RmlyZWJhc2UoKSB7XG5cbiAgZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCh7XG4gICAgYXBpS2V5OiBcIkFJemFTeUNEd19YWGNRcTBKTkEwOFFDZlg0MWxLV2JmM3k3VzkxWVwiLFxuICAgIGF1dGhEb21haW46IFwibWVldHRoZWVrZXMtMTU0NDA1NTUzMTIxMi5maXJlYmFzZWFwcC5jb21cIixcbiAgICBkYXRhYmFzZVVSTDogXCJodHRwczovL21lZXR0aGVla2VzLTE1NDQwNTU1MzEyMTIuZmlyZWJhc2Vpby5jb21cIixcbiAgICBwcm9qZWN0SWQ6IFwibWVldHRoZWVrZXMtMTU0NDA1NTUzMTIxMlwiLFxuICAgIHN0b3JhZ2VCdWNrZXQ6IFwibWVldHRoZWVrZXMtMTU0NDA1NTUzMTIxMi5hcHBzcG90LmNvbVwiLFxuICAgIG1lc3NhZ2luZ1NlbmRlcklkOiBcIjgxMjA0NzMyMjc1NFwiXG4gIH0pO1xuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjcnN2cEJ1dHRvbicsIHJzdnBQYXJ0T25lKTtcbiAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNyc3ZwTGlzdEJ1dHRvbicsIHJzdnBMaXN0KTtcbiAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNhZGRQbHVzMScsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGFkZFBsdXNPbmUoKTtcbiAgfSk7XG4gICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjZ2lmdEJ1dHRvbicsIGdpZnRDbGljayk7XG4gICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjZ2lmdExpbmsnLCBnaWZ0Q2xpY2spO1xufVxuXG5jb25zdCByc3ZwID0ge307XG5mdW5jdGlvbiByc3ZwS2V5KHJzdnApIHtcbiAgcmV0dXJuIHJzdnAuZmlyc3ROYW1lLnNwbGl0KCcgJylbMF0udG9Mb3dlckNhc2UoKStyc3ZwLmxhc3ROYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5cbndpbmRvdy5hbnN3ZXIgPSBudWxsO1xuZnVuY3Rpb24gYmxvY2tBY2Nlc3MoX2NhbGxiYWNrKSB7XG5cbiAgdmV4LmRpYWxvZy5vcGVuKHtcbiAgICB1bnNhZmVNZXNzYWdlOiByc3ZwQWNjZXNzVGVtcGxhdGUsXG4gICAgYnV0dG9uczogW1xuICAgICAgJC5leHRlbmQoe30sIHZleC5kaWFsb2cuYnV0dG9ucy5ZRVMsIHsgY2xhc3NOYW1lOiAndmV4LWRpYWxvZy1idXR0b24tcHJpbWFyeScsIHRleHQ6ICdDb250aW51ZScsIGNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmKCEkKGUudGFyZ2V0KS5jbG9zZXN0KCdmb3JtJylbMF0uY2hlY2tWYWxpZGl0eSgpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2UodGhpcy5pZCk7XG4gICAgICAgIF9jYWxsYmFjaygpO1xuICAgICAgfX0pLFxuICAgICAgJC5leHRlbmQoe30sIHZleC5kaWFsb2cuYnV0dG9ucy5OTywgeyBjbGFzc05hbWU6ICd2ZXgtZGlhbG9nLWJ1dHRvbi1zZWNvbmRhcnknLCB0ZXh0OiAnTmV2ZXJtaW5kJywgY2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmlkKTtcbiAgICAgIH19KVxuICAgIF1cbiAgfSk7XG5cbiAgY29uc3Qgc2VjdXJpdHlRdWVzdGlvbkRvYyA9IGZpcmViYXNlLmZpcmVzdG9yZSgpLmNvbGxlY3Rpb24oXCJzZWN1cml0eS1xdWVzdGlvblwiKS5kb2MoJ3ByaW1hcnknKTtcbiAgc2VjdXJpdHlRdWVzdGlvbkRvYy5nZXQoKVxuICAgIC50aGVuKChzZWN1cml0eVF1ZXN0aW9uU25hcHNob3QpID0+IHtcbiAgICAgIGNvbnN0IHNlY3VyaXR5UXVlc3Rpb24gPSBzZWN1cml0eVF1ZXN0aW9uU25hcHNob3QuZGF0YSgpO1xuICAgICAgJCgnI3F1ZXN0aW9uJykudGV4dChzZWN1cml0eVF1ZXN0aW9uLnF1ZXN0aW9uKTtcbiAgICAgIHdpbmRvdy5hbnN3ZXIgPSAkLnRyaW0oc2VjdXJpdHlRdWVzdGlvbi5hbnN3ZXIudG9Mb3dlckNhc2UoKSk7XG4gICAgfSk7XG5cbn1cblxuZnVuY3Rpb24gcnN2cFBhcnRPbmUoKSB7XG5cbiAgYmxvY2tBY2Nlc3MoKCkgPT4ge1xuICAgIHZleC5kaWFsb2cub3Blbih7XG4gICAgICB1bnNhZmVNZXNzYWdlOiByc3ZwUGFydE9uZVRlbXBsYXRlLFxuICAgICAgYnV0dG9uczogW1xuICAgICAgICAkLmV4dGVuZCh7fSwgdmV4LmRpYWxvZy5idXR0b25zLllFUywgeyBjbGFzc05hbWU6ICd2ZXgtZGlhbG9nLWJ1dHRvbi1wcmltYXJ5JywgdGV4dDogJ0NvbnRpbnVlJywgY2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBpZighJChlLnRhcmdldCkuY2xvc2VzdCgnZm9ybScpWzBdLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgcnN2cC5nb2luZyA9IChwYXJzZUludCgkKFwiaW5wdXRbbmFtZT0nZ29pbmcnXTpjaGVja2VkXCIpLnZhbCgpKSA9PT0gMSk7XG4gICAgICAgICAgbGV0IG5hbWUgPSAkLnRyaW0oJChcImlucHV0W25hbWU9J2Z1bGxOYW1lJ11cIikudmFsKCkpO1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNwbGl0KCcgJyk7XG4gICAgICAgICAgcnN2cC5sYXN0TmFtZSA9IG5hbWUucG9wKCk7XG4gICAgICAgICAgcnN2cC5maXJzdE5hbWUgPSBuYW1lLmpvaW4oJyAnKTtcbiAgICAgICAgICByc3ZwLmF0dGVuZGVlcyA9IFt7XG4gICAgICAgICAgICBsYXN0TmFtZTogcnN2cC5sYXN0TmFtZSxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogcnN2cC5maXJzdE5hbWVcbiAgICAgICAgICB9XTtcbiAgICAgICAgICBjb25zdCByc3ZwRG9jID0gZmlyZWJhc2UuZmlyZXN0b3JlKCkuY29sbGVjdGlvbihcInJzdnBcIikuZG9jKHJzdnBLZXkocnN2cCkpO1xuICAgICAgICAgIHJzdnBEb2MuZ2V0KClcbiAgICAgICAgICAgIC50aGVuKChyc3ZwU25hcHNob3QpID0+IHtcbiAgICAgICAgICAgICAgaWYocnN2cFNuYXBzaG90LmV4aXN0cykge1xuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHJzdnAsIHttb2RpZmllZDogZmlyZWJhc2UuZmlyZXN0b3JlLkZpZWxkVmFsdWUuc2VydmVyVGltZXN0YW1wKCl9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkLmV4dGVuZChyc3ZwLCB7Y3JlYXRlZDogZmlyZWJhc2UuZmlyZXN0b3JlLkZpZWxkVmFsdWUuc2VydmVyVGltZXN0YW1wKCksIG1vZGlmaWVkOiBmaXJlYmFzZS5maXJlc3RvcmUuRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXAoKX0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcnN2cERvYy5zZXQocnN2cCwge21lcmdlOiB0cnVlfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGlmKHJzdnAuZ29pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoX3RoaXMuaWQpO1xuICAgICAgICAgICAgICAgICAgICByc3ZwUGFydFR3bygpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmV4LmRpYWxvZy5hbGVydCgnV2UgYXJlIHNvcnJ5IHlvdSBjYW5ub3QgbWFrZSBpdCAnK3JzdnAuZmlyc3ROYW1lKycuIFRoYW5rIHlvdSBmb3IgeW91ciBSU1ZQLicpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgICB2ZXguZGlhbG9nLmFsZXJ0KCdUaGVyZSB3YXMgYW4gaXNzdWUgd2l0aCB5b3VyIHJlc3BvbnNlLCBwbGVhc2UgZW1haWwgdXMgYXQgdGF5bG9yLnJlYmVjY2EuZWtlQGdtYWlsLmNvbSDwn6Se8J+PuycpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9fSksXG4gICAgICAgICQuZXh0ZW5kKHt9LCB2ZXguZGlhbG9nLmJ1dHRvbnMuTk8sIHsgY2xhc3NOYW1lOiAndmV4LWRpYWxvZy1idXR0b24tc2Vjb25kYXJ5JywgdGV4dDogJ0xhdGVyJywgY2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuaWQpO1xuICAgICAgICB9fSlcbiAgICAgIF1cbiAgICB9KTtcbiAgfSk7XG5cbn1cblxuZnVuY3Rpb24gcnN2cFBhcnRUd28oKSB7XG5cbiAgdmV4LmRpYWxvZy5vcGVuKHtcbiAgICB1bnNhZmVNZXNzYWdlOiByc3ZwUGFydFR3b1RlbXBsYXRlLFxuICAgIGJ1dHRvbnM6IFtcbiAgICAgICQuZXh0ZW5kKHt9LCB2ZXguZGlhbG9nLmJ1dHRvbnMuWUVTLCB7IGNsYXNzTmFtZTogJ3ZleC1kaWFsb2ctYnV0dG9uLXByaW1hcnknLCB0ZXh0OiAnQ29udGludWUnLCBjbGljazogZnVuY3Rpb24oZSkge1xuICAgICAgICBpZighJChlLnRhcmdldCkuY2xvc2VzdCgnZm9ybScpWzBdLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgICAgICQoJ2lucHV0W2lkXj1cInBsdXNcIl0nKS5lYWNoKChpLCBpdGVtKSA9PiB7XG4gICAgICAgICAgbGV0IG5hbWUgPSAkLnRyaW0oJChpdGVtKS52YWwoKSk7XG4gICAgICAgICAgaWYobmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICBjb25zdCBsYXN0TmFtZSA9IG5hbWUucG9wKCk7XG4gICAgICAgICAgICBjb25zdCBmaXJzdE5hbWUgPSBuYW1lLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIHJzdnAuYXR0ZW5kZWVzLnB1c2goe1xuICAgICAgICAgICAgICBsYXN0TmFtZTogbGFzdE5hbWUsXG4gICAgICAgICAgICAgIGZpcnN0TmFtZTogZmlyc3ROYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJzdnBEb2MgPSBmaXJlYmFzZS5maXJlc3RvcmUoKS5jb2xsZWN0aW9uKFwicnN2cFwiKVxuICAgICAgICAgICAgICAuZG9jKHJzdnBLZXkocnN2cCkpXG4gICAgICAgICAgICAgIC51cGRhdGUoe1xuICAgICAgICAgICAgICAgIGF0dGVuZGVlczogcnN2cC5hdHRlbmRlZXNcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoX3RoaXMuaWQpO1xuICAgICAgICAgICAgICAgIHZleC5kaWFsb2cuYWxlcnQoJ1RoYW5rcyAnK3JzdnAuZmlyc3ROYW1lKycuIFBsZWFzZSByZWFkIGFsbCB0aGUgaW5mb3JtYXRpb24gb24gb3VyIHdlYnNpdGUgc28geW91IGNhbiBnZXQgaW5mb3JtZWQgYWJvdXQgYXR0ZW5kaW5nIG91ciB3ZWRkaW5nIG9uIE9yY2FzIElzbGFuZC4nKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoX3RoaXMuaWQpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB2ZXguZGlhbG9nLmFsZXJ0KCdUaGVyZSB3YXMgYW4gaXNzdWUgY2FwdHVyaW5nIHlvdXIgcmVzcG9uc2UsIHBsZWFzZSBlbWFpbCB1cyBhdCB0YXlsb3IucmViZWNjYS5la2VAZ21haWwuY29tIPCfpJ7wn4+7Jyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9fSksXG4gICAgICAkLmV4dGVuZCh7fSwgdmV4LmRpYWxvZy5idXR0b25zLk5PLCB7IGNsYXNzTmFtZTogJ3ZleC1kaWFsb2ctYnV0dG9uLXNlY29uZGFyeScsIHRleHQ6ICdJdFxcJ3MgSnVzdCBNZScsIGNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMuY2xvc2UodGhpcy5pZCk7XG4gICAgICAgIHZleC5kaWFsb2cuYWxlcnQoJ1RoYW5rcyAnK3JzdnAuZmlyc3ROYW1lKycuIFBsZWFzZSByZWFkIGFsbCB0aGUgaW5mb3JtYXRpb24gb24gb3VyIHdlYnNpdGUgc28geW91IGNhbiBnZXQgaW5mb3JtZWQgYWJvdXQgYXR0ZW5kaW5nIG91ciB3ZWRkaW5nIG9uIE9yY2FzIElzbGFuZC4nKTtcbiAgICAgIH19KVxuICAgIF1cbiAgfSk7XG5cbn1cblxuZnVuY3Rpb24gcnN2cExpc3QoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgYmxvY2tBY2Nlc3MoKCkgPT4ge1xuXG4gICAgdmV4LmRpYWxvZy5vcGVuKHtcbiAgICAgIHVuc2FmZU1lc3NhZ2U6IHJzdnBMaXN0VGVtcGxhdGUsXG4gICAgICBidXR0b25zOiBbXG4gICAgICAgICQuZXh0ZW5kKHt9LCB2ZXguZGlhbG9nLmJ1dHRvbnMuWUVTLCB7IGNsYXNzTmFtZTogJ3ZleC1kaWFsb2ctYnV0dG9uLXByaW1hcnknLCB0ZXh0OiAnQWRpb3MnLCBjbGljazogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5pZCk7XG4gICAgICAgIH19KVxuICAgICAgXVxuICAgIH0pO1xuXG4gICAgZmlyZWJhc2UuZmlyZXN0b3JlKCkuY29sbGVjdGlvbihcInJzdnBcIikuZ2V0KCkudGhlbihmdW5jdGlvbihxdWVyeVNuYXBzaG90KSB7XG4gICAgICBxdWVyeVNuYXBzaG90LmZvckVhY2goZnVuY3Rpb24ocnN2cERvYykge1xuICAgICAgICByc3ZwRG9jLmRhdGEoKS5hdHRlbmRlZXMuZm9yRWFjaCgoYXR0ZW5kYW50KSA9PiB7XG4gICAgICAgICAgJCgnPGxpPicrYXR0ZW5kYW50LmZpcnN0TmFtZSArICcgJyArIGF0dGVuZGFudC5sYXN0TmFtZSsnPC9saT4nKS5hcHBlbmRUbygnI3JzdnBMaXN0Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByc3ZwcyA9IGZpcmViYXNlLmZpcmVzdG9yZSgpLmNvbGxlY3Rpb24oXCJzZWN1cml0eS1xdWVzdGlvblwiKS5kb2MoJ3ByaW1hcnknKTtcbiAgICBzZWN1cml0eVF1ZXN0aW9uRG9jLmdldCgpXG4gICAgICAudGhlbigoc2VjdXJpdHlRdWVzdGlvblNuYXBzaG90KSA9PiB7XG4gICAgICAgIGNvbnN0IHNlY3VyaXR5UXVlc3Rpb24gPSBzZWN1cml0eVF1ZXN0aW9uU25hcHNob3QuZGF0YSgpO1xuICAgICAgICAkKCcjcXVlc3Rpb24nKS50ZXh0KHNlY3VyaXR5UXVlc3Rpb24ucXVlc3Rpb24pO1xuICAgICAgICB3aW5kb3cuYW5zd2VyID0gJC50cmltKHNlY3VyaXR5UXVlc3Rpb24uYW5zd2VyLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfSk7XG5cbiAgfSk7XG5cbn1cblxubGV0IGFkZGl0aW9uYWxzID0gMTtcbmZ1bmN0aW9uIGFkZFBsdXNPbmUoKSB7XG4gIGNvbnN0ICRhZGRpdGlvbmFsID0gJCgnI3BsdXMnK2FkZGl0aW9uYWxzKTtcbiAgYWRkaXRpb25hbHMrKztcbiAgY29uc3QgJGFub3RoZXIgPSAkYWRkaXRpb25hbC5jbG9uZSgpO1xuICAkYW5vdGhlci5wcm9wKHtpZDogJ3BsdXMnK2FkZGl0aW9uYWxzLCB2YWx1ZTogbnVsbCwgbmFtZTogJ3BsdXMnK2FkZGl0aW9uYWxzfSk7XG4gICRhbm90aGVyLmluc2VydEFmdGVyKCRhZGRpdGlvbmFsKTtcbn1cblxud2luZG93LnZhbGlkYXRlRnVsbE5hbWUgPSBmdW5jdGlvbihlKSB7XG4gIGxldCBuYW1lID0gJC50cmltKCQoZS50YXJnZXQpLnZhbCgpKTtcbiAgaWYoIW5hbWUubGVuZ3RoICYmICFlLnRhcmdldC5yZXF1aXJlZCkge1xuICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBuYW1lID0gbmFtZS5zcGxpdCgnICcpO1xuICBpZihuYW1lLmxlbmd0aCA8IDIpIHtcbiAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShcIldlIHJlcXVlc3QgdGhhdCB5b3UgZW50ZXIgYSBmdWxsIG5hbWVcIik7XG4gIH0gZWxzZSB7XG4gICAgZS50YXJnZXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJcIik7XG4gIH1cbn07XG5cbndpbmRvdy5yZXNldFJhZGlvVmFsaWRpdHkgPSBmdW5jdGlvbigpIHtcbiAgJCgnaW5wdXRbbmFtZT1cImdvaW5nXCJdJykuZWFjaCgoaSwgaXRlbSkgPT4ge1xuICAgIGl0ZW0uc2V0Q3VzdG9tVmFsaWRpdHkoXCJcIik7XG4gIH0pO1xufTtcblxud2luZG93LnZhbGlkYXRlQW5zd2VyID0gZnVuY3Rpb24oZSkge1xuICBpZih3aW5kb3cuYW5zd2VyID09PSBudWxsKSB7XG4gICAgZS50YXJnZXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJJdCdzIG5vdCB0aGUgYW5zd2VyXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0aGVBbnN3ZXIgPSAkLnRyaW0oJChlLnRhcmdldCkudmFsKCkpLnRvTG93ZXJDYXNlKCk7XG4gIGlmKHRoZUFuc3dlciA9PT0gd2luZG93LmFuc3dlcikge1xuICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpO1xuICB9IGVsc2Uge1xuICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KFwiSXQncyBub3QgdGhlIGFuc3dlclwiKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2lmdENsaWNrKCkge1xuICB2ZXguZGlhbG9nLm9wZW4oe1xuICAgIHVuc2FmZU1lc3NhZ2U6ICc8cD5JbiBsaWV1IG9mIHBoeXNpY2FsIGdpZnRzIHdlIGFyZSBhc2tpbmcgZm9yIGRvbmF0aW9uIHRvIGhlbHAgdXMgZ2V0IHRvIG91ciBob25leW1vb24gaW4gRmlqaSEgQ2xpY2sgdGhlIGxpbmsgdG8gZ28gdG8gb3VyIGhvbmV5bW9vbiB0cmF2ZWwgcG9vbCBvbiBQYXlwYWwuIFBheXBhbCBpcyBvdXIgcHJlZmVycmVkIHBsYXRmb3JtIGZvciBjb250cmlidXRpb25zLCBiZWNhdXNlIHlvdSBjYW4gc2VuZCB1cyBnaWZ0cyB3aXRob3V0IGFueSBmZWVzIGlmIHlvdSBjb25uZWN0IHlvdXIgYmFuayBhY2NvdW50LjwvcD48YnI+PGEgaHJlZj1cImh0dHBzOi8vcGF5cGFsLm1lL3Bvb2xzL2MvOGFYYk9ITEZCbFwiIHRhcmdldD1cIl9ibGFua1wiPkdpdmUgdG8gb3VyIHBvb2w8L2E+JyxcbiAgICBidXR0b25zOiBbXG4gICAgICAkLmV4dGVuZCh7fSwgdmV4LmRpYWxvZy5idXR0b25zLllFUywgeyBjbGFzc05hbWU6ICd2ZXgtZGlhbG9nLWJ1dHRvbi1wcmltYXJ5JywgdGV4dDogJ09rJywgY2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmlkKTtcbiAgICAgIH19KSxcbiAgICBdXG4gIH0pO1xufVxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vaW5kZXguc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9pbmRleC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9pbmRleC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbWFwLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbWFwLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL21hcC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vcmVzZXQuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3Jlc2V0LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vcmVzZXQuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vdmV4LmN1c3RvbS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vdmV4LmN1c3RvbS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3ZleC5jdXN0b20uY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7Il0sInNvdXJjZVJvb3QiOiIifQ==